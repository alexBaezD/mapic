import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Stack;

/***************************************************************************/
parser code {:
	static TablaDatos tabla = new TablaDatos();
	static int estado;
	StringBuffer m = new StringBuffer("");
    static StringBuffer []vec=new StringBuffer[10];
    static int i=0;
//*******************************************
   public void Documenta(int tipo)
   { m.append("Error de Sintaxis No."+tipo);
     ManejoDeErrores objeto=new ManejoDeErrores();
     String tip=objeto.Errores(tipo);
	  m.append("\n"+tip+"\n");
      vec[i++]=m;

   }
//*******************************************
   public void syntax_error(Symbol cur_token)
   {
   	estado=((Symbol)stack.peek()).parse_state;
   	  ManejoDeErrores obj = new ManejoDeErrores();
      String m=obj.analizaToken(cur_token);
      System.err.println("\n\nSimbolo actual analizado: "+m+"-->"+cur_token);
      //System.err.println("\n\nSimbolo actual analizado: "+cur_token);

   }
//******************************************
   public void report_error(String message, Object info)
   { if (info instanceof java_cup.runtime.Symbol)
     { java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
       if (s.left >= 0)
       { m.append("Linea "+ (s.left +1));
         if (s.right >= 0)
          m.append(", Columna "+(s.right)+"\n");
       }
     }
   }
/**************METODO MAIN ********/
public static void main(String[] arg)
 	{
	  /* Crea un objeto parser */
	  parser parserObj = new parser();
	  /* Asigna el Scanner */
	  Yylex miAnalizadorLexico = new Yylex(new InputStreamReader(System.in));
	  parserObj.setScanner(miAnalizadorLexico);
	  try{
		parserObj.parse();
		tabla.imprimir();
	  }
catch(Exception x){
	  parserObj.Documenta(estado);
  	  for(int j=0;j<i;j++)
		System.out.println(vec[j]);

	}

}

:};
//*******************************************************************************
/***ACTION CODE***/

action code{:

methodsTable tablaMetodos = new methodsTable();
String codigo="";
String miCodigo="";
String errores="";
String retardos="";
String auxiliar="";
String losMetodos="";
String aux="";
String auxno="";
String aux2="";
String auxsw="";
String p2="";
String p1="";
String aux3="";
String cadena_condiciones=" ";
String cadena_tipo="";
String cadena_parametros="";
String encadenamst="";
String cadena_decvar="";

	private static Stack<String>p = new Stack<String>();
	private static Stack<String>pila2 = new Stack<String>();

	private static int actualTmp=0;

	private static String nuevaTmp() {
		return "tmp"+(++actualTmp);
	}

	private static int actualEtq=0;

	private static String nuevaEtq() {
		return "etqY"+(++actualEtq);
	}



	private String generarTerceto(String terceto) {
		String tmp = nuevaTmp();
		//System.out.println("Terceto: "+tmp + terceto);
		return tmp;
	}

	private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2){
		BloqueCondicion etqs = new BloqueCondicion();
		etqs.etqVerdad = nuevaEtq();
		etqs.etqFalso = nuevaEtq();
		etqs.condicion = Rvalor1+condicion+Rvalor2;
		auxiliar="";
		/*
		*System.out.println("\t if" + Rvalor1 + condicion + Rvalor2 + "");
		*/
	//System.out.println("\tif "+ Rvalor1 + condicion + Rvalor2 +" goto etq Vd "+ etqs.etqVerdad);
	//RESULT=Rvalor1 + condicion + Rvalor2;
  //  System.out.println("\tgoto etq Falso: "+ etqs.etqFalso);
		return etqs;
	}

	private BloqueCondicion generarCondicion(String condicion, String Rvalor2){
		BloqueCondicion etqs = new BloqueCondicion();
		etqs.condicion = condicion+Rvalor2;
		auxiliar="";
		/*
		*System.out.println("\t if" + Rvalor1 + condicion + Rvalor2 + "");
		*/
		return etqs;
	}
	private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2,String extra){
		BloqueCondicion etqs = new BloqueCondicion();

		etqs.condicion = Rvalor1+condicion+Rvalor2+extra;
		auxiliar="";
		return etqs;
	}



:};
//**************************************************************************

	// Símbolo (terminal y no terminal)

/* Símbolos (tokens devueltos por el escáner). */
/* Terminales Datos Complejos */
terminal INTEGER,REAL,CHAR,BOOLEAN;
terminal CARACTER,NUMREAL,CTELOGICA;
terminal COMA;
/* Terminales */
terminal CHALE, DELAY, TMR0, MAIN, SETUP, FUSES, ENTRADA, SALIDA, RETARDO, CICLO;
terminal PA, PB, PC, PD, PE, TA, TB, TC, TD, TE, ANSEL, ANSELH;
terminal TA0, TA1, TA2, TA3, TA4, TA5, TA6, TA7;
terminal TB0, TB1, TB2, TB3, TB4, TB5, TB6, TB7;
terminal TC0, TC1, TC2, TC3, TC4, TC5, TC6, TC7;
terminal TD0, TD1, TD2, TD3, TD4, TD5, TD6, TD7;
terminal TE0, TE1, TE2, TE3;
terminal PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7;
terminal PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7;
terminal PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7;
terminal PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7;
terminal PE0, PE1, PE2, PE3;
terminal ANSEL0, ANSEL1, ANSEL2, ANSEL3, ANSEL4, ANSEL5, ANSEL6, ANSEL7;
terminal ANSELH0, ANSELH1, ANSELH2, ANSELH3, ANSELH4, ANSELH5;
terminal OPTION_REG, OPTIONREG_INTEDG, OPTIONREG_PS, OPTIONREG_T0CS, OPTIONREG_T0SE, OPTIONREG_PSA, OPTIONREG_PS2, OPTIONREG_PS1, OPTIONREG_PS0, OPTIONREG_RBPU;
terminal INTCON, INTCONGIE, INTCONPEIE, INTCONT0IE, INTCONINTE, INTCONRBIE, INTCONT0IF, INTCONINTF, INTCONRBIF;
terminal ADCON0_ADCS1, ADCON0_ADCS0, ADCON0_CHS3, ADCON0_CHS2, ADCON0_CHS1, ADCON0_CHS0, ADCON0_GO, ADCON0_ADON;
terminal ADCON1_ADFM, ADCON1_VCFG1, ADCON1_VCFG0;
terminal VOID,INTERRUPT;
terminal THEN,NO,FIN,DO;
terminal SWITCH,OF,OTHERWISE;
terminal LPAREN, RPAREN, MAS, MENOS, DIVISION, LLLAVE, RLLAVE, DOSPUNTOS, PCOMA, IGUAL, IGUAL2,TOGGLE;
terminal MAYOR, MENOR , MAYORIGUAL , MENORIGUAL,AND,OR,DIFERENTE,TIPOVC,RECBITSDER,RECBITSIZQ,RETURN;
terminal Integer NUMERO;
terminal String ID;
terminal String NMETODO;
terminal String SI;
terminal String CASO;
terminal String WHILE;
terminal String BINARIOCADENA;
terminal String HEXACADENA , FREQ;
/* No terminales */
non terminal programa;
non terminal metodos;
non terminal main;
non terminal setup;
non terminal ciclo;
non terminal metodo;
non terminal cases;
non terminal String  instrucciones;
non terminal confpuertos;
non terminal String puertos;
non terminal String puertost;
non terminal String io;
non terminal String  instruccion;
non terminal String  declvar,muchasdeclvar;
non terminal String expression,item_condicion;
non terminal BloqueCondicion condicion;
non terminal String signo,condicion_extra;
non terminal String tipo,exprtipos,parametros;
non terminal operamesta;
non terminal String extraperamesta;
non terminal String parentesis;
non terminal String extraparentesis, frecuencia;

// Declaraciones de preferencia
/* Preferencias*/
precedence left MAS, MENOS , MAYOR , MENOR,TOGGLE, IGUAL , IGUAL2;
precedence left ID,NMETODO;
// La gramática en BNF
//**************************************************************************
 programa::= FUSES:fuses frecuencia:f metodos main
 				{:
 					miCodigo=fuses+f+miCodigo;
              		 // System.out.println("Clase Generada\n\n"+miCodigo+"\n\n");
                File miClase;
	        	try{
	            	miClase = new File("mapic.c");
	            	if(miClase.exists())
	            		miClase.delete();
	            	if(miClase.createNewFile()){
	                	//System.out.println("Se ha creado el archivo");
	            	}
	            	FileWriter escribir=new FileWriter(miClase,true);
	            	escribir.write(miCodigo);
	            	escribir.close();
	        	}catch(IOException e){
	        		System.out.println("ERROR NO SE PUEDE CREAR EL ARCHIVO ");
	        	}

:};
///////////////////////////////////////////////////////////////////////////////////////////////////
 metodos::=  setup ciclo
	        |setup RETARDO:retardo LPAREN RPAREN PCOMA ciclo   {: miCodigo=retardo+miCodigo;  :}
	        |  metodo setup ciclo
				{:
					miCodigo=losMetodos+miCodigo;
				:}
	        |  metodo setup RETARDO:retardo LPAREN RPAREN PCOMA ciclo
				{:
					miCodigo=retardo+losMetodos+miCodigo;
				:}
			/************************************************************************************/
				|muchasdeclvar:dv setup RETARDO:retardo LPAREN RPAREN PCOMA ciclo   {: miCodigo=dv+retardo+miCodigo;  :}
				|muchasdeclvar:dv metodo setup ciclo
			{:
				miCodigo=dv+losMetodos+miCodigo;
			:}
				|muchasdeclvar:dv metodo setup RETARDO:retardo LPAREN RPAREN PCOMA ciclo
			{:
				miCodigo=dv+retardo+losMetodos+miCodigo;
			:}
			| muchasdeclvar:dv setup ciclo

			;
frecuencia::= /* empty */
						{:
							RESULT=" ";
						:}
					| FREQ:f LLLAVE NUMERO:n RLLAVE
						{:
							RESULT=f+" "+n+"\n";
						:}
					;
///////////////////////////////////////////////////////////////////////////////////////////////////////
setup::=SETUP:setup   LLLAVE confpuertos RLLAVE
		{:
			//System.out.println("codigo intermedio==>"+setup+"   "+fsetup);
	        miCodigo=setup+"{\n\tOSCCON=0x60;"+miCodigo+"\n}";
		:}
		|SETUP:setup  LLLAVE  confpuertos  instrucciones RLLAVE
		{:
	        //System.out.println("codigo intermedio==>"+setup+"   "+fsetup);
	        miCodigo=setup+"{\n\tOSCCON=0x60;\n\tANSEL=0;\n"+miCodigo+auxiliar+"\n}";
		:};
//////////////////////////////////////////////////////////////////////////////////////////////////////////
confpuertos::=puertos:p IGUAL io:i PCOMA
			{:
				miCodigo=miCodigo+p+i;
			:}

			|confpuertos puertos:p IGUAL io:i PCOMA
	        {:
				miCodigo=miCodigo+p+i;
	        :};
/////////////////////////////////////////////////////////////////////////////////////////////////////
io::=ENTRADA
	{:
		RESULT="1;\n";
	:}

    |SALIDA:salida
	{:
		RESULT="0;\n";
	:}
	;
//////////////////////////////////////////////////////////////////////////////////////////////
ciclo::= CICLO:ciclo   LLLAVE  instrucciones   RLLAVE
		{:
			miCodigo=miCodigo+ciclo+"{\n\t \t \n\n"+ auxiliar +"\t\t\n\n\t}";
			auxiliar="";
        :}
        |CICLO:ciclo LLLAVE  RLLAVE
        {:
        	miCodigo=miCodigo+ciclo+"{\n\t \t \n\n \t\t\n\n\t}";
        :}
		;
/////////////////////////////////////////////////////////////////////////////////////////////////
main::= MAIN:main  LLLAVE instrucciones  RLLAVE
		{:
			miCodigo=miCodigo+main+"{\n\t\tsetup();\n\t\tloop();\n"+auxiliar+"\n\t\t return; \n\t }";
		    auxiliar="";
		:}

		|	MAIN:main  LLLAVE  RLLAVE
		{:
			miCodigo=miCodigo+main+"{\n\t\tsetup();\n\t\tloop();\n\n\t\t return; \n\t }";
		:}
		;
////////////////////////////////DECLARACION DE METODOS////////////////////////////////////////////
//*************************SIN PARAMETROS*********************************************
metodo::=VOID:v INTERRUPT:it ID:i LPAREN RPAREN LLLAVE instrucciones RLLAVE
		{:
			Metodos s;
			if ((s = tablaMetodos.search(i)) == null)
				s = tablaMetodos.insert(i,auxiliar);
			else
			{
				s.setvalue(auxiliar);
			}
			codigo=v+""+it+i+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
			//System.out.println("codigo intermedio==> int "+codigo);
		:}
		|VOID:v ID:i LPAREN RPAREN LLLAVE instrucciones RLLAVE
				{:
					Metodos s;
					if ((s = tablaMetodos.search(i)) == null)
						s = tablaMetodos.insert(i,auxiliar);
					else
					{
						s.setvalue(auxiliar);
					}
					codigo=v+i+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
					losMetodos=losMetodos+codigo;
				    auxiliar="";
					//System.out.println("codigo intermedio==> int "+codigo);
				:}

		|metodo VOID:v ID:m LPAREN  RPAREN LLLAVE instrucciones  RLLAVE
		{:
			Metodos s;
			if ((s = tablaMetodos.search(m)) == null)
				s = tablaMetodos.insert(m,auxiliar);
			else
				{ s.setvalue(auxiliar);}
			codigo=v+m+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
			//System.out.println("codigo intermedio==> int "+codigo);
		 :}
//*************************CON PARAMETROS*********************************************
		 |VOID:v ID:i LPAREN parametros:p RPAREN LLLAVE instrucciones RLLAVE
		{:
			Metodos s;
			if ((s = tablaMetodos.search(i)) == null)
				s = tablaMetodos.insert(i,auxiliar);
			else
			{
				s.setvalue(auxiliar);
			}
			codigo=v+i+"("+cadena_parametros+")\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		    cadena_parametros="";
			//System.out.println("codigo intermedio==> int "+codigo);
		:}

		|metodo VOID:v ID:m LPAREN parametros:p RPAREN LLLAVE instrucciones  RLLAVE
		{:
			Metodos s;
			if ((s = tablaMetodos.search(m)) == null)
				s = tablaMetodos.insert(m,auxiliar);
			else
				{ s.setvalue(auxiliar);}
			codigo=v+m+"("+cadena_parametros+")\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		    cadena_parametros="";
			//System.out.println("codigo intermedio==> int "+codigo);
		 :}
		 ;

parametros::= ID:id DOSPUNTOS tipo:t {:
				cadena_parametros=" "+t+" "+id;
			:}
			|ID:id DOSPUNTOS tipo:t COMA parametros {:
				cadena_parametros=" "+t+" "+id+" ,"+cadena_parametros;
			:}
			;
//////////////////////////////////////////////////////////////////////////////////////////
instrucciones::=instruccion:in
			{:
				//System.out.println("valor de in en intruccion:"+in);
				auxiliar=in + auxiliar;
                //aux=in;
				//RESULT=in;
				//System.out.println("cadena de una istruccion en aux: "+auxiliar);
			:}

			|instruccion:in instrucciones
			{:
			//	System.out.println("valor de in en instrucciones:"+in);
				auxiliar=in+auxiliar;
				//RESULT=in;
                //aux=in;
			//	System.out.println("cadena de varias instrucciones en aux:"+auxiliar);
			:};

///////////////////////////INSTRUCCIONES DISPONIBLES EN MAPIC//////////////////////////////////////////////////////////////////
instruccion::= declvar:d {:
				 RESULT="\n\t"+d;
			:}
		   |ID:id IGUAL exprtipos:t PCOMA{:
			//System.out.println("Mensaje "+id + "-->"+t);
			DatoSimbolo ds=parser.tabla.buscar(id);
			 if(ds!= null){
			 	//System.err.println(id + " redeclarada.");
			 RESULT="\n\t"+id+"="+t+";";
			}
			 else{
			 	System.out.println("Error al Asignar valor a: "+id);
			}


			:}


//*****************************************************************************
			|puertos:p TOGGLE:t puertost:u PCOMA
			{:
				//   miCodigo=p+t+u+";\n"+miCodigo;
				RESULT="\n\t"+p+t+u+";\n";
				//System.out.println("cadena de toggles:"+RESULT);
			:}
//*****************************************************************************
       | puertos:p IGUAL NUMERO:n PCOMA

			{:
				//   miCodigo=p+t+u+";\n"+miCodigo;
				RESULT="\n\t"+p+n+";\n";
				//System.out.println("cadena de toggles:"+RESULT);
			:}
			| puertos:p IGUAL BINARIOCADENA:n PCOMA

		 {:
			 //   miCodigo=p+t+u+";\n"+miCodigo;
			 RESULT="\n\t"+p+n+";\n";
			 //System.out.println("cadena de toggles:"+RESULT);
		 :}

		 | puertos:p IGUAL ID:n PCOMA

		{:
			//   miCodigo=p+t+u+";\n"+miCodigo;
			RESULT="\n\t"+p+n+";\n";
			//System.out.println("cadena de toggles:"+RESULT);
		:}

//********************Invocar a un metodo*********************************************************
		 	| ID:i LPAREN RPAREN PCOMA
			{:
				Metodos s;
				if ((s = tablaMetodos.search(i)) == null)
				{System.out.println(i+ " es una METODO no definido");}
				else
				{
					// System.out.println(i+" instrucciones del metodo => "+s.getValor());
					//System.out.println("codigo intermedio==> "+i+"();");
					RESULT="\t"+i+"();\n";
				}
			:}
			| ID:i LPAREN expression:ex RPAREN PCOMA
			{:
				Metodos s;
				if ((s = tablaMetodos.search(i)) == null)
				{System.out.println(i+ " es una METODO no definido");}
				else
				{
					// System.out.println(i+" instrucciones del metodo => "+s.getValor());
					//System.out.println("codigo intermedio==> "+i+"();");
					RESULT="\t"+i+"("+ex+");\n";
				}
			:}

//*****************************************************************************
			| CHALE:c LPAREN NUMERO:n RPAREN PCOMA
			{:
				//retardos= retardos+c+"("+n+");\n";
	   			RESULT=c+"("+n+");\n";
			:}

//*******************************************************************************

			| DELAY:c LLLAVE NUMERO:n RLLAVE PCOMA
			{:
				//retardos= retardos+c+"("+n+");\n";
	   			RESULT=c+"("+n+");\n";
			:}
//*****************************************************************************

			|puertos:p IGUAL puertost:u MAS NUMERO:n PCOMA
			{:
				RESULT=p+u+"+"+n+";\n";
			:}
//********************************************************************************
			|puertos:p IGUAL puertost:u MAS ID:v PCOMA
			{:
				RESULT=p+u+"+"+v+";\n";
			:}
//********************************************************************************
			|ID:v MAS MAS PCOMA
			{:
				RESULT=v+"++;\n";
			:}

			|ID:v MENOS MENOS PCOMA
			{:
				RESULT=v+"--;\n";
			:}
//********************************************************************************
			| RETURN PCOMA
			{:
				RESULT="return;\n";
			:}
			|TMR0:tm IGUAL  HEXACADENA:hc PCOMA
			{:
				RESULT = tm+"= "+hc;
			:}
//********************************************************************************

			| SI:etqFinIf  LPAREN condicion:c  RPAREN THEN instrucciones:i FIN
			{:
				aux="\n\t\tif("+c.condicion+")\n\t\t{\t"+auxiliar+"\t\t}\n";
				auxiliar="";
				RESULT=aux;
			:}
			| SI:etqFinIf  LPAREN puertost:p  RPAREN THEN instrucciones:i FIN
			{:
				aux="\n\t\tif("+p+")\n\t\t{\t"+auxiliar+"\t\t}\n";
				auxiliar="";
				RESULT=aux;
			:}

//********************************************************************************

			| SI:etqFinIf  LPAREN condicion:c  RPAREN THEN instrucciones
				{:

					p.push(auxiliar);
					auxiliar="";
				:}
			NO instrucciones FIN
				{:

					p1=p.pop().toString();
					auxno=auxiliar;
					RESULT="\n\t\tif("+c.condicion+")\n\t\t{\t"+p1+"\t\t}"+"\n\t\telse\n\t\t{\n\t"+auxno+"\t\t}\n";
					auxiliar="";
				:}

				| SI:etqFinIf  LPAREN puertost:p  RPAREN THEN instrucciones
				{:

					pila2.push(auxiliar);
					auxiliar="";
				:}
			NO instrucciones FIN
				{:

					p1=pila2.pop().toString();
					auxno=auxiliar;
					RESULT="\n\t\tif("+p+")\n\t\t{\t"+p1+"\t\t}"+"\n\t\telse\n\t\t{\n\t"+auxno+"\t\t}\n";
					auxiliar="";
				:}



//********************************************************************************

			| SWITCH LPAREN expression:e RPAREN OF cases:c FIN SWITCH
			{:
				RESULT="\n\t\tswitch("+e+")\n{\n\t\t\t"+c+"\n}\n";
				auxiliar="";
			:}

			| SWITCH LPAREN puertost:p RPAREN OF cases:c FIN SWITCH
			{:
				RESULT="\n\t\tswitch("+p+")\n{\n\t\t\t"+c+"\n}\n";
				auxiliar="";
			:}
//*****************************************************************************

			| WHILE:etqInicioWhile LPAREN  condicion:c  RPAREN DO instrucciones FIN WHILE
			{:
				RESULT="\n\t\twhile("+c.condicion+")\n\t\t{\n\t"+auxiliar+"\t\t}";
				auxiliar="";
			:}
			| WHILE:etqInicioWhile LPAREN  expression:c  RPAREN DO instrucciones FIN WHILE
			{:
				RESULT="\n\t\twhile("+c+")\n\t\t{\n\t"+auxiliar+"\t\t}";
				auxiliar="";
		  :}
//*******************************************************************************
			| ID:v RECBITSIZQ NUMERO:n PCOMA
			{:
				RESULT=v+"<<"+n+";\n";
			:}

			| ID:v RECBITSDER NUMERO:n PCOMA
			{:
				RESULT=v+">>"+n+";\n";
			:}
			|ID:var IGUAL ID:v RECBITSIZQ NUMERO:n PCOMA
				{:
					RESULT = var +"="+v+">>"+n+";\n";
				:}
			|ID:var IGUAL ID:v RECBITSDER NUMERO:n PCOMA
				{:
					RESULT = var +"="+v+"<<"+n+";\n";
				:}
//*********************************************************************************
			|ID:v IGUAL expression:v2 operamesta:o expression:v3 PCOMA
			{:
				RESULT=v+"="+v2+o+v3+";\n";
			:}

			|ID:v IGUAL expression:v2 operamesta:o expression:v3 extraperamesta:eo PCOMA
			{:
				RESULT=v+"="+v2+o+v3+eo+";\n";
				encadenamst="";
			:}

			|ID:v IGUAL parentesis:p PCOMA
			{:
				RESULT=v+"="+p+";\n";
			:}

			|ID:v IGUAL parentesis:p operamesta:o parentesis:p2 PCOMA
			{:
				RESULT=v+"="+p+o+p2+";\n";
			:}

			|ID:v IGUAL parentesis:p operamesta:o expression:e PCOMA
			{:
				RESULT=v+"="+p+o+e+";\n";
			:}
			;

muchasdeclvar ::= declvar:dv{:
			cadena_decvar=dv;
					RESULT=cadena_decvar;
			:}
			|declvar:dv muchasdeclvar {:
					cadena_decvar=dv+cadena_decvar;
					RESULT=cadena_decvar;
			:}
			;

declvar::=TIPOVC ID:id DOSPUNTOS tipo:t  PCOMA{:
				DatoSimbolo ds=parser.tabla.buscar(id);
				if(ds!= null)
					System.err.println(id + " redeclarada.");
				else{
				 //	System.out.println("Mensaje "+id + "-->"+t);
				 	RESULT="\n\t"+t+" "+id+";";
					parser.tabla.insertar(id, t,"");
				}
			:}
			|TIPOVC ID:id DOSPUNTOS tipo:t IGUAL exprtipos:e  PCOMA{:
				//RESULT = t;
				if(parser.tabla.buscar(id)!= null){
					//System.err.println(id + " redeclarada.");
				}else{
				 	//System.out.println("Mensaje "+id + "-->"+e);
				 	switch(t){
			            case "int":
			                if(Num.valInt(e)){
			                    RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
			                }else{
			                	String msj="//La variable: "+id+" es una cadena "+e+" y no es compatible con un tipo de dato INT\n";
			                    RESULT= msj;
			                }
			                break;
			            case "float":
			            	if(Num.valFloat(e)){
			                    RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
			            	}else{
			            		String msj="//La variable: "+id+" es una cadena "+e+" y no es compatible con un tipo de dato FLOAT\n";
			                    RESULT= msj;
			            	}
			                break;
			            case "char":
			            	if(Num.valInt(e) || Num.valFloat(e)){
				                String msj="//La variable: "+id+" es un numero "+e+" y no es compatible con un CARACTER\n";
			                    RESULT= msj;
				            }else{
				                RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
				            }
			                break;
			            case "bool":
			            	if(e.equalsIgnoreCase("TRUE") || e.equalsIgnoreCase("FALSE")){
			            		RESULT="\n\t"+t+" "+id+" ="+e.toLowerCase()+";";
			            		parser.tabla.insertar(id,t,e);
			            	}else{
			            		String msj="\n//La variable: "+id+" es un valor no compatible "+e+" se requiere TRUE o FALSE\n";
			                    RESULT= msj;
			            	}
			                break;
			            default :
			            	String msj="//Tipo de dato desconocido: "+t+"\n";
			                    RESULT= msj;
		        	}
				}
			:}
			;


parentesis::= LPAREN expression:v2 RPAREN
			{:RESULT="("+v2+")";:}

			| LPAREN expression:v2 operamesta:o expression:v3 RPAREN
			{:RESULT="("+v2+o+v3+")";:}

			| LPAREN expression:v2 operamesta:o expression:v3 extraperamesta:eo RPAREN
			{:RESULT="("+v2+o+v3+eo+")";:}

			| LPAREN expression:v2 operamesta:o expression:v3 operamesta:o2 parentesis:p RPAREN
			{:RESULT="("+v2+o+v3+o2+p+")";:}

			| LPAREN parentesis:p operamesta:o parentesis:p2 RPAREN
			{:RESULT="("+p+o+p2+")";:}

			| LPAREN parentesis:p operamesta:o expression:e RPAREN
			{:RESULT="("+p+o+e+")";:}

			| LPAREN parentesis:p operamesta:o expression:p2 extraparentesis:ep RPAREN
			{:RESULT="("+p+o+p2+ep+")";:}

			| LPAREN parentesis:p operamesta:o parentesis:p2 extraparentesis:ep RPAREN
			{:RESULT="("+p+o+p2+ep+")";:}
			;

extraparentesis::= operamesta:o parentesis:p
				{:RESULT=o+p;:}

				| parentesis:p
				{:RESULT=p;:}



				| extraperamesta:ep parentesis:p
				{:RESULT=ep+p;:}

				| extraparentesis:ep operamesta:op parentesis:p
				{:RESULT=ep+op+p;:}


				;

////////////////////////////////////////////////////////////////////////////

	cases::= CASO expression:e2 DOSPUNTOS instrucciones
			{:
				RESULT="case "+e2+":"+auxiliar+"break;\n";
				auxiliar="";
			:}
			| OTHERWISE DOSPUNTOS instrucciones
			{:
				RESULT="default: "+auxiliar+"break;\n";
				auxiliar="";
			:}
			|cases:c CASO expression:e2 DOSPUNTOS instrucciones
			{:
				RESULT=c+"case "+e2+":"+auxiliar+"break;\n";
				auxiliar="";
			:}
			|cases:c OTHERWISE DOSPUNTOS instrucciones
			{:
				RESULT=c+"default: "+auxiliar+"break;\n";
				auxiliar="";
			:}

			|CASO expression:e2 DOSPUNTOS
			{:
				RESULT="case "+e2+":\n";

			:}

			|cases:c CASO expression:e2 DOSPUNTOS
			{:
				RESULT=c+"case "+e2+":\n";

			:}
	;

//////////////////////////////////////////////////////////////////
operamesta::= MAS
			{:RESULT="+";:}

			| MENOS
			{:RESULT="-";:}

			| DIVISION
			{:RESULT="/";:}
			;
////////////////////////////////////////////////////////////////
extraperamesta::=operamesta:o expression:v
				{:
					RESULT=o+v;
				:}


				|extraperamesta operamesta:o expression:v
				{:
					encadenamst=encadenamst+o+v;
					RESULT=encadenamst;
				:}
				;
/////////////////////////////////////////////////////////////////
expression::= ID:id  {:RESULT=id;:}
		| NUMERO:num
		{:
			RESULT= Integer.toString(num);
								//generarTerceto("="+num);
		:}

		| ID:id NUMERO:n
		{:
			RESULT=id+n;
		:}

		| NUMERO:n ID:id
		{:
			RESULT=n+id;
		:}


		;
//Para el uso del SI NO
item_condicion::=
		ID:id  {:
			RESULT=id;
		:}
		| NUMERO:num {:
			RESULT= Integer.toString(num);
		:}
		|puertost:p {:
				RESULT=p;
		:}
		| BINARIOCADENA:n
		{:
			RESULT=""+n;
		:}
		| HEXACADENA:hc
		{:
			RESULT=""+hc;
		:}
		;

///////////////////////////////////////////////////////////////////


condicion ::= item_condicion:e1 signo:sig  item_condicion:e2 {:
				RESULT = generarCondicion(e1 ,sig, e2);
			:}
			|item_condicion:e1 signo:sig item_condicion:e2 condicion_extra:c {:
			 RESULT = generarCondicion(e1 ,sig, e2,c);
			:}

			;

condicion_extra::= signo:sig item_condicion:e1 {:
					cadena_condiciones=" "+sig+e1;
					RESULT=cadena_condiciones;
					//System.out.println("resto de las condicion-->"+cadena_condiciones);
				:}

				| signo:sig item_condicion:e1 condicion_extra {:
					cadena_condiciones =" "+sig+e1 +cadena_condiciones;
					RESULT =cadena_condiciones;
					//System.out.println("resto de las condicion-->"+cadena_condiciones);
				:}
				;


signo::= MAYOR {:       RESULT=" > ";  :}
	    | MENOR {:      RESULT=" < ";  :}
	    | MENORIGUAL {: RESULT=" <= "; :}
	    | MAYORIGUAL {: RESULT=" >= "; :}
	    | IGUAL2 {:     RESULT=" == "; :}
	    | DIFERENTE {:  RESULT=" != "; :}
	    | OR {:         RESULT=" || "; :}
	    | AND {:        RESULT=" && "; :}
	    ;
//*******************TIPOS DE DATOS EN MAPIC**********************************************
tipo ::= INTEGER {:
 		 	RESULT="int";
 		:}
		 | REAL {:
		 	RESULT="float";
		 	:}
		 | CHAR {:
		 	RESULT="char";
		 	:}
		 | BOOLEAN {:
		  RESULT="bool";
		   :}
		  ;
exprtipos ::= ID:id {:
			System.out.println("Esto es un identificador= "+id);
			 DatoSimbolo s;
			 if ((s = parser.tabla.buscar(id)) != null) {
				cadena_tipo=s.getTipo();
				RESULT =s.getValor() ;
			}else{
				System.out.println("Varible -->"+id+" no declarada");
			}

		  :}
		 | NUMERO:n {:
		 	RESULT=""+n;
		  :}
		 | NUMREAL:n {:
		 	RESULT=""+n;
		 :}
		 | CARACTER:b {:
		 	RESULT=""+b;
		:}
		 | CTELOGICA:b{:
		 	RESULT=""+b;
		 :}
		 |HEXACADENA:hc {:
			 RESULT=""+hc;
			:}
			| BINARIOCADENA:bi {:
				RESULT=""+bi;
			:}
		;

//*****************************************************************************
/*puertosG ::=PA:pa {: RESULT=pa+"="; :}
	    |PB:pb {: RESULT=pb+"="; :}
	    |PC:pc {: RESULT=pc+"=";:}
	    |PD:pd {: RESULT=pd+"="; :}
	    |PE:pe {:RESULT=pe+"=";:}
	    |TA:ta  {: RESULT=ta+"="; :}
	    |TB:tb  {:RESULT=tb+"="; :}
	    |TC:tc  {: RESULT=tc+"="; :}
	    |TD:td  {: RESULT=td+"="; :}
	    |TE:te  {: RESULT=te+"=";  :}
	    ;*/
puertos::= PA:pa {: RESULT=pa+"="; :}
	    |PB:pb {: RESULT=pb+"="; :}
	    |PC:pc {: RESULT=pc+"=";:}
	    |PD:pd {: RESULT=pd+"="; :}
	    |PE:pe {:RESULT=pe+"=";:}
	    |TA:ta  {: RESULT=ta+"="; :}
	    |TB:tb  {:RESULT=tb+"="; :}
	    |TC:tc  {: RESULT=tc+"="; :}
	    |TD:td  {: RESULT=td+"="; :}
	    |TE:te  {: RESULT=te+"=";  :}
	    |ANSEL:ansel {:RESULT = ansel + " = ";:}
	    |ANSELH:anselh {:RESULT = anselh + " = ";:}
	    |INTCON:intcon {:RESULT = intcon + " = ";:}
	    //
	    |TA0:ta0 {:	RESULT=ta0+"="; :}
	    |TA1:ta1 {:	RESULT=ta1+"="; :}
		|TA2:ta2 {:	RESULT=ta2+"="; :}
		|TA3:ta3 {:	RESULT=ta3+"="; :}
		|TA4:ta4 {:	RESULT=ta4+"="; :}
		|TA5:ta5 {:	RESULT=ta5+"="; :}
		|TA6:ta6 {:	RESULT=ta6+"="; :}
		|TA7:ta7 {:	RESULT=ta7+"="; :}
		//
		|TB0:tb0 {:	RESULT=tb0+"="; :}
		|TB1:tb1 {:	RESULT=tb1+"="; :}
		|TB2:tb2 {:	RESULT=tb2+"="; :}
		|TB3:tb3 {:	RESULT=tb3+"="; :}
		|TB4:tb4 {:	RESULT=tb4+"="; :}
		|TB5:tb5 {:	RESULT=tb5+"="; :}
		|TB6:tb6 {:	RESULT=tb6+"="; :}
		|TB7:tb7 {:	RESULT=tb7+"="; :}
		//
		|TC0:tc0 {:	RESULT=tc0+"="; :}
		|TC1:tc1 {:	RESULT=tc1+"="; :}
		|TC2:tc2 {:	RESULT=tc2+"="; :}
		|TC3:tc3 {:	RESULT=tc3+"="; :}
		|TC4:tc4 {:	RESULT=tc4+"="; :}
		|TC5:tc5 {:	RESULT=tc5+"="; :}
		|TC6:tc6 {:	RESULT=tc6+"="; :}
		|TC7:tc7 {:	RESULT=tc7+"="; :}
		//
		|TD0:td0 {:	RESULT=td0+"="; :}
		|TD1:td1 {:	RESULT=td1+"="; :}
		|TD2:td2 {:	RESULT=td2+"="; :}
		|TD3:td3 {:	RESULT=td3+"="; :}
		|TD4:td4 {:	RESULT=td4+"="; :}
		|TD5:td5 {:	RESULT=td5+"="; :}
		|TD6:td6 {:	RESULT=td6+"="; :}
		|TD7:td7 {:	RESULT=td7+"="; :}
		//
		|TE0:te0 {:	RESULT=te0+"="; :}
		|TE1:te1 {:	RESULT=te1+"="; :}
		|TE2:te2 {:	RESULT=te2+"="; :}
		|TE3:te3 {:	RESULT=te3+"="; :}
		//
	    |PA0:pa0 {:	RESULT=pa0+"="; :}
	    |PA1:pa1 {:	RESULT=pa1+"="; :}
	    |PA2:pa2 {:	RESULT=pa2+"="; :}
	    |PA3:pa3 {:	RESULT=pa3+"="; :}
	    |PA4:pa4 {:  	RESULT=pa4+"="; :}
	    |PA5:pa5 {:	RESULT=pa5+"="; :}
	    |PA6:pa6 {:	RESULT=pa6+"=";  :}
	    |PA7:pa7 {: 	RESULT=pa7+"=";  :}
	    |PB0:pb0 {:	RESULT=pb0+"=";  :}
	    |PB1:pb1 {:	RESULT=pb1+"=";   :}
	    |PB2:pb2 {:	RESULT=pb2+"=";   :}
	    |PB3:pb3 {:	RESULT=pb3+"=";   :}
	    |PB4:pb4 {:	RESULT=pb4+"=";  :}
	    |PB5:pb5 {:	  RESULT=pb5+"=";  :}
	    |PB6:pb6 {:	  RESULT=pb6+"=";  :}
	    |PB7:pb7 {:	  RESULT=pb7+"=";  :}
	    |PC0:pc0 {:	RESULT=pc0+"=";    :}
	    |PC1:pc1 {:  RESULT=pc1+"=";  :}
	    |PC2:pc2 {:	RESULT=pc2+"=";    :}
	    |PC3:pc3 {:  RESULT=pc3+"=";  :}
        |PC4:pc4 {:  RESULT=pc4+"=";  :}
        |PC5:pc5 {: RESULT=pc5+"=";   :}
	    |PC6:pc6 {:	 RESULT=pc6+"=";   :}
	    |PC7:pc7 {:     RESULT=pc7+"=";  :}
	    |PD0:pd0 {:	 RESULT=pd0+"=";  :}
	    |PD1:pd1 {:	RESULT=pd1+"=";   :}
	    |PD2:pd2 {:   RESULT=pd2+"=";  :}
	    |PD3:pd3 {:	 RESULT=pd3+"=";  :}
	    |PD4:pd4 {:	RESULT=pd4+"=";   :}
	    |PD5:pd5 {:   RESULT=pd5+"=";  :}
	    |PD6:pd6 {:	RESULT=pd6+"=";   :}
	    |PD7:pd7 {:  RESULT=pd7+"=";   :}
	    |PE0:pe0 {:	RESULT=pe0+"=";   :}
	    |PE1:pe1 {:	RESULT=pe1+"=";     :}
	    |PE2:pe2 {:	RESULT=pe2+"=";     :}
		|PE3:pe3 {:	RESULT=pe3+"=";     :}
		//
		|ANSEL0:ansel0{:RESULT=ansel0 + " = ";:}
		|ANSEL1:ansel1{:RESULT=ansel1 + " = ";:}
		|ANSEL2:ansel2{:RESULT=ansel2 + " = ";:}
		|ANSEL3:ansel3{:RESULT=ansel3 + " = ";:}
		|ANSEL4:ansel4{:RESULT=ansel4 + " = ";:}
		|ANSEL5:ansel5{:RESULT=ansel5 + " = ";:}
		|ANSEL6:ansel6{:RESULT=ansel6 + " = ";:}
		|ANSEL7:ansel7{:RESULT=ansel7 + " = ";:}
		//
		|ANSELH0:anselh0{:RESULT=anselh0 + " = ";:}
		|ANSELH1:anselh1{:RESULT=anselh1 + " = ";:}
		|ANSELH2:anselh2{:RESULT=anselh2 + " = ";:}
		|ANSELH3:anselh3{:RESULT=anselh3 + " = ";:}
		|ANSELH4:anselh4{:RESULT=anselh4 + " = ";:}
		|ANSELH5:anselh5{:RESULT=anselh5 + " = ";:}
		//
		|INTCONGIE:intgie{:RESULT=intgie + " = ";:}
		|INTCONPEIE:intpeie{:RESULT=intpeie + " = ";:}
		|INTCONT0IE:intt0ie{:RESULT=intt0ie + " = ";:}
		|INTCONINTE:intinte{:RESULT=intinte + " = ";:}
		|INTCONRBIE:intrbie{:RESULT=intrbie + " = ";:}
		|INTCONT0IF:intt0if{:RESULT=intt0if + " = ";:}
		|INTCONINTF:intintf{:RESULT=intintf + " = ";:}
		|INTCONRBIF:intrbif{:RESULT=intrbif + " = ";:}
		//
		|OPTIONREG_INTEDG:opintedg{:RESULT = opintedg + " = ";:}
		|OPTIONREG_PS:opps{:RESULT = opps + " = ";:}
		|OPTIONREG_T0CS:opt0cs{:RESULT = opt0cs + " = ";:}
		|OPTIONREG_T0SE:opt0se{:RESULT = opt0se + " = ";:}
		|OPTIONREG_PSA:oppsa{:RESULT = oppsa + " = ";:}
		|OPTIONREG_PS2:opps2{:RESULT = opps2 + " = ";:}
		|OPTIONREG_PS1:opps1{:RESULT = opps1 + " = ";:}
		|OPTIONREG_PS0:opps0{:RESULT = opps0 + " = ";:}
		|OPTIONREG_RBPU:oprbpu{:RESULT = oprbpu + " = ";:}
		//
		|ADCON0_ADCS1:adcs1{:RESULT = adcs1 + " = ";:}
		|ADCON0_ADCS0:adcs0{:RESULT = adcs0 + " = ";:}
		|ADCON0_CHS3:adcs3{:RESULT = adcs3 + " = ";:}
		|ADCON0_CHS2:adcs2{:RESULT = adcs2 + " = ";:}
		|ADCON0_CHS1:adcs1{:RESULT = adcs1 + " = ";:}
		|ADCON0_CHS0:adcs0{:RESULT = adcs0 + " = ";:}
		|ADCON0_GO:adcgo{:RESULT = adcgo + " = ";:}
		|ADCON0_ADON:adcadon{:RESULT = adcadon+ " = ";:}
		//
		|ADCON1_ADFM:adc1fm {:RESULT = adc1fm + "=";:}
		|ADCON1_VCFG1:adcg1 {:RESULT = adcg1 + "=";:}
		|ADCON1_VCFG0:adcg0 {:RESULT = adcg0 + "=";:}
	    ;


puertost::= PA:pa {: RESULT=pa+""; :}
	    |PB:pb {: RESULT=pb+""; :}
	    |PC:pc {: RESULT=pc+"";:}
	    |PD:pd {: RESULT=pd+""; :}
	    |PE:pe {:RESULT=pe+"";:}
	    |PA0:pa0 {:	RESULT=pa0+""; :}
	    |PA1:pa1 {:	RESULT=pa1+""; :}
	    |PA2:pa2 {:	RESULT=pa2+""; :}
	    |PA3:pa3 {:	RESULT=pa3+""; :}
	    |PA4:pa4 {: RESULT=pa4+""; :}
	    |PA5:pa5 {:	RESULT=pa5+""; :}
	    |PA6:pa6 {:	RESULT=pa6+"";  :}
	    |PA7:pa7 {: RESULT=pa7+"";  :}
	    |PB0:pb0 {:	RESULT=pb0+"";  :}
	    |PB1:pb1 {:	RESULT=pb1+"";   :}
	    |PB2:pb2 {:	RESULT=pb2+"";   :}
	    |PB3:pb3 {:	RESULT=pb3+"";   :}
	    |PB4:pb4 {:	RESULT=pb4+"";  :}
	    |PB5:pb5 {:	RESULT=pb5+"";  :}
	    |PB6:pb6 {:	RESULT=pb6+"";  :}
	    |PB7:pb7 {:	RESULT=pb7+"";  :}
	    |PC0:pc0 {:	RESULT=pc0+"";    :}
	    |PC1:pc1 {: RESULT=pc1+"";  :}
	    |PC2:pc2 {:	RESULT=pc2+"";    :}
	    |PC3:pc3 {: RESULT=pc3+"";  :}
        |PC4:pc4 {:	RESULT=pc4+"";  :}
        |PC5:pc5 {:	RESULT=pc5+"";   :}
	    |PC6:pc6 {:	RESULT=pc6+"";   :}
	    |PC7:pc7 {: RESULT=pc7+"";  :}
	    |PD0:pd0 {:	RESULT=pd0+"";  :}
	    |PD1:pd1 {:	RESULT=pd1+"";   :}
	    |PD2:pd2 {: RESULT=pd2+"";  :}
	    |PD3:pd3 {:	RESULT=pd3+"";  :}
	    |PD4:pd4 {:	RESULT=pd4+"";   :}
	    |PD5:pd5 {: RESULT=pd5+"";  :}
	    |PD6:pd6 {:	RESULT=pd6+"";   :}
	    |PD7:pd7 {: RESULT=pd7+"";   :}
	    |PE0:pe0 {:	RESULT=pe0+"";   :}
	    |PE1:pe1 {:	RESULT=pe1+"";     :}
	    |PE2:pe2 {:	RESULT=pe2+"";     :}
	    |PE3:pe3 {:	RESULT=pe3+"";     :}
	    |INTCONGIE:intgie{:RESULT=intgie +    "";:}
		|INTCONPEIE:intpeie{:RESULT=intpeie + "";:}
		|INTCONT0IE:intt0ie{:RESULT=intt0ie + "";:}
		|INTCONINTE:intinte{:RESULT=intinte + "";:}
		|INTCONRBIE:intrbie{:RESULT=intrbie + "";:}
		|INTCONT0IF:intt0if{:RESULT=intt0if + "";:}
		|INTCONINTF:intintf{:RESULT=intintf + "";:}
		|INTCONRBIF:intrbif{:RESULT=intrbif + "";:}
	    ;
