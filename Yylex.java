/* The following code was generated by JFlex 1.4.1 on 17/02/15 19:37 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 17/02/15 19:37 from the specification file
 * <tt>C:/maPIC 1.0/mapic.flex</tt>
 */
import java_cup.runtime.*;
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\64\1\64\2\0\1\64\22\0\1\64\7\0\1\51\1\52"+
    "\1\0\1\56\1\0\1\57\2\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\2\1\0\1\55\1\61\1\62\1\60\2\0"+
    "\1\21\1\22\1\23\1\24\1\25\1\16\2\1\1\41\2\1\1\40"+
    "\1\7\1\36\1\1\1\20\1\1\1\37\1\10\1\3\1\1\1\47"+
    "\4\1\4\0\1\1\1\0\1\11\1\1\1\45\1\43\1\6\1\1"+
    "\1\50\1\1\1\4\2\1\1\46\1\5\1\12\1\44\1\15\1\1"+
    "\1\42\1\17\1\13\1\14\5\1\1\53\1\0\1\54\u05e2\0\12\63"+
    "\206\0\12\63\306\0\12\63\u019c\0\12\63\166\0\12\63\166\0\12\63"+
    "\166\0\12\63\166\0\12\63\166\0\12\63\166\0\12\63\166\0\12\63"+
    "\166\0\12\63\340\0\12\63\166\0\12\63\106\0\12\63\u0116\0\12\63"+
    "\106\0\12\63\u0746\0\12\63\46\0\12\63\u012c\0\12\63\200\0\12\63"+
    "\246\0\12\63\6\0\12\63\266\0\12\63\126\0\12\63\206\0\12\63"+
    "\6\0\12\63\u89c6\0\12\63\u02a6\0\12\63\46\0\12\63\306\0\12\63"+
    "\166\0\12\63\u0196\0\12\63\u5316\0\12\63\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\11\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\2\1\17\1\20\1\21\1\22\1\23\5\2\1\24"+
    "\1\25\1\26\1\27\1\30\4\2\1\31\1\2\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\5\2\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141"+
    "\6\2\1\142\6\2\1\143\2\2\1\144\1\2\1\145"+
    "\1\146\2\2\1\147\1\150\1\151\2\2\1\152\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\65\0\u073f\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\152\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4"+
    "\0\152\0\u0af9\0\u0b2e\0\152\0\u0b63\0\152\0\152\0\u0b98"+
    "\0\u0bcd\0\152\0\152\0\152\0\u0c02\0\u0c37\0\152\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\3\3\1\6\1\7\5\3"+
    "\1\10\1\3\1\11\2\3\1\12\1\3\1\13\10\4"+
    "\1\3\1\14\7\3\1\15\1\3\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\4"+
    "\1\30\66\0\50\3\16\0\1\4\23\0\10\4\25\0"+
    "\1\4\2\0\3\3\1\31\14\3\1\32\1\33\1\34"+
    "\1\35\1\36\16\3\1\37\4\3\15\0\10\3\1\40"+
    "\37\3\15\0\5\3\1\41\12\3\1\42\27\3\15\0"+
    "\13\3\1\43\34\3\15\0\20\3\1\44\1\45\1\46"+
    "\1\47\1\50\23\3\15\0\3\3\1\51\44\3\15\0"+
    "\35\3\1\52\12\3\15\0\5\3\1\53\42\3\15\0"+
    "\43\3\1\54\4\3\76\0\1\55\66\0\1\30\1\0"+
    "\4\3\1\56\43\3\15\0\25\3\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\13\3\15\0\25\3"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\13\3\15\0\25\3\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\13\3\15\0\25\3\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\13\3\15\0"+
    "\25\3\1\117\1\120\1\121\1\122\17\3\15\0\47\3"+
    "\1\123\15\0\3\3\1\124\44\3\15\0\12\3\1\125"+
    "\35\3\15\0\37\3\1\126\10\3\15\0\16\3\1\127"+
    "\31\3\15\0\25\3\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\136\1\137\13\3\15\0\25\3\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\13\3\15\0"+
    "\25\3\1\150\1\151\1\152\1\153\1\154\1\155\1\156"+
    "\1\157\13\3\15\0\25\3\1\160\1\161\1\162\1\163"+
    "\1\164\1\165\1\166\1\167\13\3\15\0\25\3\1\170"+
    "\1\171\1\172\1\173\17\3\15\0\44\3\1\174\3\3"+
    "\15\0\2\3\1\175\45\3\15\0\12\3\1\176\35\3"+
    "\15\0\3\3\1\177\44\3\15\0\5\3\1\200\42\3"+
    "\15\0\47\3\1\201\15\0\11\3\1\202\36\3\15\0"+
    "\13\3\1\203\34\3\15\0\40\3\1\204\7\3\15\0"+
    "\5\3\1\205\42\3\15\0\45\3\1\206\2\3\15\0"+
    "\36\3\1\207\11\3\15\0\10\3\1\210\37\3\15\0"+
    "\42\3\1\211\5\3\15\0\6\3\1\212\41\3\15\0"+
    "\45\3\1\213\2\3\15\0\14\3\1\214\33\3\15\0"+
    "\23\3\1\215\24\3\15\0\16\3\1\216\31\3\15\0"+
    "\43\3\1\217\4\3\15\0\20\3\1\220\27\3\15\0"+
    "\41\3\1\221\6\3\15\0\7\3\1\222\40\3\15\0"+
    "\5\3\1\223\42\3\15\0\20\3\1\224\27\3\15\0"+
    "\23\3\1\225\24\3\15\0\42\3\1\226\5\3\15\0"+
    "\20\3\1\227\27\3\15\0\43\3\1\230\4\3\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3180];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\11\11\26\1\1\11\153\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
     private Symbol symbol(int type){
	  return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value){
	  return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC3"));
          }
        case 108: break;
        case 83: 
          { return symbol(sym.PC5,new String("\tPORTCbits.RC5"));
          }
        case 109: break;
        case 34: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB0"));
          }
        case 110: break;
        case 62: 
          { return symbol(sym.PA0,new String("\tPORTAbits.RA0"));
          }
        case 111: break;
        case 97: 
          { return symbol(sym.PE3,new String("\tPORTEbits.RE3"));
          }
        case 112: break;
        case 52: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD2"));
          }
        case 113: break;
        case 26: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA0"));
          }
        case 114: break;
        case 90: 
          { return symbol(sym.PD4,new String("\tPORTDbits.RD4"));
          }
        case 115: break;
        case 39: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB5"));
          }
        case 116: break;
        case 4: 
          { return symbol(sym.LPAREN);
          }
        case 117: break;
        case 74: 
          { return symbol(sym.PB4,new String("\tPORTBbits.RB4"));
          }
        case 118: break;
        case 57: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD7"));
          }
        case 119: break;
        case 2: 
          { return symbol(sym.ID, new String(yytext()));
          }
        case 120: break;
        case 31: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA5"));
          }
        case 121: break;
        case 1: 
          { System.out.println("Error léxico."+yytext());
          }
        case 122: break;
        case 67: 
          { return symbol(sym.PA5,new String("\tPORTAbits.RA5"));
          }
        case 123: break;
        case 21: 
          { return symbol(sym.PB,new String("\tPORTB"));
          }
        case 124: break;
        case 81: 
          { return symbol(sym.PC3,new String("\tPORTCbits.RC3"));
          }
        case 125: break;
        case 58: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE0"));
          }
        case 126: break;
        case 23: 
          { return symbol(sym.PD,new String("\tPORTD"));
          }
        case 127: break;
        case 9: 
          { return symbol(sym.MAS);
          }
        case 128: break;
        case 44: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC2"));
          }
        case 129: break;
        case 99: 
          { return symbol(sym.VOID,new String("\n\tvoid  "));
          }
        case 130: break;
        case 95: 
          { return symbol(sym.PE1,new String("\tPORTEbits.RE1"));
          }
        case 131: break;
        case 3: 
          { return symbol(sym.NUMERO, new Integer(yytext()));
          }
        case 132: break;
        case 51: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD1"));
          }
        case 133: break;
        case 49: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC7"));
          }
        case 134: break;
        case 88: 
          { return symbol(sym.PD2,new String("\tPORTDbits.RD2"));
          }
        case 135: break;
        case 72: 
          { return symbol(sym.PB2,new String("\tPORTBbits.RB2"));
          }
        case 136: break;
        case 38: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB4"));
          }
        case 137: break;
        case 7: 
          { return symbol(sym.RLLAVE);
          }
        case 138: break;
        case 65: 
          { return symbol(sym.PA3,new String("\tPORTAbits.RA3"));
          }
        case 139: break;
        case 56: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD6"));
          }
        case 140: break;
        case 30: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA4"));
          }
        case 141: break;
        case 102: 
          { return symbol(sym.CICLO,new String("\n\n\tvoid loop()"));
          }
        case 142: break;
        case 79: 
          { return symbol(sym.PC1,new String("\tPORTCbits.RC1"));
          }
        case 143: break;
        case 16: 
          { return symbol(sym.TB,new String("\tTRISB"));
          }
        case 144: break;
        case 93: 
          { return symbol(sym.PD7,new String("\tPORTDbits.RD7"));
          }
        case 145: break;
        case 77: 
          { return symbol(sym.PB7,new String("\tPORTBbits.RB7"));
          }
        case 146: break;
        case 18: 
          { return symbol(sym.TD,new String("\tTRISD"));
          }
        case 147: break;
        case 104: 
          { return symbol(sym.TOGGLE,new String("!"));
          }
        case 148: break;
        case 10: 
          { return symbol(sym.MENOS);
          }
        case 149: break;
        case 43: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC1"));
          }
        case 150: break;
        case 12: 
          { return symbol(sym.MENOR);
          }
        case 151: break;
        case 86: 
          { return symbol(sym.PD0,new String("\tPORTDbits.RD0"));
          }
        case 152: break;
        case 70: 
          { return symbol(sym.PB0,new String("\tPORTBbits.RB0"));
          }
        case 153: break;
        case 84: 
          { return symbol(sym.PC6,new String("\tPORTCbits.RC6"));
          }
        case 154: break;
        case 50: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD0"));
          }
        case 155: break;
        case 48: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC6"));
          }
        case 156: break;
        case 63: 
          { return symbol(sym.PA1,new String("\tPORTAbits.RA1"));
          }
        case 157: break;
        case 37: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB3"));
          }
        case 158: break;
        case 55: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD5"));
          }
        case 159: break;
        case 6: 
          { return symbol(sym.LLLAVE);
          }
        case 160: break;
        case 29: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA3"));
          }
        case 161: break;
        case 91: 
          { return symbol(sym.PD5,new String("\tPORTDbits.RD5"));
          }
        case 162: break;
        case 75: 
          { return symbol(sym.PB5,new String("\tPORTBbits.RB5"));
          }
        case 163: break;
        case 68: 
          { return symbol(sym.PA6,new String("\tPORTAbits.RA6"));
          }
        case 164: break;
        case 42: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC0"));
          }
        case 165: break;
        case 101: 
          { return symbol(sym.FUSES,new String("#include <xc.h>\n"
								                + "// CONFIG1\n" 
								                +"#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)\n" 
								                +"#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)\n"
								                +"#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)\n"
								                +"#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)\n" 
								                +"#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)\n"
								                +"#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)\n"
								                +"#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)\n" 
								                +"#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)\n"
								                +"#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)\n" 
								                +"#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)\n" 
								                +"\n" +"\n" +"\n" 
								                +"// CONFIG2\n"
								                +"\n"
								                +"#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)\n"
								                +"\n"
								                +"#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)\n\n\n\n"));
          }
        case 166: break;
        case 107: 
          { return symbol(sym.RETARDO,new String("\n\n\tvoid retardo(unsigned int i){for(;i>0;i--);}\n\n"));
          }
        case 167: break;
        case 82: 
          { return symbol(sym.PC4,new String("\tPORTCbits.RC4"));
          }
        case 168: break;
        case 61: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE3"));
          }
        case 169: break;
        case 47: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC5"));
          }
        case 170: break;
        case 96: 
          { return symbol(sym.PE2,new String("\tPORTEbits.RE2"));
          }
        case 171: break;
        case 20: 
          { return symbol(sym.PA,new String("\tPORTA"));
          }
        case 172: break;
        case 36: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB2"));
          }
        case 173: break;
        case 22: 
          { return symbol(sym.PC,new String("\tPORTC"));
          }
        case 174: break;
        case 89: 
          { return symbol(sym.PD3,new String("\tPORTDbits.RD3"));
          }
        case 175: break;
        case 73: 
          { return symbol(sym.PB3,new String("\tPORTBbits.RB3"));
          }
        case 176: break;
        case 54: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD4"));
          }
        case 177: break;
        case 106: 
          { return symbol(sym.ENTRADA);
          }
        case 178: break;
        case 14: 
          { ;
          }
        case 179: break;
        case 25: 
          { return symbol(sym.IGUAL2);
          }
        case 180: break;
        case 24: 
          { return symbol(sym.PE,new String("\tPORTE"));
          }
        case 181: break;
        case 28: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA2"));
          }
        case 182: break;
        case 11: 
          { return symbol(sym.MAYOR);
          }
        case 183: break;
        case 66: 
          { return symbol(sym.PA4,new String("\tPORTAbits.RA4"));
          }
        case 184: break;
        case 41: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB7"));
          }
        case 185: break;
        case 100: 
          { return symbol(sym.SETUP,new String("\tvoid setup()"));
          }
        case 186: break;
        case 98: 
          { return symbol(sym.MAIN,new String("\n\n\tvoid main(void)"));
          }
        case 187: break;
        case 33: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA7"));
          }
        case 188: break;
        case 80: 
          { return symbol(sym.PC2,new String("\tPORTCbits.RC2"));
          }
        case 189: break;
        case 8: 
          { return symbol(sym.PCOMA);
          }
        case 190: break;
        case 94: 
          { return symbol(sym.PE0,new String("\tPORTEbits.RE0"));
          }
        case 191: break;
        case 60: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE2"));
          }
        case 192: break;
        case 46: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC4"));
          }
        case 193: break;
        case 15: 
          { return symbol(sym.TA,new String("\tTRISA"));
          }
        case 194: break;
        case 87: 
          { return symbol(sym.PD1,new String("\tPORTDbits.RD1"));
          }
        case 195: break;
        case 71: 
          { return symbol(sym.PB1,new String("\tPORTBbits.RB1"));
          }
        case 196: break;
        case 35: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB1"));
          }
        case 197: break;
        case 85: 
          { return symbol(sym.PC7,new String("\tPORTCbits.RC7"));
          }
        case 198: break;
        case 17: 
          { return symbol(sym.TC,new String("\tTRISC"));
          }
        case 199: break;
        case 13: 
          { return symbol(sym.IGUAL);
          }
        case 200: break;
        case 53: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD3"));
          }
        case 201: break;
        case 64: 
          { return symbol(sym.PA2,new String("\tPORTAbits.RA2"));
          }
        case 202: break;
        case 19: 
          { return symbol(sym.TE,new String("\tTRISE"));
          }
        case 203: break;
        case 5: 
          { return symbol(sym.RPAREN);
          }
        case 204: break;
        case 27: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA1"));
          }
        case 205: break;
        case 105: 
          { return symbol(sym.SALIDA);
          }
        case 206: break;
        case 40: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB6"));
          }
        case 207: break;
        case 78: 
          { return symbol(sym.PC0,new String("\tPORTCbits.RC0"));
          }
        case 208: break;
        case 92: 
          { return symbol(sym.PD6,new String("\tPORTDbits.RD6"));
          }
        case 209: break;
        case 76: 
          { return symbol(sym.PB6,new String("\tPORTBbits.RB6"));
          }
        case 210: break;
        case 32: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA6"));
          }
        case 211: break;
        case 69: 
          { return symbol(sym.PA7,new String("\tPORTAbits.RA7"));
          }
        case 212: break;
        case 103: 
          { return symbol(sym.CHALE,new String("\t\tretardo"));
          }
        case 213: break;
        case 59: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE1"));
          }
        case 214: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
