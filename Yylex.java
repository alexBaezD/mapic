/* The following code was generated by JFlex 1.4.1 on 8/07/15 12:53 AM */
import java_cup.runtime.*;
/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/07/15 12:53 AM from the specification file
 * <tt>/Users/moises/Desktop/mapic/mapic.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\64\2\0\1\65\22\0\1\65\1\60\5\0\1\63"+
    "\1\45\1\46\1\2\1\53\1\51\1\54\1\62\1\1\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\4\1\44\1\52\1\56"+
    "\1\57\1\55\2\0\1\12\1\17\1\20\1\21\1\10\1\16\1\35"+
    "\1\23\1\6\2\3\1\22\1\7\1\13\1\24\1\15\1\3\1\36"+
    "\1\11\1\5\1\14\1\40\1\41\3\3\1\42\1\0\1\43\1\0"+
    "\1\37\1\0\1\12\1\17\1\20\1\21\1\10\1\16\1\35\1\23"+
    "\1\6\2\3\1\22\1\7\1\13\1\24\1\15\1\3\1\36\1\11"+
    "\1\5\1\14\1\40\1\41\3\3\1\47\1\0\1\50\u05e2\0\12\61"+
    "\206\0\12\61\306\0\12\61\u019c\0\12\61\166\0\12\61\166\0\12\61"+
    "\166\0\12\61\166\0\12\61\166\0\12\61\166\0\12\61\166\0\12\61"+
    "\166\0\12\61\340\0\12\61\166\0\12\61\106\0\12\61\u0116\0\12\61"+
    "\106\0\12\61\u0746\0\12\61\46\0\12\61\u012c\0\12\61\200\0\12\61"+
    "\246\0\12\61\6\0\12\61\266\0\12\61\126\0\12\61\206\0\12\61"+
    "\6\0\12\61\u89c6\0\12\61\u02a6\0\12\61\46\0\12\61\306\0\12\61"+
    "\166\0\12\61\u0196\0\12\61\u5316\0\12\61\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\20\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\22\2\0\1\2\1\23"+
    "\1\24\1\25\1\26\1\27\6\2\1\30\5\2\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\12\2\1\37\1\2"+
    "\1\40\1\41\4\2\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\2\0\1\50\1\2\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\3\2\1\115\6\2\1\116\1\2\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151"+
    "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
    "\1\162\1\163\13\2\1\164\2\2\1\165\1\22\1\2"+
    "\1\166\1\2\1\167\1\2\1\170\12\2\1\171\1\172"+
    "\4\2\1\173\5\2\1\174\2\2\1\175\1\2\1\176"+
    "\1\177\1\2\1\200\4\2\1\201\1\202\1\203\1\204"+
    "\1\2\1\205\1\206\1\207\1\210\1\211\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\6\2\1\220\5\2\1\221"+
    "\1\222\1\223\1\224\1\225\1\226\1\227\2\2\1\230"+
    "\1\231\1\2\1\232\16\2\1\233\3\2\1\234\3\2"+
    "\1\235\1\236\1\237\1\240\1\241\1\242\1\243\7\2"+
    "\1\244\1\245\1\246\1\247\1\250\1\251\5\2\1\252"+
    "\1\253\1\254\1\255\2\2\1\256\4\2\1\257\1\260"+
    "\1\261\1\262\1\2\1\263\1\264\1\2\1\265\1\2"+
    "\1\266";

  private static int [] zzUnpackAction() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\242\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\242\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\242\0\u0cde\0\242\0\242\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\u0dec\0\u0e22\0\u05e8\0\u0e58\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\242\0\u10aa\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\242\0\u1332\0\u1368\0\66"+
    "\0\66\0\u139e\0\242\0\u13d4\0\242\0\u140a\0\242\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\242\0\242\0\u165c\0\u1692\0\u16c8\0\u16fe\0\242"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\242\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\242\0\242\0\u191a\0\242\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\242\0\242\0\242\0\u1a28\0\u1a5e\0\242"+
    "\0\242\0\u1a94\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\242\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\u1d1c\0\u1d52\0\242"+
    "\0\242\0\u1d88\0\242\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\242\0\u20b2\0\u20e8\0\u211e\0\242\0\u2154\0\u218a"+
    "\0\u21c0\0\242\0\242\0\242\0\242\0\242\0\242\0\242"+
    "\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\242"+
    "\0\242\0\242\0\242\0\242\0\242\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\242\0\242\0\242\0\242\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\242\0\242\0\242"+
    "\0\242\0\u25f8\0\242\0\242\0\u262e\0\242\0\u2664\0\242";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\4\1\15\1\16\1\17"+
    "\1\20\1\21\2\4\1\22\10\5\1\4\1\23\1\4"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\5\1\2\1\45\2\46\70\0\1\47\66\0"+
    "\37\4\30\0\1\5\20\0\10\5\24\0\1\5\1\50"+
    "\6\0\3\4\1\51\1\4\1\52\1\4\1\53\4\4"+
    "\1\54\1\55\1\56\1\4\1\57\1\60\11\4\1\61"+
    "\3\4\27\0\10\4\1\62\26\4\27\0\7\4\1\63"+
    "\27\4\27\0\10\4\1\64\26\4\27\0\3\4\1\65"+
    "\1\4\1\66\1\4\1\67\26\4\1\70\27\0\10\4"+
    "\1\71\5\4\1\72\20\4\27\0\21\4\1\73\15\4"+
    "\27\0\5\4\1\74\1\4\1\75\4\4\1\76\1\77"+
    "\1\100\20\4\27\0\3\4\1\101\3\4\1\102\1\4"+
    "\1\103\5\4\1\104\17\4\27\0\21\4\1\105\15\4"+
    "\27\0\3\4\1\106\3\4\1\107\10\4\1\110\1\111"+
    "\15\4\27\0\5\4\1\112\13\4\1\113\15\4\27\0"+
    "\12\4\1\114\1\115\17\4\1\116\3\4\27\0\5\4"+
    "\1\117\31\4\27\0\7\4\1\120\11\4\1\121\15\4"+
    "\27\0\20\4\1\122\16\4\101\0\1\123\1\0\1\124"+
    "\64\0\1\125\1\126\65\0\1\127\65\0\1\130\6\0"+
    "\64\131\1\0\1\131\64\0\2\46\2\47\1\132\63\47"+
    "\4\0\1\133\20\0\10\133\24\0\1\133\7\0\4\4"+
    "\1\134\32\4\27\0\22\4\1\135\1\136\1\137\1\140"+
    "\11\4\27\0\22\4\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\5\4\27\0\22\4\1\151\1\152"+
    "\1\153\1\154\1\155\1\156\1\157\1\160\5\4\27\0"+
    "\22\4\1\161\1\162\1\163\1\164\1\165\1\166\1\167"+
    "\1\170\5\4\27\0\22\4\1\171\1\172\1\173\1\174"+
    "\1\175\1\176\1\177\1\200\5\4\27\0\5\4\1\201"+
    "\31\4\27\0\32\4\1\202\4\4\27\0\11\4\1\203"+
    "\25\4\27\0\2\4\1\204\34\4\27\0\3\4\1\205"+
    "\33\4\27\0\2\4\1\206\34\4\27\0\2\4\1\207"+
    "\34\4\27\0\17\4\1\210\17\4\27\0\3\4\1\211"+
    "\33\4\27\0\6\4\1\212\7\4\1\213\20\4\27\0"+
    "\15\4\1\214\21\4\27\0\22\4\1\215\1\216\1\217"+
    "\1\220\11\4\27\0\22\4\1\221\1\222\1\223\1\224"+
    "\1\225\1\226\1\227\1\230\5\4\27\0\22\4\1\231"+
    "\1\232\1\233\1\234\1\235\1\236\1\237\1\240\5\4"+
    "\27\0\22\4\1\241\1\242\1\243\1\244\1\245\1\246"+
    "\1\247\1\250\5\4\27\0\22\4\1\251\1\252\1\253"+
    "\1\254\1\255\1\256\1\257\1\260\5\4\27\0\10\4"+
    "\1\261\26\4\27\0\17\4\1\262\17\4\27\0\6\4"+
    "\1\263\30\4\27\0\21\4\1\264\15\4\27\0\21\4"+
    "\1\265\15\4\27\0\15\4\1\266\21\4\27\0\6\4"+
    "\1\267\30\4\27\0\7\4\1\270\27\4\27\0\10\4"+
    "\1\271\26\4\27\0\13\4\1\272\23\4\27\0\2\4"+
    "\1\273\34\4\27\0\2\4\1\274\34\4\27\0\33\4"+
    "\1\275\3\4\27\0\3\4\1\276\33\4\27\0\3\4"+
    "\1\277\33\4\107\0\1\300\2\0\1\47\1\301\1\132"+
    "\63\47\3\0\5\4\1\302\31\4\27\0\10\4\1\303"+
    "\26\4\27\0\32\4\1\304\4\4\27\0\5\4\1\305"+
    "\31\4\27\0\15\4\1\306\21\4\27\0\10\4\1\307"+
    "\26\4\27\0\33\4\1\310\3\4\27\0\11\4\1\311"+
    "\25\4\27\0\3\4\1\312\33\4\27\0\2\4\1\313"+
    "\34\4\27\0\5\4\1\314\31\4\27\0\21\4\1\315"+
    "\15\4\27\0\6\4\1\203\30\4\27\0\5\4\1\316"+
    "\31\4\27\0\7\4\1\317\27\4\27\0\17\4\1\320"+
    "\17\4\27\0\17\4\1\321\17\4\27\0\21\4\1\322"+
    "\15\4\27\0\33\4\1\323\3\4\27\0\6\4\1\275"+
    "\30\4\27\0\7\4\1\324\27\4\27\0\3\4\1\325"+
    "\33\4\27\0\7\4\1\326\1\4\1\327\25\4\27\0"+
    "\16\4\1\330\20\4\27\0\17\4\1\331\17\4\27\0"+
    "\4\4\1\332\32\4\27\0\17\4\1\333\17\4\27\0"+
    "\21\4\1\334\15\4\27\0\7\4\1\335\27\4\27\0"+
    "\12\4\1\336\24\4\27\0\16\4\1\337\20\4\27\0"+
    "\15\4\1\340\21\4\27\0\17\4\1\341\17\4\27\0"+
    "\10\4\1\342\26\4\27\0\6\4\1\343\30\4\27\0"+
    "\2\4\1\344\34\4\27\0\5\4\1\345\31\4\27\0"+
    "\21\4\1\346\15\4\27\0\11\4\1\347\25\4\27\0"+
    "\21\4\1\350\15\4\27\0\33\4\1\351\3\4\27\0"+
    "\33\4\1\352\3\4\27\0\5\4\1\353\31\4\27\0"+
    "\6\4\1\354\30\4\27\0\5\4\1\355\31\4\27\0"+
    "\10\4\1\356\26\4\27\0\16\4\1\357\20\4\27\0"+
    "\7\4\1\360\27\4\27\0\20\4\1\361\16\4\27\0"+
    "\20\4\1\362\1\4\1\363\1\364\1\365\1\366\1\367"+
    "\1\370\1\371\1\372\5\4\27\0\22\4\1\373\1\374"+
    "\13\4\27\0\7\4\1\375\27\4\27\0\17\4\1\376"+
    "\17\4\27\0\10\4\1\377\26\4\27\0\16\4\1\u0100"+
    "\20\4\27\0\10\4\1\u0101\26\4\27\0\2\4\1\u0102"+
    "\1\u0103\6\4\1\u0104\17\4\1\u0105\1\u0106\3\4\27\0"+
    "\7\4\1\u0107\27\4\27\0\22\4\1\u0108\1\u0109\1\u010a"+
    "\1\u010b\1\u010c\1\u010d\7\4\27\0\34\4\1\u010e\2\4"+
    "\27\0\34\4\1\u010f\2\4\27\0\10\4\1\u0110\26\4"+
    "\27\0\2\4\1\u0111\34\4\27\0\33\4\1\u0112\3\4"+
    "\27\0\21\4\1\u0113\15\4\27\0\22\4\1\u0114\14\4"+
    "\27\0\10\4\1\u0115\26\4\27\0\5\4\1\u0116\31\4"+
    "\27\0\3\4\1\u0117\33\4\27\0\14\4\1\u0118\22\4"+
    "\27\0\7\4\1\u0119\5\4\1\u011a\14\4\1\u011b\4\4"+
    "\27\0\7\4\1\u011c\25\4\1\u011d\1\4\27\0\5\4"+
    "\1\u011e\31\4\27\0\3\4\1\u011f\33\4\27\0\2\4"+
    "\1\u0120\34\4\27\0\3\4\1\u0121\33\4\27\0\5\4"+
    "\1\u0122\31\4\27\0\3\4\1\u0123\33\4\27\0\16\4"+
    "\1\u0124\20\4\27\0\20\4\1\u0125\16\4\27\0\21\4"+
    "\1\u0126\15\4\27\0\16\4\1\u0127\20\4\27\0\15\4"+
    "\1\u0128\21\4\27\0\32\4\1\u0129\4\4\27\0\5\4"+
    "\1\u012a\5\4\1\u012b\23\4\27\0\5\4\1\u012c\5\4"+
    "\1\u012d\23\4\27\0\5\4\1\u012e\31\4\27\0\5\4"+
    "\1\u012f\5\4\1\u0130\23\4\27\0\15\4\1\u0131\3\4"+
    "\1\u0132\15\4\27\0\6\4\1\u0133\30\4\27\0\13\4"+
    "\1\u0134\23\4\27\0\13\4\1\u0135\23\4\27\0\34\4"+
    "\1\u0136\2\4\27\0\6\4\1\u0137\30\4\27\0\10\4"+
    "\1\u0138\26\4\27\0\22\4\1\u0139\1\u013a\1\u013b\1\u013c"+
    "\11\4\27\0\4\4\1\u013d\32\4\27\0\32\4\1\u013e"+
    "\4\4\27\0\2\4\1\u013f\1\u0140\6\4\1\u0141\20\4"+
    "\1\u0142\3\4\27\0\22\4\1\u0143\1\u0144\13\4\27\0"+
    "\22\4\1\u0145\1\u0146\13\4\27\0\22\4\1\u0147\14\4"+
    "\27\0\10\4\1\u0148\26\4\27\0\6\4\1\u0149\30\4"+
    "\27\0\14\4\1\u014a\22\4\27\0\6\4\1\u014b\6\4"+
    "\1\u014c\21\4\27\0\2\4\1\u014d\34\4\27\0\7\4"+
    "\1\u014e\12\4\1\u014f\1\u0150\1\u0151\12\4\27\0\12\4"+
    "\1\u0152\24\4\27\0\5\4\1\u0153\31\4\27\0\6\4"+
    "\1\u0154\30\4\27\0\5\4\1\u0155\31\4\27\0\11\4"+
    "\1\u0156\25\4\27\0\16\4\1\u0157\20\4\27\0\32\4"+
    "\1\u0158\4\4\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9882];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\13\11\6\1\2\0\52\1\6\11"+
    "\2\0\145\1\2\11\227\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	int lineaActual=1;
	private static int actualEtq=0;
	
	public int linea(){ return yyline+1; }
	public int columna(){ return yycolumn+1; }
	
	private static String nuevaEtq(){
		return "etqL"+(++actualEtq);
	}

   	  private Symbol symbol(int type){
	  return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value){
	  return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 179: 
          { return symbol(sym.OPTIONREG_T0SE, new String("\tOPTION_REGbits.T0SE"));
          }
        case 183: break;
        case 35: 
          { return symbol(sym.MAYORIGUAL);
          }
        case 184: break;
        case 32: 
          { return symbol(sym.OF);
          }
        case 185: break;
        case 2: 
          { return symbol(sym.ID, new String(yytext()));
          }
        case 186: break;
        case 84: 
          { return symbol(sym.PA1,new String("\tPORTAbits.RA1"));
          }
        case 187: break;
        case 114: 
          { return symbol(sym.PD7,new String("\tPORTDbits.RD7"));
          }
        case 188: break;
        case 28: 
          { return symbol(sym.PB,new String("\tPORTB"));
          }
        case 189: break;
        case 178: 
          { return symbol(sym.OPTIONREG_PS2, new String("\tOPTION_REGbits.PS2"));
          }
        case 190: break;
        case 43: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE2"));
          }
        case 191: break;
        case 107: 
          { return symbol(sym.PD0,new String("\tPORTDbits.RD0"));
          }
        case 192: break;
        case 64: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC3"));
          }
        case 193: break;
        case 24: 
          { return symbol(sym.SI,nuevaEtq());
          }
        case 194: break;
        case 151: 
          { return symbol(sym.ANSELH5, new String("\tANSELbits.ANS13"));
          }
        case 195: break;
        case 8: 
          { return symbol(sym.RPAREN);
          }
        case 196: break;
        case 39: 
          { return symbol(sym.DIFERENTE);
          }
        case 197: break;
        case 175: 
          { return symbol(sym.OPTIONREG_PSA, new String("\tOPTION_REGbits.PSA"));
          }
        case 198: break;
        case 10: 
          { return symbol(sym.RLLAVE);
          }
        case 199: break;
        case 56: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB3"));
          }
        case 200: break;
        case 123: 
          { return symbol(sym.VOID,new String("\n\tvoid  "));
          }
        case 201: break;
        case 75: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD6"));
          }
        case 202: break;
        case 95: 
          { return symbol(sym.PB4,new String("\tPORTBbits.RB4"));
          }
        case 203: break;
        case 144: 
          { return  symbol(sym.RETURN);
          }
        case 204: break;
        case 11: 
          { return symbol(sym.COMA);
          }
        case 205: break;
        case 166: 
          { return symbol(sym.ADCON0_CHS1, new String("\tADCON0bits.CHS1"));
          }
        case 206: break;
        case 82: 
          { return symbol(sym.PE3,new String("\tPORTEbits.RE3"));
          }
        case 207: break;
        case 181: 
          { return symbol(sym.OPTIONREG_RBPU, new String("\tOPTION_REGbits.nRBPU"));
          }
        case 208: break;
        case 118: 
          { return symbol(sym.THEN);
          }
        case 209: break;
        case 115: 
          { return symbol(sym.FIN);
          }
        case 210: break;
        case 27: 
          { return symbol(sym.PA,new String("\tPORTA"));
          }
        case 211: break;
        case 170: 
          { return symbol(sym.ADCON0_ADCS0, new String("\tADCON0bits.ADCS0"));
          }
        case 212: break;
        case 105: 
          { return symbol(sym.PC6,new String("\tPORTCbits.RC6"));
          }
        case 213: break;
        case 49: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA4"));
          }
        case 214: break;
        case 19: 
          { return symbol(sym.TE,new String("\tTRISE"));
          }
        case 215: break;
        case 140: 
          { return symbol(sym.ANSEL4, new String("\tANSELbits.ANS4"));
          }
        case 216: break;
        case 85: 
          { return symbol(sym.PA2,new String("\tPORTAbits.RA2"));
          }
        case 217: break;
        case 77: 
          { return symbol(sym.INTEGER);
          }
        case 218: break;
        case 15: 
          { return symbol(sym.MAYOR);
          }
        case 219: break;
        case 180: 
          { return symbol(sym.OPTIONREG_T0CS, new String("\tOPTION_REGbits.T0CS"));
          }
        case 220: break;
        case 108: 
          { return symbol(sym.PD1,new String("\tPORTDbits.RD1"));
          }
        case 221: break;
        case 150: 
          { return symbol(sym.ANSELH4, new String("\tANSELbits.ANS12"));
          }
        case 222: break;
        case 37: 
          { return symbol(sym.MENORIGUAL);
          }
        case 223: break;
        case 67: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC6"));
          }
        case 224: break;
        case 173: 
          { return symbol(sym.ADCON1_VCFG1, new String("\tADCON1bits.VCFG1"));
          }
        case 225: break;
        case 164: 
          { return symbol(sym.ADCON0_ADON, new String("\tADCON0bits.ADON"));
          }
        case 226: break;
        case 25: 
          { return symbol(sym.NO);
          }
        case 227: break;
        case 71: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD2"));
          }
        case 228: break;
        case 59: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB6"));
          }
        case 229: break;
        case 149: 
          { return symbol(sym.ANSELH3, new String("\tANSELbits.ANS11"));
          }
        case 230: break;
        case 96: 
          { return symbol(sym.PB5,new String("\tPORTBbits.RB5"));
          }
        case 231: break;
        case 23: 
          { return symbol(sym.TD,new String("\tTRISD"));
          }
        case 232: break;
        case 165: 
          { return symbol(sym.ADCON0_CHS0, new String("\tADCON0bits.CHS0"));
          }
        case 233: break;
        case 7: 
          { return symbol(sym.LPAREN);
          }
        case 234: break;
        case 45: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA0"));
          }
        case 235: break;
        case 106: 
          { return symbol(sym.PC7,new String("\tPORTCbits.RC7"));
          }
        case 236: break;
        case 99: 
          { return symbol(sym.PC0,new String("\tPORTCbits.RC0"));
          }
        case 237: break;
        case 38: 
          { return symbol(sym.IGUAL2);
          }
        case 238: break;
        case 9: 
          { return symbol(sym.LLLAVE);
          }
        case 239: break;
        case 52: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA7"));
          }
        case 240: break;
        case 145: 
          { return symbol(sym.ENTRADA);
          }
        case 241: break;
        case 36: 
          { return symbol(sym.RECBITSIZQ);
          }
        case 242: break;
        case 86: 
          { return symbol(sym.PA3,new String("\tPORTAbits.RA3"));
          }
        case 243: break;
        case 16: 
          { return symbol(sym.MENOR);
          }
        case 244: break;
        case 134: 
          { return symbol(sym.SWITCH);
          }
        case 245: break;
        case 142: 
          { return symbol(sym.ANSEL6, new String("\tANSELbits.ANS6"));
          }
        case 246: break;
        case 156: 
          { return symbol(sym.ADCON0_GO, new String("\tADCON0bits.GO"));
          }
        case 247: break;
        case 42: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE1"));
          }
        case 248: break;
        case 109: 
          { return symbol(sym.PD2,new String("\tPORTDbits.RD2"));
          }
        case 249: break;
        case 63: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC2"));
          }
        case 250: break;
        case 125: 
          { return symbol(sym.ANSEL,new String("\tANSEL"));
          }
        case 251: break;
        case 137: 
          { return symbol(sym.ANSEL1, new String("\tANSELbits.ANS1"));
          }
        case 252: break;
        case 124: 
          { return symbol(sym.SETUP,new String("\tvoid setup()"));
          }
        case 253: break;
        case 22: 
          { return symbol(sym.TC,new String("\tTRISC"));
          }
        case 254: break;
        case 135: 
          { return symbol(sym.ANSELH,new String("\tANSELH"));
          }
        case 255: break;
        case 55: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB2"));
          }
        case 256: break;
        case 154: 
          { return symbol(sym.RETARDO,new String("\n\n\tvoid retardo(unsigned int i){for(;i>0;i--);}\n\n"));
          }
        case 257: break;
        case 148: 
          { return symbol(sym.ANSELH2, new String("\tANSELbits.ANS10"));
          }
        case 258: break;
        case 74: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD5"));
          }
        case 259: break;
        case 182: 
          { return symbol(sym.OPTIONREG_INTEDG, new String("\tOPTION_REGbits.INTEDG"));
          }
        case 260: break;
        case 97: 
          { return symbol(sym.PB6,new String("\tPORTBbits.RB6"));
          }
        case 261: break;
        case 117: 
          { return new Symbol(sym.CARACTER , new String(yytext()));
          }
        case 262: break;
        case 48: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA3"));
          }
        case 263: break;
        case 100: 
          { return symbol(sym.PC1,new String("\tPORTCbits.RC1"));
          }
        case 264: break;
        case 87: 
          { return symbol(sym.PA4,new String("\tPORTAbits.RA4"));
          }
        case 265: break;
        case 120: 
          { return symbol(sym.MAIN,new String("\n\n\tvoid main(void)"));
          }
        case 266: break;
        case 126: 
          { return symbol(sym.FUSES,new String("#include <xc.h>\n"
								                + "// CONFIG1\n" 
								                +"#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)\n" 
								                +"#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)\n"
								                +"#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)\n"
								                +"#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)\n" 
								                +"#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)\n"
								                +"#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)\n"
								                +"#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)\n" 
								                +"#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)\n"
								                +"#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)\n" 
								                +"#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)\n" 
								                +"\n" +"\n" +"\n" 
								                +"// CONFIG2\n"
								                +"\n"
								                +"#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)\n"
								                +"\n"
								                +"#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)\n\n\n\n"));
          }
        case 267: break;
        case 110: 
          { return symbol(sym.PD3,new String("\tPORTDbits.RD3"));
          }
        case 268: break;
        case 21: 
          { return symbol(sym.TB,new String("\tTRISB"));
          }
        case 269: break;
        case 176: 
          { return symbol(sym.OPTIONREG_PS0, new String("\tOPTION_REGbits.PS0"));
          }
        case 270: break;
        case 66: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC5"));
          }
        case 271: break;
        case 139: 
          { return symbol(sym.ANSEL3, new String("\tANSELbits.ANS3"));
          }
        case 272: break;
        case 161: 
          { return symbol(sym.INTCONPEIE, new String("\tINTCONbits.PEIE"));
          }
        case 273: break;
        case 70: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD1"));
          }
        case 274: break;
        case 153: 
          { return symbol(sym.OTHERWISE);
          }
        case 275: break;
        case 58: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB5"));
          }
        case 276: break;
        case 98: 
          { return symbol(sym.PB7,new String("\tPORTBbits.RB7"));
          }
        case 277: break;
        case 6: 
          { return symbol(sym.DOSPUNTOS);
          }
        case 278: break;
        case 147: 
          { return symbol(sym.ANSELH1, new String("\tANSELbits.ANS9"));
          }
        case 279: break;
        case 133: 
          { return symbol(sym.SALIDA);
          }
        case 280: break;
        case 91: 
          { return symbol(sym.PB0,new String("\tPORTBbits.RB0"));
          }
        case 281: break;
        case 131: 
          { return symbol(sym.TOGGLE,new String("!"));
          }
        case 282: break;
        case 171: 
          { return symbol(sym.ADCON0_ADCS1, new String("\tADCON0bits.ADCS1"));
          }
        case 283: break;
        case 5: 
          { return symbol(sym.RCORCH);
          }
        case 284: break;
        case 101: 
          { return symbol(sym.PC2,new String("\tPORTCbits.RC2"));
          }
        case 285: break;
        case 20: 
          { return symbol(sym.TA,new String("\tTRISA"));
          }
        case 286: break;
        case 160: 
          { return symbol(sym.INTCONINTF, new String("\tINTCONbits.INTF"));
          }
        case 287: break;
        case 51: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA6"));
          }
        case 288: break;
        case 88: 
          { return symbol(sym.PA5,new String("\tPORTAbits.RA5"));
          }
        case 289: break;
        case 174: 
          { return symbol(sym.OPTIONREG_PS, new String("\tOPTION_REGbits.PS"));
          }
        case 290: break;
        case 12: 
          { return symbol(sym.PCOMA);
          }
        case 291: break;
        case 41: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE0"));
          }
        case 292: break;
        case 111: 
          { return symbol(sym.PD4,new String("\tPORTDbits.RD4"));
          }
        case 293: break;
        case 155: 
          { return symbol(sym.INTCONGIE, new String("\tINTCONbits.GIE"));
          }
        case 294: break;
        case 127: 
          { return symbol(sym.REAL);
          }
        case 295: break;
        case 62: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC1"));
          }
        case 296: break;
        case 34: 
          { return symbol(sym.RECBITSDER);
          }
        case 297: break;
        case 54: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB1"));
          }
        case 298: break;
        case 73: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD4"));
          }
        case 299: break;
        case 92: 
          { return symbol(sym.PB1,new String("\tPORTBbits.RB1"));
          }
        case 300: break;
        case 172: 
          { return symbol(sym.ADCON1_VCFG0, new String("\tADCON1bits.VCFG0"));
          }
        case 301: break;
        case 79: 
          { return symbol(sym.PE0,new String("\tPORTEbits.RE0"));
          }
        case 302: break;
        case 47: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA2"));
          }
        case 303: break;
        case 26: 
          { return symbol(sym.PE,new String("\tPORTE"));
          }
        case 304: break;
        case 159: 
          { return symbol(sym.INTCONINTE, new String("\tINTCONbits.INTE"));
          }
        case 305: break;
        case 102: 
          { return symbol(sym.PC3,new String("\tPORTCbits.RC3"));
          }
        case 306: break;
        case 78: 
          { return symbol(sym.AND);
          }
        case 307: break;
        case 89: 
          { return symbol(sym.PA6,new String("\tPORTAbits.RA6"));
          }
        case 308: break;
        case 141: 
          { return symbol(sym.ANSEL5, new String("\tANSELbits.ANS5"));
          }
        case 309: break;
        case 112: 
          { return symbol(sym.PD5,new String("\tPORTDbits.RD5"));
          }
        case 310: break;
        case 130: 
          { return symbol(sym.CHALE,new String("\t\tretardo"));
          }
        case 311: break;
        case 119: 
          { return symbol(sym.CTELOGICA,new String(yytext()));
          }
        case 312: break;
        case 44: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE3"));
          }
        case 313: break;
        case 136: 
          { return symbol(sym.ANSEL0, new String("\tANSELbits.ANS0"));
          }
        case 314: break;
        case 65: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC4"));
          }
        case 315: break;
        case 4: 
          { return symbol(sym.LCORCH);
          }
        case 316: break;
        case 1: 
          { System.out.println("Error léxico en línea "+lineaActual+":-"+yytext()+"-");
          }
        case 317: break;
        case 69: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD0"));
          }
        case 318: break;
        case 31: 
          { return  symbol(sym.DO);
          }
        case 319: break;
        case 14: 
          { return symbol(sym.MENOS);
          }
        case 320: break;
        case 177: 
          { return symbol(sym.OPTIONREG_PS1, new String("\tOPTION_REGbits.PS1"));
          }
        case 321: break;
        case 116: 
          { return symbol(sym.TIPOVC);
          }
        case 322: break;
        case 57: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB4"));
          }
        case 323: break;
        case 152: 
          { return symbol(sym.BOOLEAN);
          }
        case 324: break;
        case 30: 
          { return symbol(sym.PD,new String("\tPORTD"));
          }
        case 325: break;
        case 76: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD7"));
          }
        case 326: break;
        case 163: 
          { return symbol(sym.INTCONRBIF, new String("\tINTCONbits.RBIF"));
          }
        case 327: break;
        case 93: 
          { return symbol(sym.PB2,new String("\tPORTBbits.RB2"));
          }
        case 328: break;
        case 122: 
          { return symbol(sym.CHAR);
          }
        case 329: break;
        case 158: 
          { return symbol(sym.INTCONT0IF, new String("\tINTCONbits.T0IF"));
          }
        case 330: break;
        case 18: 
          { ;
          }
        case 331: break;
        case 80: 
          { return symbol(sym.PE1,new String("\tPORTEbits.RE1"));
          }
        case 332: break;
        case 168: 
          { return symbol(sym.ADCON0_CHS3, new String("\tADCON0bits.CHS3"));
          }
        case 333: break;
        case 103: 
          { return symbol(sym.PC4,new String("\tPORTCbits.RC4"));
          }
        case 334: break;
        case 128: 
          { return symbol(sym.CICLO,new String("\n\n\tvoid loop()"));
          }
        case 335: break;
        case 50: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA5"));
          }
        case 336: break;
        case 90: 
          { return symbol(sym.PA7,new String("\tPORTAbits.RA7"));
          }
        case 337: break;
        case 3: 
          { return symbol(sym.NUMERO, new Integer(yytext()));
          }
        case 338: break;
        case 13: 
          { return symbol(sym.MAS);
          }
        case 339: break;
        case 83: 
          { return symbol(sym.PA0,new String("\tPORTAbits.RA0"));
          }
        case 340: break;
        case 169: 
          { return symbol(sym.ADCON1_ADFM, new String("\tADCON1bits.ADFM"));
          }
        case 341: break;
        case 113: 
          { return symbol(sym.PD6,new String("\tPORTDbits.RD6"));
          }
        case 342: break;
        case 143: 
          { return symbol(sym.ANSEL7, new String("\tANSELbits.ANS7"));
          }
        case 343: break;
        case 61: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC0"));
          }
        case 344: break;
        case 17: 
          { return symbol(sym.IGUAL);
          }
        case 345: break;
        case 33: 
          { return symbol(sym.OR);
          }
        case 346: break;
        case 121: 
          { return symbol(sym.CASO,nuevaEtq());
          }
        case 347: break;
        case 138: 
          { return symbol(sym.ANSEL2, new String("\tANSELbits.ANS2"));
          }
        case 348: break;
        case 29: 
          { return symbol(sym.PC,new String("\tPORTC"));
          }
        case 349: break;
        case 68: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC7"));
          }
        case 350: break;
        case 132: 
          { return symbol(sym.INTCON,new String("\tINTCON"));
          }
        case 351: break;
        case 129: 
          { return symbol(sym.WHILE ,nuevaEtq());
          }
        case 352: break;
        case 53: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB0"));
          }
        case 353: break;
        case 72: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD3"));
          }
        case 354: break;
        case 162: 
          { return symbol(sym.INTCONRBIE, new String("\tINTCONbits.RBIE"));
          }
        case 355: break;
        case 146: 
          { return symbol(sym.ANSELH0, new String("\tANSELbits.ANS8"));
          }
        case 356: break;
        case 60: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB7"));
          }
        case 357: break;
        case 94: 
          { return symbol(sym.PB3,new String("\tPORTBbits.RB3"));
          }
        case 358: break;
        case 157: 
          { return symbol(sym.INTCONT0IE, new String("\tINTCONbits.T0IE"));
          }
        case 359: break;
        case 40: 
          { return symbol(sym.NUMREAL,new Float(yytext()));
          }
        case 360: break;
        case 81: 
          { return symbol(sym.PE2,new String("\tPORTEbits.RE2"));
          }
        case 361: break;
        case 46: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA1"));
          }
        case 362: break;
        case 167: 
          { return symbol(sym.ADCON0_CHS2, new String("\tADCON0bits.CHS2"));
          }
        case 363: break;
        case 104: 
          { return symbol(sym.PC5,new String("\tPORTCbits.RC5"));
          }
        case 364: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
