<<<<<<< HEAD
/* The following code was generated by JFlex 1.4.1 on 2/07/15 01:42 PM */
=======
/* The following code was generated by JFlex 1.4.1 on 7/5/15 6:26 PM */
>>>>>>> origin/master
import java_cup.runtime.*;
/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
<<<<<<< HEAD
 * on 2/07/15 01:42 PM from the specification file
 * <tt>/Users/moises/Desktop/mapic/mapic.flex</tt>
=======
 * on 7/5/15 6:26 PM from the specification file
 * <tt>/Users/Alejandro/GitHub/mapic/mapic.flex</tt>
>>>>>>> origin/master
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
<<<<<<< HEAD
    "\11\66\1\67\1\64\2\0\1\67\16\66\4\0\1\67\3\0\1\65"+
    "\2\0\1\63\1\45\1\46\1\2\1\53\1\51\1\54\1\62\1\1"+
    "\1\23\1\5\1\24\1\25\1\26\1\27\1\30\1\31\2\4\1\44"+
    "\1\52\1\56\1\57\1\55\2\0\1\13\1\20\1\21\1\22\1\11"+
    "\1\17\1\36\1\37\1\7\2\3\1\33\1\10\1\14\1\34\1\16"+
    "\1\3\1\32\1\12\1\6\1\15\1\35\1\40\1\3\1\60\1\3"+
    "\1\42\1\0\1\43\1\41\1\3\1\0\1\13\1\20\1\21\1\22"+
    "\1\11\1\17\1\36\1\37\1\7\2\3\1\33\1\10\1\14\1\34"+
    "\1\16\1\3\1\32\1\12\1\6\1\15\1\35\1\40\1\3\1\60"+
    "\1\3\1\47\1\0\1\50\1\0\41\66\2\0\4\65\4\0\1\65"+
    "\2\0\1\66\7\0\1\65\4\0\1\65\5\0\27\65\1\0\37\65"+
    "\1\0\u01ca\65\4\0\14\65\16\0\5\65\7\0\1\65\1\0\1\65"+
    "\21\0\160\66\5\65\1\0\2\65\2\0\4\65\10\0\1\65\1\0"+
    "\3\65\1\0\1\65\1\0\24\65\1\0\123\65\1\0\213\65\1\0"+
    "\5\66\2\0\236\65\11\0\46\65\2\0\1\65\7\0\47\65\7\0"+
    "\1\65\1\0\55\66\1\0\1\66\1\0\2\66\1\0\2\66\1\0"+
    "\1\66\10\0\33\65\5\0\3\65\15\0\5\66\6\0\1\65\4\0"+
    "\13\66\5\0\53\65\25\66\12\61\4\0\2\65\1\66\143\65\1\0"+
    "\1\65\10\66\1\0\6\66\2\65\2\66\1\0\4\66\2\65\12\61"+
    "\3\65\2\0\1\65\17\0\1\66\1\65\1\66\36\65\33\66\2\0"+
    "\131\65\13\66\1\65\16\0\12\61\41\65\11\66\2\65\4\0\1\65"+
    "\5\0\26\65\4\66\1\65\11\66\1\65\3\66\1\65\5\66\22\0"+
    "\31\65\3\66\104\0\1\65\1\0\13\65\67\0\33\66\1\0\4\66"+
    "\66\65\3\66\1\65\22\66\1\65\7\66\12\65\2\66\2\0\12\61"+
    "\1\0\7\65\1\0\7\65\1\0\3\66\1\0\10\65\2\0\2\65"+
    "\2\0\26\65\1\0\7\65\1\0\1\65\3\0\4\65\2\0\1\66"+
    "\1\65\7\66\2\0\2\66\2\0\3\66\1\65\10\0\1\66\4\0"+
    "\2\65\1\0\3\65\2\66\2\0\12\61\4\65\7\0\1\65\5\0"+
    "\3\66\1\0\6\65\4\0\2\65\2\0\26\65\1\0\7\65\1\0"+
    "\2\65\1\0\2\65\1\0\2\65\2\0\1\66\1\0\5\66\4\0"+
    "\2\66\2\0\3\66\3\0\1\66\7\0\4\65\1\0\1\65\7\0"+
    "\12\61\2\66\3\65\1\66\13\0\3\66\1\0\11\65\1\0\3\65"+
    "\1\0\26\65\1\0\7\65\1\0\2\65\1\0\5\65\2\0\1\66"+
    "\1\65\10\66\1\0\3\66\1\0\3\66\2\0\1\65\17\0\2\65"+
    "\2\66\2\0\12\61\1\0\1\65\17\0\3\66\1\0\10\65\2\0"+
    "\2\65\2\0\26\65\1\0\7\65\1\0\2\65\1\0\5\65\2\0"+
    "\1\66\1\65\7\66\2\0\2\66\2\0\3\66\10\0\2\66\4\0"+
    "\2\65\1\0\3\65\2\66\2\0\12\61\1\0\1\65\20\0\1\66"+
    "\1\65\1\0\6\65\3\0\3\65\1\0\4\65\3\0\2\65\1\0"+
    "\1\65\1\0\2\65\3\0\2\65\3\0\3\65\3\0\14\65\4\0"+
    "\5\66\3\0\3\66\1\0\4\66\2\0\1\65\6\0\1\66\16\0"+
    "\12\61\11\0\1\65\7\0\3\66\1\0\10\65\1\0\3\65\1\0"+
    "\27\65\1\0\12\65\1\0\5\65\3\0\1\65\7\66\1\0\3\66"+
    "\1\0\4\66\7\0\2\66\1\0\2\65\6\0\2\65\2\66\2\0"+
    "\12\61\22\0\2\66\1\0\10\65\1\0\3\65\1\0\27\65\1\0"+
    "\12\65\1\0\5\65\2\0\1\66\1\65\7\66\1\0\3\66\1\0"+
    "\4\66\7\0\2\66\7\0\1\65\1\0\2\65\2\66\2\0\12\61"+
    "\1\0\2\65\17\0\2\66\1\0\10\65\1\0\3\65\1\0\51\65"+
    "\2\0\1\65\7\66\1\0\3\66\1\0\4\66\1\65\10\0\1\66"+
    "\10\0\2\65\2\66\2\0\12\61\12\0\6\65\2\0\2\66\1\0"+
    "\22\65\3\0\30\65\1\0\11\65\1\0\1\65\2\0\7\65\3\0"+
    "\1\66\4\0\6\66\1\0\1\66\1\0\10\66\22\0\2\66\15\0"+
    "\60\65\1\66\2\65\7\66\4\0\10\65\10\66\1\0\12\61\47\0"+
    "\2\65\1\0\1\65\2\0\2\65\1\0\1\65\2\0\1\65\6\0"+
    "\4\65\1\0\7\65\1\0\3\65\1\0\1\65\1\0\1\65\2\0"+
    "\2\65\1\0\4\65\1\66\2\65\6\66\1\0\2\66\1\65\2\0"+
    "\5\65\1\0\1\65\1\0\6\66\2\0\12\61\2\0\4\65\40\0"+
    "\1\65\27\0\2\66\6\0\12\61\13\0\1\66\1\0\1\66\1\0"+
    "\1\66\4\0\2\66\10\65\1\0\44\65\4\0\24\66\1\0\2\66"+
    "\5\65\13\66\1\0\44\66\11\0\1\66\71\0\53\65\24\66\1\65"+
    "\12\61\6\0\6\65\4\66\4\65\3\66\1\65\3\66\2\65\7\66"+
    "\3\65\4\66\15\65\14\66\1\65\1\66\12\61\4\66\2\0\46\65"+
    "\1\0\1\65\5\0\1\65\2\0\53\65\1\0\u014d\65\1\0\4\65"+
    "\2\0\7\65\1\0\1\65\1\0\4\65\2\0\51\65\1\0\4\65"+
    "\2\0\41\65\1\0\4\65\2\0\7\65\1\0\1\65\1\0\4\65"+
    "\2\0\17\65\1\0\71\65\1\0\4\65\2\0\103\65\2\0\3\66"+
    "\40\0\20\65\20\0\125\65\14\0\u026c\65\2\0\21\65\1\0\32\65"+
    "\5\0\113\65\3\0\3\65\17\0\15\65\1\0\4\65\3\66\13\0"+
    "\22\65\3\66\13\0\22\65\2\66\14\0\15\65\1\0\3\65\1\0"+
    "\2\66\14\0\64\65\40\66\3\0\1\65\3\0\2\65\1\66\2\0"+
    "\12\61\41\0\3\66\2\0\12\61\6\0\130\65\10\0\51\65\1\66"+
    "\1\65\5\0\106\65\12\0\35\65\3\0\14\66\4\0\14\66\12\0"+
    "\12\61\36\65\2\0\5\65\13\0\54\65\4\0\21\66\7\65\2\66"+
    "\6\0\12\61\46\0\27\65\5\66\4\0\65\65\12\66\1\0\35\66"+
    "\2\0\1\66\12\61\6\0\12\61\15\0\1\65\130\0\5\66\57\65"+
    "\21\66\7\65\4\0\12\61\21\0\11\66\14\0\3\66\36\65\15\66"+
    "\2\65\12\61\54\65\16\66\14\0\44\65\24\66\10\0\12\61\3\0"+
    "\3\65\12\61\44\65\122\0\3\66\1\0\25\66\4\65\1\66\4\65"+
    "\3\66\2\65\11\0\300\65\47\66\25\0\4\66\u0116\65\2\0\6\65"+
    "\2\0\46\65\2\0\6\65\2\0\10\65\1\0\1\65\1\0\1\65"+
    "\1\0\1\65\1\0\37\65\2\0\65\65\1\0\7\65\1\0\1\65"+
    "\3\0\3\65\1\0\7\65\3\0\4\65\2\0\6\65\4\0\15\65"+
    "\5\0\3\65\1\0\7\65\16\0\5\66\32\0\5\66\20\0\2\65"+
    "\23\0\1\65\13\0\5\66\5\0\6\66\1\0\1\65\15\0\1\65"+
    "\20\0\15\65\3\0\33\65\25\0\15\66\4\0\1\66\3\0\14\66"+
    "\21\0\1\65\4\0\1\65\2\0\12\65\1\0\1\65\3\0\5\65"+
    "\6\0\1\65\1\0\1\65\1\0\1\65\1\0\4\65\1\0\13\65"+
    "\2\0\4\65\5\0\5\65\4\0\1\65\21\0\51\65\u0a77\0\57\65"+
    "\1\0\57\65\1\0\205\65\6\0\4\65\3\66\2\65\14\0\46\65"+
    "\1\0\1\65\5\0\1\65\2\0\70\65\7\0\1\65\17\0\1\66"+
    "\27\65\11\0\7\65\1\0\7\65\1\0\7\65\1\0\7\65\1\0"+
    "\7\65\1\0\7\65\1\0\7\65\1\0\7\65\1\0\40\66\57\0"+
    "\1\65\u01d5\0\3\65\31\0\11\65\6\66\1\0\5\65\2\0\5\65"+
    "\4\0\126\65\2\0\2\66\2\0\3\65\1\0\132\65\1\0\4\65"+
    "\5\0\51\65\3\0\136\65\21\0\33\65\65\0\20\65\u0200\0\u19b6\65"+
    "\112\0\u51cd\65\63\0\u048d\65\103\0\56\65\2\0\u010d\65\3\0\20\65"+
    "\12\61\2\65\24\0\57\65\1\66\4\0\12\66\1\0\31\65\7\0"+
    "\1\66\120\65\2\66\45\0\11\65\2\0\147\65\2\0\4\65\1\0"+
    "\4\65\14\0\13\65\115\0\12\65\1\66\3\65\1\66\4\65\1\66"+
    "\27\65\5\66\20\0\1\65\7\0\64\65\14\0\2\66\62\65\21\66"+
    "\13\0\12\61\6\0\22\66\6\65\3\0\1\65\4\0\12\61\34\65"+
    "\10\66\2\0\27\65\15\66\14\0\35\65\3\0\4\66\57\65\16\66"+
    "\16\0\1\65\12\61\46\0\51\65\16\66\11\0\3\65\1\66\10\65"+
    "\2\66\2\0\12\61\6\0\27\65\3\0\1\65\1\66\4\0\60\65"+
    "\1\66\1\65\3\66\2\65\2\66\5\65\2\66\1\65\1\66\1\65"+
    "\30\0\3\65\2\0\13\65\5\66\2\0\3\65\2\66\12\0\6\65"+
    "\2\0\6\65\2\0\6\65\11\0\7\65\1\0\7\65\221\0\43\65"+
    "\10\66\1\0\2\66\2\0\12\61\6\0\u2ba4\65\14\0\27\65\4\0"+
    "\61\65\u2104\0\u016e\65\2\0\152\65\46\0\7\65\14\0\5\65\5\0"+
    "\1\65\1\66\12\65\1\0\15\65\1\0\5\65\1\0\1\65\1\0"+
    "\2\65\1\0\2\65\1\0\154\65\41\0\u016b\65\22\0\100\65\2\0"+
    "\66\65\50\0\15\65\3\0\20\66\20\0\7\66\14\0\2\65\30\0"+
    "\3\65\31\0\1\65\6\0\5\65\1\0\207\65\2\0\1\66\4\0"+
    "\1\65\13\0\12\61\7\0\32\65\4\0\1\65\1\0\32\65\13\0"+
    "\131\65\3\0\6\65\2\0\6\65\2\0\6\65\2\0\3\65\3\0"+
    "\2\65\3\0\2\65\22\0\3\66\4\0";
=======
    "\11\0\1\64\1\63\2\0\1\64\22\0\1\64\1\57\5\0\1\62"+
    "\1\44\1\45\1\2\1\52\1\50\1\53\1\61\1\1\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\4\1\43\1\51\1\55"+
    "\1\56\1\54\2\0\1\12\1\17\1\20\1\21\1\10\1\16\1\36"+
    "\1\37\1\6\2\3\1\33\1\7\1\13\1\34\1\15\1\3\1\32"+
    "\1\11\1\5\1\14\1\35\1\40\3\3\1\41\1\0\1\42\1\0"+
    "\1\3\1\0\1\12\1\17\1\20\1\21\1\10\1\16\1\36\1\37"+
    "\1\6\2\3\1\33\1\7\1\13\1\34\1\15\1\3\1\32\1\11"+
    "\1\5\1\14\1\35\1\40\3\3\1\46\1\0\1\47\u05e2\0\12\60"+
    "\206\0\12\60\306\0\12\60\u019c\0\12\60\166\0\12\60\166\0\12\60"+
    "\166\0\12\60\166\0\12\60\166\0\12\60\166\0\12\60\166\0\12\60"+
    "\166\0\12\60\340\0\12\60\166\0\12\60\106\0\12\60\u0116\0\12\60"+
    "\106\0\12\60\u0746\0\12\60\46\0\12\60\u012c\0\12\60\200\0\12\60"+
    "\246\0\12\60\6\0\12\60\266\0\12\60\126\0\12\60\206\0\12\60"+
    "\6\0\12\60\u89c6\0\12\60\u02a6\0\12\60\46\0\12\60\306\0\12\60"+
    "\166\0\12\60\u0196\0\12\60\u5316\0\12\60\346\0";
>>>>>>> origin/master

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
<<<<<<< HEAD
    "\1\0\2\1\1\2\2\3\14\2\1\3\4\2\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\1\1\23"+
    "\1\24\2\0\1\3\1\2\1\25\1\26\1\27\1\30"+
    "\1\31\1\2\1\32\4\2\1\33\5\2\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\12\2\1\42\1\43\1\2"+
    "\1\44\1\45\3\2\1\46\1\47\1\50\1\51\1\52"+
    "\2\0\1\53\1\3\1\2\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\11\2\1\120\1\2\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\1\151\1\152\1\153\1\154\1\155"+
    "\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\2"+
    "\1\165\12\2\1\166\2\2\1\167\1\23\1\3\1\2"+
    "\1\170\1\2\1\171\1\2\1\172\11\2\1\173\1\174"+
    "\3\2\1\175\1\176\1\2\1\3\4\2\1\177\2\2"+
    "\1\200\1\2\1\201\1\2\1\202\3\2\1\203\1\3"+
    "\1\204\1\205\2\2\1\206\1\207\4\2\1\210\1\3"+
    "\1\211\1\212\1\213\1\214\1\215\1\216\1\217";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
=======
    "\1\0\2\1\1\2\1\3\20\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\22\2\0\1\2\1\23"+
    "\1\24\1\25\1\26\1\27\6\2\1\30\4\2\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\12\2\1\37\1\2"+
    "\1\40\1\41\3\2\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\2\0\1\50\1\2\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\3\2\1\115\5\2\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142"+
    "\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152"+
    "\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162"+
    "\1\163\12\2\1\164\2\2\1\165\1\22\1\2\1\166"+
    "\1\2\1\167\1\170\10\2\1\171\1\172\3\2\1\173"+
    "\4\2\1\174\2\2\1\175\1\176\1\2\1\177\3\2"+
    "\1\200\1\201\1\202\1\2\1\203\1\204\3\2\1\205"+
    "\1\206\1\207\1\210\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
>>>>>>> origin/master
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
<<<<<<< HEAD
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8"+
    "\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\250\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\250\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\250\0\70"+
    "\0\u0e00\0\250\0\250\0\u0e38\0\u0e70\0\u0ea8\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0ee0\0\u0f18\0\u0690\0\u0f50\0\u0f88"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\250\0\u11b8\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\u11f0\0\250\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\250"+
    "\0\u1458\0\u1490\0\70\0\70\0\u14c8\0\u1500\0\250\0\u1538"+
    "\0\250\0\u1570\0\250\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\250\0\250\0\u17a0\0\u17d8"+
    "\0\u1810\0\250\0\250\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\250\0\u1998\0\u19d0\0\250\0\u1a08\0\250\0\u1a40"+
    "\0\250\0\u1a78\0\u1ab0\0\u1ae8\0\250\0\u1b20\0\250\0\250"+
    "\0\u1b58\0\u1b90\0\250\0\250\0\u1bc8\0\u1c00\0\u1c38\0\u1c70"+
    "\0\250\0\u1ca8\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
=======
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\237\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\237\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\237\0\u0c6c\0\237\0\237\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u0d40\0\u0d75"+
    "\0\u05cc\0\u0daa\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\237\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\237"+
    "\0\u1199\0\u11ce\0\65\0\65\0\u1203\0\237\0\u1238\0\237"+
    "\0\237\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\237\0\237\0\u1415\0\u144a\0\u147f\0\237\0\u14b4"+
    "\0\u14e9\0\u151e\0\u1553\0\237\0\u1588\0\u15bd\0\237\0\237"+
    "\0\u15f2\0\237\0\u1627\0\u165c\0\u1691\0\237\0\237\0\237"+
    "\0\u16c6\0\237\0\237\0\u16fb\0\u1730\0\u1765\0\237\0\237"+
    "\0\237\0\237\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
>>>>>>> origin/master
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\4\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\6\5\1\24\1\4\1\25"+
    "\1\26\2\4\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
<<<<<<< HEAD
    "\1\45\1\46\1\4\1\5\1\2\1\47\1\50\1\51"+
    "\1\2\1\50\72\0\1\52\70\0\36\4\17\0\1\4"+
    "\1\51\3\0\2\51\5\0\2\5\15\0\7\5\27\0"+
    "\1\5\1\53\11\0\1\5\1\54\15\0\1\54\6\5"+
    "\27\0\1\5\1\53\10\0\4\4\1\55\1\4\1\56"+
    "\1\4\1\57\4\4\1\60\1\61\1\62\7\4\1\63"+
    "\1\4\1\64\2\4\1\65\1\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\11\4\1\66\24\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\10\4\1\67\25\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\11\4\1\70\24\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\4\4\1\71"+
    "\1\4\1\72\1\4\1\73\24\4\1\74\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\11\4\1\75\15\4\1\76"+
    "\6\4\17\0\1\4\1\51\3\0\2\51\4\0\31\4"+
    "\1\77\4\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\6\4\1\100\1\4\1\101\4\4\1\102\1\103\1\104"+
    "\11\4\1\105\4\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\4\4\1\106\3\4\1\107\1\4\1\110\23\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\31\4\1\111"+
    "\4\4\17\0\1\4\1\51\3\0\2\51\4\0\4\4"+
    "\1\112\3\4\1\113\20\4\1\114\2\4\1\115\1\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\6\4\1\116"+
    "\22\4\1\117\4\4\17\0\1\4\1\51\3\0\2\51"+
    "\5\0\1\5\1\54\12\0\1\120\2\0\1\54\6\5"+
    "\27\0\1\5\1\53\10\0\6\4\1\121\27\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\14\4\1\122\12\4"+
    "\1\123\6\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\10\4\1\124\20\4\1\125\4\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\34\4\1\126\1\4\17\0\1\4"+
    "\1\51\3\0\2\51\56\0\1\127\1\0\1\130\66\0"+
    "\1\131\1\132\67\0\1\133\10\0\64\134\1\0\3\134"+
    "\64\0\1\50\2\0\1\50\3\0\36\51\17\0\2\51"+
    "\3\0\2\51\1\0\2\52\1\135\65\52\4\0\2\136"+
    "\15\0\7\136\27\0\1\136\12\0\1\5\1\137\15\0"+
    "\1\137\6\5\27\0\1\5\1\53\10\0\5\4\1\140"+
    "\30\4\17\0\1\4\1\51\3\0\2\51\4\0\2\4"+
    "\1\141\15\4\1\142\1\143\1\144\13\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\2\4\1\145\15\4\1\146"+
    "\1\147\1\150\1\151\1\152\1\153\1\154\7\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\2\4\1\155\15\4"+
    "\1\156\1\157\1\160\1\161\1\162\1\163\1\164\7\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\2\4\1\165"+
    "\15\4\1\166\1\167\1\170\1\171\1\172\1\173\1\174"+
    "\7\4\17\0\1\4\1\51\3\0\2\51\4\0\2\4"+
    "\1\175\15\4\1\176\1\177\1\200\1\201\1\202\1\203"+
    "\1\204\7\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\12\4\1\205\23\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\33\4\1\206\2\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\6\4\1\207\27\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\3\4\1\210\32\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\4\4\1\211\31\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\3\4\1\212\32\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\3\4\1\213"+
    "\32\4\17\0\1\4\1\51\3\0\2\51\4\0\30\4"+
    "\1\214\5\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\4\4\1\215\31\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\17\4\1\216\16\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\27\4\1\217\6\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\2\4\1\220\15\4\1\221\1\222"+
    "\1\223\13\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\2\4\1\224\15\4\1\225\1\226\1\227\1\230\1\231"+
    "\1\232\1\233\7\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\2\4\1\234\15\4\1\235\1\236\1\237\1\240"+
    "\1\241\1\242\1\243\7\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\2\4\1\244\15\4\1\245\1\246\1\247"+
    "\1\250\1\251\1\252\1\253\7\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\2\4\1\254\15\4\1\255\1\256"+
    "\1\257\1\260\1\261\1\262\1\263\7\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\4\4\1\264\31\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\11\4\1\265\24\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\30\4\1\266"+
    "\5\4\17\0\1\4\1\51\3\0\2\51\4\0\7\4"+
    "\1\267\26\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\31\4\1\270\4\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\16\4\1\271\17\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\7\4\1\272\26\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\11\4\1\273\24\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\10\4\1\274\25\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\14\4\1\275\21\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\3\4\1\276"+
    "\4\4\1\277\25\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\27\4\1\300\6\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\4\4\1\301\31\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\4\4\1\302\31\4\17\0\1\4"+
    "\1\51\3\0\2\51\64\0\1\303\4\0\1\52\1\304"+
    "\1\135\65\52\4\0\1\5\1\305\15\0\1\305\6\5"+
    "\27\0\1\5\1\53\10\0\6\4\1\306\27\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\6\4\1\307\27\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\33\4\1\310"+
    "\2\4\17\0\1\4\1\51\3\0\2\51\4\0\11\4"+
    "\1\311\24\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\6\4\1\312\27\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\11\4\1\313\24\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\27\4\1\314\6\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\12\4\1\315\23\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\4\4\1\316\31\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\3\4\1\317\32\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\10\4\1\320"+
    "\25\4\17\0\1\4\1\51\3\0\2\51\4\0\11\4"+
    "\1\321\24\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\7\4\1\205\26\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\6\4\1\322\27\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\30\4\1\323\5\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\30\4\1\324\5\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\31\4\1\325\4\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\7\4\1\300\26\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\27\4\1\326"+
    "\6\4\17\0\1\4\1\51\3\0\2\51\4\0\10\4"+
    "\1\327\25\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\10\4\1\330\1\4\1\331\23\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\30\4\1\332\5\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\17\4\1\333\16\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\30\4\1\334\5\4"+
    "\17\0\1\4\1\51\3\0\2\51\5\0\1\5\1\335"+
    "\15\0\1\335\6\5\27\0\1\5\1\53\10\0\5\4"+
    "\1\336\30\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\30\4\1\337\5\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\33\4\1\340\2\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\10\4\1\341\25\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\13\4\1\342\22\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\17\4\1\343\16\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\16\4\1\344\17\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\36\4\17\0"+
    "\1\345\1\51\3\0\2\51\4\0\3\4\1\346\32\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\7\4\1\347"+
    "\26\4\17\0\1\4\1\51\3\0\2\51\4\0\6\4"+
    "\1\350\27\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\31\4\1\351\4\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\12\4\1\352\23\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\27\4\1\353\6\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\27\4\1\354\6\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\6\4\1\355\27\4\17\0"+
    "\1\4\1\51\3\0\2\51\5\0\1\5\1\356\15\0"+
    "\1\356\6\5\27\0\1\5\1\53\10\0\7\4\1\357"+
    "\26\4\17\0\1\4\1\51\3\0\2\51\4\0\6\4"+
    "\1\360\27\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\6\4\1\361\27\4\17\0\1\4\1\51\3\0\2\51"+
    "\4\0\17\4\1\362\16\4\17\0\1\4\1\51\3\0"+
    "\2\51\4\0\10\4\1\363\25\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\34\4\1\364\1\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\6\4\1\365\27\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\10\4\1\366\25\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\30\4\1\367"+
    "\5\4\17\0\1\4\1\51\3\0\2\51\4\0\17\4"+
    "\1\370\16\4\17\0\1\4\1\51\3\0\2\51\4\0"+
    "\11\4\1\371\24\4\17\0\1\4\1\51\3\0\2\51"+
    "\5\0\1\5\1\372\15\0\1\372\6\5\27\0\1\5"+
    "\1\53\10\0\27\4\1\373\6\4\17\0\1\4\1\51"+
    "\3\0\2\51\4\0\10\4\1\374\25\4\17\0\1\4"+
    "\1\51\3\0\2\51\4\0\27\4\1\375\6\4\17\0"+
    "\1\4\1\51\3\0\2\51\4\0\11\4\1\376\24\4"+
    "\17\0\1\4\1\51\3\0\2\51\4\0\3\4\1\377"+
    "\32\4\17\0\1\4\1\51\3\0\2\51\4\0\31\4"+
    "\1\u0100\4\4\17\0\1\4\1\51\3\0\2\51\5\0"+
    "\1\5\1\u0101\15\0\1\u0101\6\5\27\0\1\5\1\53"+
    "\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7392];
=======
    "\1\5\1\2\1\45\2\46\67\0\1\47\65\0\36\4"+
    "\30\0\1\5\15\0\10\5\26\0\1\5\1\50\6\0"+
    "\3\4\1\51\1\4\1\52\1\4\1\53\4\4\1\54"+
    "\1\55\1\56\10\4\1\57\1\4\1\60\2\4\1\61"+
    "\1\4\27\0\10\4\1\62\25\4\27\0\7\4\1\63"+
    "\26\4\27\0\10\4\1\64\25\4\27\0\3\4\1\65"+
    "\1\4\1\66\1\4\1\67\25\4\1\70\27\0\10\4"+
    "\1\71\25\4\27\0\31\4\1\72\4\4\27\0\5\4"+
    "\1\73\1\4\1\74\4\4\1\75\1\76\1\77\17\4"+
    "\27\0\3\4\1\100\3\4\1\101\1\4\1\102\16\4"+
    "\1\103\5\4\27\0\31\4\1\104\4\4\27\0\3\4"+
    "\1\105\3\4\1\106\21\4\1\107\2\4\1\110\1\4"+
    "\27\0\5\4\1\111\23\4\1\112\4\4\27\0\5\4"+
    "\1\113\30\4\27\0\13\4\1\114\13\4\1\115\6\4"+
    "\27\0\7\4\1\116\21\4\1\117\4\4\27\0\34\4"+
    "\1\120\1\4\100\0\1\121\1\0\1\122\63\0\1\123"+
    "\1\124\64\0\1\125\64\0\1\126\6\0\63\127\1\0"+
    "\1\127\63\0\2\46\2\47\1\130\62\47\4\0\1\131"+
    "\15\0\10\131\26\0\1\131\7\0\4\4\1\132\31\4"+
    "\27\0\17\4\1\133\1\134\1\135\1\136\13\4\27\0"+
    "\17\4\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\7\4\27\0\17\4\1\147\1\150\1\151\1\152"+
    "\1\153\1\154\1\155\1\156\7\4\27\0\17\4\1\157"+
    "\1\160\1\161\1\162\1\163\1\164\1\165\1\166\7\4"+
    "\27\0\17\4\1\167\1\170\1\171\1\172\1\173\1\174"+
    "\1\175\1\176\7\4\27\0\11\4\1\177\24\4\27\0"+
    "\33\4\1\200\2\4\27\0\5\4\1\201\30\4\27\0"+
    "\2\4\1\202\33\4\27\0\3\4\1\203\32\4\27\0"+
    "\2\4\1\204\33\4\27\0\2\4\1\205\33\4\27\0"+
    "\30\4\1\206\5\4\27\0\3\4\1\207\32\4\27\0"+
    "\16\4\1\210\17\4\27\0\17\4\1\211\1\212\1\213"+
    "\1\214\13\4\27\0\17\4\1\215\1\216\1\217\1\220"+
    "\1\221\1\222\1\223\1\224\7\4\27\0\17\4\1\225"+
    "\1\226\1\227\1\230\1\231\1\232\1\233\1\234\7\4"+
    "\27\0\17\4\1\235\1\236\1\237\1\240\1\241\1\242"+
    "\1\243\1\244\7\4\27\0\17\4\1\245\1\246\1\247"+
    "\1\250\1\251\1\252\1\253\1\254\7\4\27\0\10\4"+
    "\1\255\25\4\27\0\30\4\1\256\5\4\27\0\6\4"+
    "\1\257\27\4\27\0\31\4\1\260\4\4\27\0\31\4"+
    "\1\261\4\4\27\0\15\4\1\262\20\4\27\0\6\4"+
    "\1\263\27\4\27\0\10\4\1\264\25\4\27\0\7\4"+
    "\1\265\26\4\27\0\13\4\1\266\22\4\27\0\2\4"+
    "\1\267\33\4\27\0\27\4\1\270\6\4\27\0\3\4"+
    "\1\271\32\4\27\0\3\4\1\272\32\4\106\0\1\273"+
    "\2\0\1\47\1\274\1\130\62\47\3\0\5\4\1\275"+
    "\30\4\27\0\5\4\1\276\30\4\27\0\33\4\1\277"+
    "\2\4\27\0\10\4\1\300\25\4\27\0\10\4\1\301"+
    "\25\4\27\0\27\4\1\302\6\4\27\0\11\4\1\303"+
    "\24\4\27\0\3\4\1\304\32\4\27\0\2\4\1\305"+
    "\33\4\27\0\6\4\1\177\27\4\27\0\5\4\1\306"+
    "\30\4\27\0\7\4\1\307\26\4\27\0\30\4\1\310"+
    "\5\4\27\0\30\4\1\311\5\4\27\0\31\4\1\312"+
    "\4\4\27\0\6\4\1\270\27\4\27\0\27\4\1\313"+
    "\6\4\27\0\7\4\1\314\26\4\27\0\7\4\1\315"+
    "\1\4\1\316\24\4\27\0\16\4\1\317\17\4\27\0"+
    "\30\4\1\320\5\4\27\0\4\4\1\321\31\4\27\0"+
    "\30\4\1\322\5\4\27\0\7\4\1\323\26\4\27\0"+
    "\12\4\1\324\23\4\27\0\16\4\1\325\17\4\27\0"+
    "\15\4\1\326\20\4\27\0\6\4\1\327\27\4\27\0"+
    "\2\4\1\330\33\4\27\0\5\4\1\331\30\4\27\0"+
    "\31\4\1\332\4\4\27\0\11\4\1\333\24\4\27\0"+
    "\27\4\1\334\6\4\27\0\27\4\1\335\6\4\27\0"+
    "\5\4\1\336\30\4\27\0\6\4\1\337\27\4\27\0"+
    "\5\4\1\340\30\4\27\0\16\4\1\341\17\4\27\0"+
    "\7\4\1\342\26\4\27\0\34\4\1\343\1\4\27\0"+
    "\7\4\1\344\26\4\27\0\30\4\1\345\5\4\27\0"+
    "\16\4\1\346\17\4\27\0\10\4\1\347\25\4\27\0"+
    "\7\4\1\350\26\4\27\0\10\4\1\351\25\4\27\0"+
    "\2\4\1\352\33\4\27\0\31\4\1\353\4\4\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6042];
>>>>>>> origin/master
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
<<<<<<< HEAD
    "\1\0\1\11\25\1\14\11\6\1\2\0\44\1\1\11"+
    "\6\1\5\11\2\0\145\1\2\11\75\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
=======
    "\1\0\1\11\23\1\13\11\6\1\2\0\50\1\6\11"+
    "\2\0\142\1\2\11\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
>>>>>>> origin/master
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	int lineaActual=1;
	private static int actualEtq=0;
	
	public int linea(){ return yyline+1; }
	public int columna(){ return yycolumn+1; }
	
	private static String nuevaEtq(){
		return "etqL"+(++actualEtq);
	}

   	  private Symbol symbol(int type){
	  return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value){
	  return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
<<<<<<< HEAD
        case 67: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC3"));
          }
        case 144: break;
        case 106: 
          { return symbol(sym.PC5,new String("\tPORTCbits.RC5"));
          }
        case 145: break;
        case 57: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB0"));
          }
        case 146: break;
        case 4: 
          { return symbol(sym.CIRCUN);
          }
        case 147: break;
        case 123: 
          { return symbol(sym.CASO,nuevaEtq());
          }
        case 148: break;
        case 86: 
          { return symbol(sym.PA0,new String("\tPORTAbits.RA0"));
          }
        case 149: break;
        case 84: 
          { return symbol(sym.PE3,new String("\tPORTEbits.RE3"));
          }
        case 150: break;
        case 74: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD2"));
          }
        case 151: break;
        case 49: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA0"));
          }
        case 152: break;
        case 135: 
          { return symbol(sym.SWITCH);
          }
        case 153: break;
        case 113: 
          { return symbol(sym.PD4,new String("\tPORTDbits.RD4"));
          }
        case 154: break;
        case 61: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB5"));
          }
        case 155: break;
        case 37: 
          { return symbol(sym.OR);
          }
        case 156: break;
        case 8: 
          { return symbol(sym.LPAREN);
          }
        case 157: break;
        case 97: 
          { return symbol(sym.PB4,new String("\tPORTBbits.RB4"));
          }
        case 158: break;
        case 79: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD7"));
          }
        case 159: break;
        case 34: 
          { return  symbol(sym.DO);
          }
        case 160: break;
        case 53: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA5"));
          }
        case 161: break;
        case 90: 
          { return symbol(sym.PA5,new String("\tPORTAbits.RA5"));
          }
        case 162: break;
        case 128: 
          { return symbol(sym.ARRAY);
          }
        case 163: break;
        case 31: 
          { return symbol(sym.PB,new String("\tPORTB"));
          }
        case 164: break;
        case 28: 
          { return symbol(sym.NO);
          }
        case 165: break;
        case 131: 
          { return symbol(sym.WHILE ,nuevaEtq());
          }
        case 166: break;
        case 104: 
          { return symbol(sym.PC3,new String("\tPORTCbits.RC3"));
          }
        case 167: break;
        case 45: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE0"));
          }
        case 168: break;
        case 33: 
          { return symbol(sym.PD,new String("\tPORTD"));
          }
        case 169: break;
        case 14: 
          { return symbol(sym.MAS);
          }
        case 170: break;
        case 66: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC2"));
          }
        case 171: break;
        case 126: 
          { return symbol(sym.VOID,new String("\n\tvoid  "));
          }
        case 172: break;
        case 81: 
          { return symbol(sym.PE1,new String("\tPORTEbits.RE1"));
          }
        case 173: break;
        case 3: 
          { return symbol(sym.NUMERO, new Integer(yytext()));
          }
        case 174: break;
        case 72: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD1"));
          }
        case 175: break;
        case 71: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC7"));
          }
        case 176: break;
        case 111: 
          { return symbol(sym.PD2,new String("\tPORTDbits.RD2"));
          }
        case 177: break;
        case 95: 
          { return symbol(sym.PB2,new String("\tPORTBbits.RB2"));
          }
        case 178: break;
        case 80: 
          { return symbol(sym.AND);
          }
        case 179: break;
        case 43: 
          { return symbol(sym.NUMREAL);
          }
        case 180: break;
        case 12: 
          { return symbol(sym.COMA);
          }
        case 181: break;
        case 60: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB4"));
          }
        case 182: break;
        case 11: 
          { return symbol(sym.RLLAVE);
          }
        case 183: break;
        case 88: 
          { return symbol(sym.PA3,new String("\tPORTAbits.RA3"));
          }
        case 184: break;
        case 78: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD6"));
          }
        case 185: break;
        case 52: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA4"));
          }
        case 186: break;
        case 26: 
          { return symbol(sym.TO);
          }
        case 187: break;
        case 130: 
          { return symbol(sym.CICLO,new String("\n\n\tvoid loop()"));
          }
        case 188: break;
        case 101: 
          { return symbol(sym.PC1,new String("\tPORTCbits.RC1"));
          }
        case 189: break;
        case 23: 
          { return symbol(sym.TB,new String("\tTRISB"));
          }
        case 190: break;
        case 116: 
          { return symbol(sym.PD7,new String("\tPORTDbits.RD7"));
          }
        case 191: break;
        case 100: 
          { return symbol(sym.PB7,new String("\tPORTBbits.RB7"));
          }
        case 192: break;
        case 25: 
          { return symbol(sym.TD,new String("\tTRISD"));
          }
        case 193: break;
        case 27: 
          { return symbol(sym.SI,nuevaEtq());
          }
        case 194: break;
        case 133: 
          { return symbol(sym.TOGGLE,new String("!"));
          }
        case 195: break;
        case 15: 
          { return symbol(sym.MENOS);
          }
        case 196: break;
        case 64: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC1"));
          }
        case 197: break;
        case 17: 
          { return symbol(sym.MENOR);
          }
        case 198: break;
        case 110: 
          { return symbol(sym.PD0,new String("\tPORTDbits.RD0"));
          }
        case 199: break;
        case 94: 
          { return symbol(sym.PB0,new String("\tPORTBbits.RB0"));
          }
        case 200: break;
        case 107: 
          { return symbol(sym.PC6,new String("\tPORTCbits.RC6"));
          }
        case 201: break;
        case 73: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD0"));
          }
        case 202: break;
        case 70: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC6"));
          }
        case 203: break;
        case 1: 
          { System.out.println("Error léxico en línea "+lineaActual+":-"+yytext()+"-");
          }
        case 204: break;
        case 85: 
          { return symbol(sym.PA1,new String("\tPORTAbits.RA1"));
          }
        case 205: break;
        case 59: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB3"));
          }
        case 206: break;
        case 36: 
          { return symbol(sym.OF);
          }
        case 207: break;
        case 140: 
          { return symbol(sym.BOOLEAN);
          }
        case 208: break;
        case 40: 
          { return symbol(sym.RECBITSIZQ);
          }
        case 209: break;
        case 77: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD5"));
          }
        case 210: break;
        case 6: 
          { return symbol(sym.RCORCH);
          }
        case 211: break;
        case 10: 
          { return symbol(sym.LLLAVE);
          }
        case 212: break;
        case 51: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA3"));
          }
        case 213: break;
        case 114: 
          { return symbol(sym.PD5,new String("\tPORTDbits.RD5"));
          }
        case 214: break;
        case 98: 
          { return symbol(sym.PB5,new String("\tPORTBbits.RB5"));
          }
        case 215: break;
        case 139: 
          { return symbol(sym.POINTER);
          }
        case 216: break;
        case 91: 
          { return symbol(sym.PA6,new String("\tPORTAbits.RA6"));
          }
        case 217: break;
        case 7: 
          { return symbol(sym.DOSPUNTOS);
          }
        case 218: break;
        case 65: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC0"));
          }
        case 219: break;
        case 142: 
          { return symbol(sym.RETARDO,new String("\n\n\tvoid retardo(unsigned int i){for(;i>0;i--);}\n\n"));
          }
        case 220: break;
        case 105: 
          { return symbol(sym.PC4,new String("\tPORTCbits.RC4"));
          }
        case 221: break;
        case 47: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE3"));
          }
        case 222: break;
        case 69: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC5"));
          }
        case 223: break;
        case 129: 
=======
        case 64: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC3"));
          }
        case 138: break;
        case 104: 
          { return symbol(sym.PC5,new String("\tPORTCbits.RC5"));
          }
        case 139: break;
        case 39: 
          { return symbol(sym.DIFERENTE);
          }
        case 140: break;
        case 53: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB0"));
          }
        case 141: break;
        case 121: 
          { return symbol(sym.CASO,nuevaEtq());
          }
        case 142: break;
        case 83: 
          { return symbol(sym.PA0,new String("\tPORTAbits.RA0"));
          }
        case 143: break;
        case 82: 
          { return symbol(sym.PE3,new String("\tPORTEbits.RE3"));
          }
        case 144: break;
        case 71: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD2"));
          }
        case 145: break;
        case 45: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA0"));
          }
        case 146: break;
        case 132: 
          { return symbol(sym.SWITCH);
          }
        case 147: break;
        case 111: 
          { return symbol(sym.PD4,new String("\tPORTDbits.RD4"));
          }
        case 148: break;
        case 58: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB5"));
          }
        case 149: break;
        case 33: 
          { return symbol(sym.OR);
          }
        case 150: break;
        case 7: 
          { return symbol(sym.LPAREN);
          }
        case 151: break;
        case 95: 
          { return symbol(sym.PB4,new String("\tPORTBbits.RB4"));
          }
        case 152: break;
        case 76: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD7"));
          }
        case 153: break;
        case 31: 
          { return  symbol(sym.DO);
          }
        case 154: break;
        case 2: 
          { return symbol(sym.ID, new String(yytext()));
          }
        case 155: break;
        case 50: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA5"));
          }
        case 156: break;
        case 88: 
          { return symbol(sym.PA5,new String("\tPORTAbits.RA5"));
          }
        case 157: break;
        case 28: 
          { return symbol(sym.PB,new String("\tPORTB"));
          }
        case 158: break;
        case 25: 
          { return symbol(sym.NO);
          }
        case 159: break;
        case 128: 
          { return symbol(sym.WHILE ,nuevaEtq());
          }
        case 160: break;
        case 102: 
          { return symbol(sym.PC3,new String("\tPORTCbits.RC3"));
          }
        case 161: break;
        case 41: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE0"));
          }
        case 162: break;
        case 30: 
          { return symbol(sym.PD,new String("\tPORTD"));
          }
        case 163: break;
        case 13: 
          { return symbol(sym.MAS);
          }
        case 164: break;
        case 63: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC2"));
          }
        case 165: break;
        case 123: 
          { return symbol(sym.VOID,new String("\n\tvoid  "));
          }
        case 166: break;
        case 80: 
          { return symbol(sym.PE1,new String("\tPORTEbits.RE1"));
          }
        case 167: break;
        case 3: 
          { return symbol(sym.NUMERO, new Integer(yytext()));
          }
        case 168: break;
        case 70: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD1"));
          }
        case 169: break;
        case 68: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC7"));
          }
        case 170: break;
        case 117: 
          { return new Symbol(sym.CARACTER , new String(yytext()));
          }
        case 171: break;
        case 109: 
          { return symbol(sym.PD2,new String("\tPORTDbits.RD2"));
          }
        case 172: break;
        case 93: 
          { return symbol(sym.PB2,new String("\tPORTBbits.RB2"));
          }
        case 173: break;
        case 78: 
          { return symbol(sym.AND);
          }
        case 174: break;
        case 11: 
          { return symbol(sym.COMA);
          }
        case 175: break;
        case 57: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB4"));
          }
        case 176: break;
        case 10: 
          { return symbol(sym.RLLAVE);
          }
        case 177: break;
        case 86: 
          { return symbol(sym.PA3,new String("\tPORTAbits.RA3"));
          }
        case 178: break;
        case 75: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD6"));
          }
        case 179: break;
        case 49: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA4"));
          }
        case 180: break;
        case 127: 
          { return symbol(sym.CICLO,new String("\n\n\tvoid loop()"));
          }
        case 181: break;
        case 100: 
          { return symbol(sym.PC1,new String("\tPORTCbits.RC1"));
          }
        case 182: break;
        case 21: 
          { return symbol(sym.TB,new String("\tTRISB"));
          }
        case 183: break;
        case 114: 
          { return symbol(sym.PD7,new String("\tPORTDbits.RD7"));
          }
        case 184: break;
        case 98: 
          { return symbol(sym.PB7,new String("\tPORTBbits.RB7"));
          }
        case 185: break;
        case 23: 
          { return symbol(sym.TD,new String("\tTRISD"));
          }
        case 186: break;
        case 24: 
          { return symbol(sym.SI,nuevaEtq());
          }
        case 187: break;
        case 130: 
          { return symbol(sym.TOGGLE,new String("!"));
          }
        case 188: break;
        case 14: 
          { return symbol(sym.MENOS);
          }
        case 189: break;
        case 62: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC1"));
          }
        case 190: break;
        case 16: 
          { return symbol(sym.MENOR);
          }
        case 191: break;
        case 107: 
          { return symbol(sym.PD0,new String("\tPORTDbits.RD0"));
          }
        case 192: break;
        case 91: 
          { return symbol(sym.PB0,new String("\tPORTBbits.RB0"));
          }
        case 193: break;
        case 105: 
          { return symbol(sym.PC6,new String("\tPORTCbits.RC6"));
          }
        case 194: break;
        case 69: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD0"));
          }
        case 195: break;
        case 67: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC6"));
          }
        case 196: break;
        case 1: 
          { System.out.println("Error léxico en línea "+lineaActual+":-"+yytext()+"-");
          }
        case 197: break;
        case 84: 
          { return symbol(sym.PA1,new String("\tPORTAbits.RA1"));
          }
        case 198: break;
        case 56: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB3"));
          }
        case 199: break;
        case 32: 
          { return symbol(sym.OF);
          }
        case 200: break;
        case 135: 
          { return symbol(sym.BOOLEAN);
          }
        case 201: break;
        case 36: 
          { return symbol(sym.RECBITSIZQ);
          }
        case 202: break;
        case 74: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD5"));
          }
        case 203: break;
        case 5: 
          { return symbol(sym.RCORCH);
          }
        case 204: break;
        case 9: 
          { return symbol(sym.LLLAVE);
          }
        case 205: break;
        case 48: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA3"));
          }
        case 206: break;
        case 112: 
          { return symbol(sym.PD5,new String("\tPORTDbits.RD5"));
          }
        case 207: break;
        case 96: 
          { return symbol(sym.PB5,new String("\tPORTBbits.RB5"));
          }
        case 208: break;
        case 89: 
          { return symbol(sym.PA6,new String("\tPORTAbits.RA6"));
          }
        case 209: break;
        case 6: 
          { return symbol(sym.DOSPUNTOS);
          }
        case 210: break;
        case 61: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC0"));
          }
        case 211: break;
        case 137: 
          { return symbol(sym.RETARDO,new String("\n\n\tvoid retardo(unsigned int i){for(;i>0;i--);}\n\n"));
          }
        case 212: break;
        case 103: 
          { return symbol(sym.PC4,new String("\tPORTCbits.RC4"));
          }
        case 213: break;
        case 44: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE3"));
          }
        case 214: break;
        case 66: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC5"));
          }
        case 215: break;
        case 125: 
>>>>>>> origin/master
          { return symbol(sym.FUSES,new String("#include <xc.h>\n"
								                + "// CONFIG1\n" 
								                +"#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)\n" 
								                +"#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)\n"
								                +"#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)\n"
								                +"#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)\n" 
								                +"#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)\n"
								                +"#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)\n"
								                +"#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)\n" 
								                +"#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)\n"
								                +"#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)\n" 
								                +"#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)\n" 
								                +"\n" +"\n" +"\n" 
								                +"// CONFIG2\n"
								                +"\n"
								                +"#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)\n"
								                +"\n"
								                +"#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)\n\n\n\n"));
          }
<<<<<<< HEAD
        case 224: break;
        case 121: 
          { return symbol(sym.THEN);
          }
        case 225: break;
        case 83: 
          { return symbol(sym.PE2,new String("\tPORTEbits.RE2"));
          }
        case 226: break;
        case 30: 
          { return symbol(sym.PA,new String("\tPORTA"));
          }
        case 227: break;
        case 58: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB2"));
          }
        case 228: break;
        case 41: 
          { return symbol(sym.MENORIGUAL);
          }
        case 229: break;
        case 32: 
          { return symbol(sym.PC,new String("\tPORTC"));
          }
        case 230: break;
        case 112: 
          { return symbol(sym.PD3,new String("\tPORTDbits.RD3"));
          }
        case 231: break;
        case 136: 
          { return  symbol(sym.RETURN);
          }
        case 232: break;
        case 96: 
          { return symbol(sym.PB3,new String("\tPORTBbits.RB3"));
          }
        case 233: break;
        case 76: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD4"));
          }
        case 234: break;
        case 138: 
          { return symbol(sym.ENTRADA);
          }
        case 235: break;
        case 19: 
          { ;
          }
        case 236: break;
        case 42: 
          { return symbol(sym.IGUAL2);
          }
        case 237: break;
        case 29: 
          { return symbol(sym.PE,new String("\tPORTE"));
          }
        case 238: break;
        case 50: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA2"));
          }
        case 239: break;
        case 5: 
          { return symbol(sym.LCORCH);
          }
        case 240: break;
        case 16: 
          { return symbol(sym.MAYOR);
          }
        case 241: break;
        case 20: 
          { return symbol(sym.ID, yytext());
          }
        case 242: break;
        case 89: 
          { return symbol(sym.PA4,new String("\tPORTAbits.RA4"));
          }
        case 243: break;
        case 63: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB7"));
          }
        case 244: break;
        case 120: 
          { return symbol(sym.CTELOGICA);
          }
        case 245: break;
        case 124: 
          { return symbol(sym.CHAR);
          }
        case 246: break;
        case 118: 
          { return symbol(sym.TIPOVC);
          }
        case 247: break;
        case 127: 
          { return symbol(sym.SETUP,new String("\tvoid setup()"));
          }
        case 248: break;
        case 122: 
          { return symbol(sym.MAIN,new String("\n\n\tvoid main(void)"));
          }
        case 249: break;
        case 55: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA7"));
          }
        case 250: break;
        case 103: 
          { return symbol(sym.PC2,new String("\tPORTCbits.RC2"));
          }
        case 251: break;
        case 13: 
          { return symbol(sym.PCOMA);
          }
        case 252: break;
        case 119: 
          { return symbol(sym.CARACTER);
          }
        case 253: break;
        case 82: 
          { return symbol(sym.PE0,new String("\tPORTEbits.RE0"));
          }
        case 254: break;
        case 46: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE2"));
          }
        case 255: break;
        case 68: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC4"));
          }
        case 256: break;
        case 22: 
          { return symbol(sym.TA,new String("\tTRISA"));
          }
        case 257: break;
        case 2: 
          { return symbol(sym.NMETODO, new String(yytext()));
          }
        case 258: break;
        case 35: 
          { return symbol(sym.BINARIO);
          }
        case 259: break;
        case 109: 
          { return symbol(sym.PD1,new String("\tPORTDbits.RD1"));
          }
        case 260: break;
        case 93: 
          { return symbol(sym.PB1,new String("\tPORTBbits.RB1"));
          }
        case 261: break;
        case 125: 
          { return symbol(sym.REAL);
          }
        case 262: break;
        case 38: 
          { return symbol(sym.RECBITSDER);
          }
        case 263: break;
        case 56: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB1"));
          }
        case 264: break;
        case 108: 
          { return symbol(sym.PC7,new String("\tPORTCbits.RC7"));
          }
        case 265: break;
        case 24: 
          { return symbol(sym.TC,new String("\tTRISC"));
          }
        case 266: break;
        case 18: 
          { return symbol(sym.IGUAL);
          }
        case 267: break;
        case 141: 
          { return symbol(sym.OTHERWISE);
          }
        case 268: break;
        case 75: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD3"));
          }
        case 269: break;
        case 117: 
          { return symbol(sym.FIN);
          }
        case 270: break;
        case 87: 
          { return symbol(sym.PA2,new String("\tPORTAbits.RA2"));
          }
        case 271: break;
        case 21: 
          { return symbol(sym.TE,new String("\tTRISE"));
          }
        case 272: break;
        case 9: 
          { return symbol(sym.RPAREN);
          }
        case 273: break;
        case 48: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA1"));
          }
        case 274: break;
        case 134: 
          { return symbol(sym.SALIDA);
          }
        case 275: break;
        case 62: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB6"));
          }
        case 276: break;
        case 102: 
          { return symbol(sym.PC0,new String("\tPORTCbits.RC0"));
          }
        case 277: break;
        case 115: 
          { return symbol(sym.PD6,new String("\tPORTDbits.RD6"));
          }
        case 278: break;
        case 143: 
          { return symbol(sym.CADENA, new String(yytext()));
          }
        case 279: break;
        case 99: 
          { return symbol(sym.PB6,new String("\tPORTBbits.RB6"));
          }
        case 280: break;
        case 54: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA6"));
          }
        case 281: break;
        case 39: 
          { return symbol(sym.MAYORIGUAL);
          }
        case 282: break;
        case 137: 
          { return symbol(sym.INTEGER);
          }
        case 283: break;
        case 92: 
          { return symbol(sym.PA7,new String("\tPORTAbits.RA7"));
          }
        case 284: break;
        case 132: 
          { return symbol(sym.CHALE,new String("\t\tretardo"));
          }
        case 285: break;
        case 44: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE1"));
          }
        case 286: break;
=======
        case 216: break;
        case 119: 
          { return symbol(sym.THEN);
          }
        case 217: break;
        case 81: 
          { return symbol(sym.PE2,new String("\tPORTEbits.RE2"));
          }
        case 218: break;
        case 27: 
          { return symbol(sym.PA,new String("\tPORTA"));
          }
        case 219: break;
        case 55: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB2"));
          }
        case 220: break;
        case 37: 
          { return symbol(sym.MENORIGUAL);
          }
        case 221: break;
        case 29: 
          { return symbol(sym.PC,new String("\tPORTC"));
          }
        case 222: break;
        case 110: 
          { return symbol(sym.PD3,new String("\tPORTDbits.RD3"));
          }
        case 223: break;
        case 133: 
          { return  symbol(sym.RETURN);
          }
        case 224: break;
        case 94: 
          { return symbol(sym.PB3,new String("\tPORTBbits.RB3"));
          }
        case 225: break;
        case 73: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD4"));
          }
        case 226: break;
        case 134: 
          { return symbol(sym.ENTRADA);
          }
        case 227: break;
        case 18: 
          { ;
          }
        case 228: break;
        case 38: 
          { return symbol(sym.IGUAL2);
          }
        case 229: break;
        case 118: 
          { return symbol(sym.CTELOGICA,new String(yytext()));
          }
        case 230: break;
        case 26: 
          { return symbol(sym.PE,new String("\tPORTE"));
          }
        case 231: break;
        case 47: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA2"));
          }
        case 232: break;
        case 4: 
          { return symbol(sym.LCORCH);
          }
        case 233: break;
        case 15: 
          { return symbol(sym.MAYOR);
          }
        case 234: break;
        case 87: 
          { return symbol(sym.PA4,new String("\tPORTAbits.RA4"));
          }
        case 235: break;
        case 60: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB7"));
          }
        case 236: break;
        case 122: 
          { return symbol(sym.CHAR);
          }
        case 237: break;
        case 116: 
          { return symbol(sym.TIPOVC);
          }
        case 238: break;
        case 124: 
          { return symbol(sym.SETUP,new String("\tvoid setup()"));
          }
        case 239: break;
        case 120: 
          { return symbol(sym.MAIN,new String("\n\n\tvoid main(void)"));
          }
        case 240: break;
        case 52: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA7"));
          }
        case 241: break;
        case 101: 
          { return symbol(sym.PC2,new String("\tPORTCbits.RC2"));
          }
        case 242: break;
        case 12: 
          { return symbol(sym.PCOMA);
          }
        case 243: break;
        case 40: 
          { return symbol(sym.NUMREAL,new Float(yytext()));
          }
        case 244: break;
        case 79: 
          { return symbol(sym.PE0,new String("\tPORTEbits.RE0"));
          }
        case 245: break;
        case 43: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE2"));
          }
        case 246: break;
        case 65: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC4"));
          }
        case 247: break;
        case 20: 
          { return symbol(sym.TA,new String("\tTRISA"));
          }
        case 248: break;
        case 108: 
          { return symbol(sym.PD1,new String("\tPORTDbits.RD1"));
          }
        case 249: break;
        case 92: 
          { return symbol(sym.PB1,new String("\tPORTBbits.RB1"));
          }
        case 250: break;
        case 126: 
          { return symbol(sym.REAL);
          }
        case 251: break;
        case 34: 
          { return symbol(sym.RECBITSDER);
          }
        case 252: break;
        case 54: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB1"));
          }
        case 253: break;
        case 106: 
          { return symbol(sym.PC7,new String("\tPORTCbits.RC7"));
          }
        case 254: break;
        case 22: 
          { return symbol(sym.TC,new String("\tTRISC"));
          }
        case 255: break;
        case 17: 
          { return symbol(sym.IGUAL);
          }
        case 256: break;
        case 136: 
          { return symbol(sym.OTHERWISE);
          }
        case 257: break;
        case 72: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD3"));
          }
        case 258: break;
        case 115: 
          { return symbol(sym.FIN);
          }
        case 259: break;
        case 85: 
          { return symbol(sym.PA2,new String("\tPORTAbits.RA2"));
          }
        case 260: break;
        case 19: 
          { return symbol(sym.TE,new String("\tTRISE"));
          }
        case 261: break;
        case 8: 
          { return symbol(sym.RPAREN);
          }
        case 262: break;
        case 46: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA1"));
          }
        case 263: break;
        case 131: 
          { return symbol(sym.SALIDA);
          }
        case 264: break;
        case 59: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB6"));
          }
        case 265: break;
        case 99: 
          { return symbol(sym.PC0,new String("\tPORTCbits.RC0"));
          }
        case 266: break;
        case 113: 
          { return symbol(sym.PD6,new String("\tPORTDbits.RD6"));
          }
        case 267: break;
        case 97: 
          { return symbol(sym.PB6,new String("\tPORTBbits.RB6"));
          }
        case 268: break;
        case 51: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA6"));
          }
        case 269: break;
        case 35: 
          { return symbol(sym.MAYORIGUAL);
          }
        case 270: break;
        case 77: 
          { return symbol(sym.INTEGER);
          }
        case 271: break;
        case 90: 
          { return symbol(sym.PA7,new String("\tPORTAbits.RA7"));
          }
        case 272: break;
        case 129: 
          { return symbol(sym.CHALE,new String("\t\tretardo"));
          }
        case 273: break;
        case 42: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE1"));
          }
        case 274: break;
>>>>>>> origin/master
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
