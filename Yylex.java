/* The following code was generated by JFlex 1.6.0 */
import java_cup.runtime.Symbol;
/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>/Users/Alejandro/NewDesktop/mapic/mapic.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\106\1\110\1\102\1\103\1\103\1\102\16\106\4\0\1\110\3\0"+
    "\1\105\2\0\1\101\1\61\1\62\1\0\1\67\1\65\1\70\1\100"+
    "\1\0\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\2\2"+
    "\1\60\1\66\1\72\1\73\1\71\2\0\1\21\1\22\1\23\1\24"+
    "\1\25\1\16\1\75\1\1\1\41\2\1\1\40\1\7\1\36\1\53"+
    "\1\20\1\1\1\37\1\10\1\3\1\74\1\47\4\1\1\56\1\0"+
    "\1\57\1\55\1\1\1\0\1\11\1\1\1\45\1\43\1\6\1\54"+
    "\1\50\1\51\1\4\2\1\1\46\1\5\1\12\1\44\1\15\1\1"+
    "\1\42\1\17\1\13\1\14\1\1\1\52\1\1\1\76\1\1\1\63"+
    "\1\0\1\64\1\0\6\106\1\104\32\106\2\0\4\105\4\0\1\105"+
    "\2\0\1\106\7\0\1\105\4\0\1\105\5\0\27\105\1\0\37\105"+
    "\1\0\u01ca\105\4\0\14\105\16\0\5\105\7\0\1\105\1\0\1\105"+
    "\21\0\160\106\5\105\1\0\2\105\2\0\4\105\10\0\1\105\1\0"+
    "\3\105\1\0\1\105\1\0\24\105\1\0\123\105\1\0\213\105\1\0"+
    "\5\106\2\0\236\105\11\0\46\105\2\0\1\105\7\0\47\105\7\0"+
    "\1\105\1\0\55\106\1\0\1\106\1\0\2\106\1\0\2\106\1\0"+
    "\1\106\10\0\33\105\5\0\3\105\15\0\5\106\6\0\1\105\4\0"+
    "\13\106\5\0\53\105\25\106\12\107\4\0\2\105\1\106\143\105\1\0"+
    "\1\105\10\106\1\0\6\106\2\105\2\106\1\0\4\106\2\105\12\107"+
    "\3\105\2\0\1\105\17\0\1\106\1\105\1\106\36\105\33\106\2\0"+
    "\131\105\13\106\1\105\16\0\12\107\41\105\11\106\2\105\4\0\1\105"+
    "\5\0\26\105\4\106\1\105\11\106\1\105\3\106\1\105\5\106\22\0"+
    "\31\105\3\106\104\0\1\105\1\0\13\105\67\0\33\106\1\0\4\106"+
    "\66\105\3\106\1\105\22\106\1\105\7\106\12\105\2\106\2\0\12\107"+
    "\1\0\7\105\1\0\7\105\1\0\3\106\1\0\10\105\2\0\2\105"+
    "\2\0\26\105\1\0\7\105\1\0\1\105\3\0\4\105\2\0\1\106"+
    "\1\105\7\106\2\0\2\106\2\0\3\106\1\105\10\0\1\106\4\0"+
    "\2\105\1\0\3\105\2\106\2\0\12\107\4\105\7\0\1\105\5\0"+
    "\3\106\1\0\6\105\4\0\2\105\2\0\26\105\1\0\7\105\1\0"+
    "\2\105\1\0\2\105\1\0\2\105\2\0\1\106\1\0\5\106\4\0"+
    "\2\106\2\0\3\106\3\0\1\106\7\0\4\105\1\0\1\105\7\0"+
    "\12\107\2\106\3\105\1\106\13\0\3\106\1\0\11\105\1\0\3\105"+
    "\1\0\26\105\1\0\7\105\1\0\2\105\1\0\5\105\2\0\1\106"+
    "\1\105\10\106\1\0\3\106\1\0\3\106\2\0\1\105\17\0\2\105"+
    "\2\106\2\0\12\107\1\0\1\105\17\0\3\106\1\0\10\105\2\0"+
    "\2\105\2\0\26\105\1\0\7\105\1\0\2\105\1\0\5\105\2\0"+
    "\1\106\1\105\7\106\2\0\2\106\2\0\3\106\10\0\2\106\4\0"+
    "\2\105\1\0\3\105\2\106\2\0\12\107\1\0\1\105\20\0\1\106"+
    "\1\105\1\0\6\105\3\0\3\105\1\0\4\105\3\0\2\105\1\0"+
    "\1\105\1\0\2\105\3\0\2\105\3\0\3\105\3\0\14\105\4\0"+
    "\5\106\3\0\3\106\1\0\4\106\2\0\1\105\6\0\1\106\16\0"+
    "\12\107\11\0\1\105\7\0\3\106\1\0\10\105\1\0\3\105\1\0"+
    "\27\105\1\0\12\105\1\0\5\105\3\0\1\105\7\106\1\0\3\106"+
    "\1\0\4\106\7\0\2\106\1\0\2\105\6\0\2\105\2\106\2\0"+
    "\12\107\22\0\2\106\1\0\10\105\1\0\3\105\1\0\27\105\1\0"+
    "\12\105\1\0\5\105\2\0\1\106\1\105\7\106\1\0\3\106\1\0"+
    "\4\106\7\0\2\106\7\0\1\105\1\0\2\105\2\106\2\0\12\107"+
    "\1\0\2\105\17\0\2\106\1\0\10\105\1\0\3\105\1\0\51\105"+
    "\2\0\1\105\7\106\1\0\3\106\1\0\4\106\1\105\10\0\1\106"+
    "\10\0\2\105\2\106\2\0\12\107\12\0\6\105\2\0\2\106\1\0"+
    "\22\105\3\0\30\105\1\0\11\105\1\0\1\105\2\0\7\105\3\0"+
    "\1\106\4\0\6\106\1\0\1\106\1\0\10\106\6\0\12\77\2\0"+
    "\2\106\15\0\60\105\1\106\2\105\7\106\4\0\10\105\10\106\1\0"+
    "\12\107\47\0\2\105\1\0\1\105\2\0\2\105\1\0\1\105\2\0"+
    "\1\105\6\0\4\105\1\0\7\105\1\0\3\105\1\0\1\105\1\0"+
    "\1\105\2\0\2\105\1\0\4\105\1\106\2\105\6\106\1\0\2\106"+
    "\1\105\2\0\5\105\1\0\1\105\1\0\6\106\2\0\12\107\2\0"+
    "\4\105\40\0\1\105\27\0\2\106\6\0\12\107\13\0\1\106\1\0"+
    "\1\106\1\0\1\106\4\0\2\106\10\105\1\0\44\105\4\0\24\106"+
    "\1\0\2\106\5\105\13\106\1\0\44\106\11\0\1\106\71\0\53\105"+
    "\24\106\1\105\12\107\6\0\6\105\4\106\4\105\3\106\1\105\3\106"+
    "\2\105\7\106\3\105\4\106\15\105\14\106\1\105\1\106\12\107\4\106"+
    "\2\0\46\105\1\0\1\105\5\0\1\105\2\0\53\105\1\0\u014d\105"+
    "\1\0\4\105\2\0\7\105\1\0\1\105\1\0\4\105\2\0\51\105"+
    "\1\0\4\105\2\0\41\105\1\0\4\105\2\0\7\105\1\0\1\105"+
    "\1\0\4\105\2\0\17\105\1\0\71\105\1\0\4\105\2\0\103\105"+
    "\2\0\3\106\40\0\20\105\20\0\125\105\14\0\u026c\105\2\0\21\105"+
    "\1\0\32\105\5\0\113\105\3\0\3\105\17\0\15\105\1\0\4\105"+
    "\3\106\13\0\22\105\3\106\13\0\22\105\2\106\14\0\15\105\1\0"+
    "\3\105\1\0\2\106\14\0\64\105\40\106\3\0\1\105\3\0\2\105"+
    "\1\106\2\0\12\107\41\0\3\106\2\0\12\107\6\0\130\105\10\0"+
    "\51\105\1\106\1\105\5\0\106\105\12\0\35\105\3\0\14\106\4\0"+
    "\14\106\12\0\12\107\36\105\2\0\5\105\13\0\54\105\4\0\21\106"+
    "\7\105\2\106\6\0\12\107\46\0\27\105\5\106\4\0\65\105\12\106"+
    "\1\0\35\106\2\0\1\106\12\107\6\0\12\107\15\0\1\105\130\0"+
    "\5\106\57\105\21\106\7\105\4\0\12\107\21\0\11\106\14\0\3\106"+
    "\36\105\15\106\2\105\12\107\54\105\16\106\14\0\44\105\24\106\10\0"+
    "\12\107\3\0\3\105\12\107\44\105\122\0\3\106\1\0\25\106\4\105"+
    "\1\106\4\105\3\106\2\105\11\0\300\105\47\106\25\0\4\106\u0116\105"+
    "\2\0\6\105\2\0\46\105\2\0\6\105\2\0\10\105\1\0\1\105"+
    "\1\0\1\105\1\0\1\105\1\0\37\105\2\0\65\105\1\0\7\105"+
    "\1\0\1\105\3\0\3\105\1\0\7\105\3\0\4\105\2\0\6\105"+
    "\4\0\15\105\5\0\3\105\1\0\7\105\16\0\5\106\30\0\1\103"+
    "\1\103\5\106\20\0\2\105\23\0\1\105\13\0\5\106\5\0\6\106"+
    "\1\0\1\105\15\0\1\105\20\0\15\105\3\0\33\105\25\0\15\106"+
    "\4\0\1\106\3\0\14\106\21\0\1\105\4\0\1\105\2\0\12\105"+
    "\1\0\1\105\3\0\5\105\6\0\1\105\1\0\1\105\1\0\1\105"+
    "\1\0\4\105\1\0\13\105\2\0\4\105\5\0\5\105\4\0\1\105"+
    "\21\0\51\105\u0a77\0\57\105\1\0\57\105\1\0\205\105\6\0\4\105"+
    "\3\106\2\105\14\0\46\105\1\0\1\105\5\0\1\105\2\0\70\105"+
    "\7\0\1\105\17\0\1\106\27\105\11\0\7\105\1\0\7\105\1\0"+
    "\7\105\1\0\7\105\1\0\7\105\1\0\7\105\1\0\7\105\1\0"+
    "\7\105\1\0\40\106\57\0\1\105\u01d5\0\3\105\31\0\11\105\6\106"+
    "\1\0\5\105\2\0\5\105\4\0\126\105\2\0\2\106\2\0\3\105"+
    "\1\0\132\105\1\0\4\105\5\0\51\105\3\0\136\105\21\0\33\105"+
    "\65\0\20\105\u0200\0\u19b6\105\112\0\u51cd\105\63\0\u048d\105\103\0\56\105"+
    "\2\0\u010d\105\3\0\20\105\12\107\2\105\24\0\57\105\1\106\4\0"+
    "\12\106\1\0\31\105\7\0\1\106\120\105\2\106\45\0\11\105\2\0"+
    "\147\105\2\0\4\105\1\0\4\105\14\0\13\105\115\0\12\105\1\106"+
    "\3\105\1\106\4\105\1\106\27\105\5\106\20\0\1\105\7\0\64\105"+
    "\14\0\2\106\62\105\21\106\13\0\12\107\6\0\22\106\6\105\3\0"+
    "\1\105\4\0\12\107\34\105\10\106\2\0\27\105\15\106\14\0\35\105"+
    "\3\0\4\106\57\105\16\106\16\0\1\105\12\107\26\0\12\77\6\0"+
    "\51\105\16\106\11\0\3\105\1\106\10\105\2\106\2\0\12\107\6\0"+
    "\27\105\3\0\1\105\1\106\4\0\60\105\1\106\1\105\3\106\2\105"+
    "\2\106\5\105\2\106\1\105\1\106\1\105\30\0\3\105\2\0\13\105"+
    "\5\106\2\0\3\105\2\106\12\0\6\105\2\0\6\105\2\0\6\105"+
    "\11\0\7\105\1\0\7\105\221\0\43\105\10\106\1\0\2\106\2\0"+
    "\12\107\6\0\u2ba4\105\14\0\27\105\4\0\61\105\u2104\0\u016e\105\2\0"+
    "\152\105\46\0\7\105\14\0\5\105\5\0\1\105\1\106\12\105\1\0"+
    "\15\105\1\0\5\105\1\0\1\105\1\0\2\105\1\0\2\105\1\0"+
    "\154\105\41\0\u016b\105\22\0\100\105\2\0\66\105\50\0\15\105\3\0"+
    "\20\106\20\0\7\106\14\0\2\105\30\0\3\105\31\0\1\105\6\0"+
    "\5\105\1\0\207\105\2\0\1\106\4\0\1\105\13\0\12\107\7\0"+
    "\32\105\4\0\1\105\1\0\32\105\13\0\131\105\3\0\6\105\2\0"+
    "\6\105\2\0\6\105\2\0\3\105\3\0\2\105\3\0\2\105\22\0"+
    "\3\106\4\0\14\105\1\0\32\105\1\0\23\105\1\0\2\105\1\0"+
    "\17\105\2\0\16\105\42\0\173\105\105\0\65\105\210\0\1\106\202\0"+
    "\35\105\3\0\61\105\57\0\37\105\21\0\33\105\65\0\36\105\2\0"+
    "\44\105\4\0\10\105\1\0\5\105\52\0\236\105\2\0\12\107\u0356\0"+
    "\6\105\2\0\1\105\1\0\54\105\1\0\2\105\3\0\1\105\2\0"+
    "\27\105\252\0\26\105\12\0\32\105\106\0\70\105\6\0\2\105\100\0"+
    "\1\105\3\106\1\0\2\106\5\0\4\106\4\105\1\0\3\105\1\0"+
    "\33\105\4\0\3\106\4\0\1\106\40\0\35\105\203\0\66\105\12\0"+
    "\26\105\12\0\23\105\215\0\111\105\u03b7\0\3\106\65\105\17\106\37\0"+
    "\12\107\20\0\3\106\55\105\13\106\2\0\1\106\22\0\31\105\7\0"+
    "\12\107\6\0\3\106\44\105\16\106\1\0\12\107\100\0\3\106\60\105"+
    "\16\106\4\105\13\0\12\107\u0116\0\12\77\u01d6\0\12\77\u0176\0\12\77"+
    "\46\0\53\105\15\106\10\0\12\107\u0216\0\12\77\u0716\0\u036f\105\221\0"+
    "\143\105\u0b9d\0\u042f\105\u33d1\0\u0239\105\47\0\12\77\346\0\12\77\u03a6\0"+
    "\105\105\13\0\1\105\56\106\20\0\4\106\15\105\u4060\0\2\105\u2163\0"+
    "\5\106\3\0\26\106\2\0\7\106\36\0\4\106\224\0\3\106\u01bb\0"+
    "\125\105\1\0\107\105\1\0\2\105\2\0\1\105\2\0\2\105\2\0"+
    "\4\105\1\0\14\105\1\0\1\105\1\0\7\105\1\0\101\105\1\0"+
    "\4\105\2\0\10\105\1\0\7\105\1\0\34\105\1\0\4\105\1\0"+
    "\5\105\1\0\1\105\3\0\7\105\1\0\u0154\105\2\0\31\105\1\0"+
    "\31\105\1\0\37\105\1\0\31\105\1\0\37\105\1\0\31\105\1\0"+
    "\37\105\1\0\31\105\1\0\37\105\1\0\31\105\1\0\10\105\2\0"+
    "\62\107\u1600\0\4\105\1\0\33\105\1\0\2\105\1\0\1\105\2\0"+
    "\1\105\1\0\12\105\1\0\4\105\1\0\1\105\1\0\1\105\6\0"+
    "\1\105\4\0\1\105\1\0\1\105\1\0\1\105\1\0\3\105\1\0"+
    "\2\105\1\0\1\105\2\0\1\105\1\0\1\105\1\0\1\105\1\0"+
    "\1\105\1\0\1\105\1\0\2\105\1\0\1\105\2\0\4\105\1\0"+
    "\7\105\1\0\4\105\1\0\4\105\1\0\1\105\1\0\12\105\1\0"+
    "\21\105\5\0\3\105\1\0\5\105\1\0\21\105\u1144\0\ua6d7\105\51\0"+
    "\u1035\105\13\0\336\105\u3fe2\0\u021e\105\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\106\36\0\140\106\200\0\360\106\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\22\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\1\1\23\1\24\1\0"+
    "\1\2\1\25\1\26\1\27\1\30\1\31\1\2\1\32"+
    "\2\2\1\33\6\2\1\34\1\35\1\36\1\37\1\40"+
    "\10\2\1\41\1\2\1\42\6\2\1\43\1\44\1\45"+
    "\1\46\1\47\1\0\1\50\1\2\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\6\2\1\115\3\2\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151"+
    "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
    "\1\2\1\162\13\2\1\163\2\2\1\164\1\2\1\165"+
    "\1\2\1\166\1\167\10\2\1\170\1\171\1\2\1\172"+
    "\3\2\1\173\3\2\1\174\1\2\1\175\2\2\1\176"+
    "\1\2\1\177\4\2\1\200\1\201\1\202\1\203\1\204"+
    "\6\2\1\205\1\206\1\207\1\210\1\211\1\212";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3"+
    "\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb"+
    "\0\u0a44\0\u0a8d\0\u0ad6\0\222\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa"+
    "\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42"+
    "\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\222"+
    "\0\u108a\0\222\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240"+
    "\0\222\0\222\0\111\0\111\0\111\0\u1289\0\u07fc\0\u12d2"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\u131b\0\u1364\0\u13ad\0\u13f6"+
    "\0\u143f\0\u1488\0\222\0\u14d1\0\u151a\0\u1563\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\u15ac\0\222\0\u15f5\0\u163e\0\u1687\0\u16d0"+
    "\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\222"+
    "\0\u1918\0\u1961\0\111\0\u19aa\0\222\0\u19f3\0\222\0\222"+
    "\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b"+
    "\0\222\0\222\0\u1c84\0\222\0\u1ccd\0\u1d16\0\u1d5f\0\222"+
    "\0\u1da8\0\u1df1\0\u1e3a\0\222\0\u1e83\0\222\0\u1ecc\0\u1f15"+
    "\0\222\0\u1f5e\0\222\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\222"+
    "\0\222\0\222\0\222\0\222\0\u20cb\0\u2114\0\u215d\0\u21a6"+
    "\0\u21ef\0\u2238\0\222\0\222\0\222\0\222\0\222\0\222";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\3\3\1\6\1\7\5\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\10\4\1\20\1\21\1\3\1\22\1\3\1\23\3\3"+
    "\1\24\2\3\1\25\1\26\1\3\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\3\3\1\4\1\2\1\46"+
    "\1\47\2\0\1\50\1\2\1\4\1\47\112\0\54\3"+
    "\17\0\3\3\5\0\4\50\3\0\1\4\23\0\10\4"+
    "\41\0\1\4\1\51\6\0\1\4\2\0\3\3\1\52"+
    "\14\3\1\53\1\54\1\55\1\56\1\57\11\3\1\60"+
    "\4\3\1\61\4\3\1\62\3\3\17\0\3\3\5\0"+
    "\4\50\2\0\10\3\1\63\43\3\17\0\3\3\5\0"+
    "\4\50\2\0\3\3\1\64\1\3\1\65\12\3\1\66"+
    "\33\3\17\0\3\3\5\0\4\50\2\0\3\3\1\67"+
    "\7\3\1\70\4\3\1\71\33\3\17\0\3\3\5\0"+
    "\4\50\2\0\51\3\1\72\2\3\17\0\3\3\5\0"+
    "\4\50\2\0\20\3\1\73\1\74\1\75\1\76\1\77"+
    "\16\3\1\100\10\3\17\0\3\3\5\0\4\50\2\0"+
    "\35\3\1\101\3\3\1\102\12\3\17\0\3\3\5\0"+
    "\4\50\2\0\43\3\1\103\10\3\17\0\3\3\5\0"+
    "\4\50\2\0\3\3\1\104\4\3\1\105\32\3\1\106"+
    "\4\3\1\107\3\3\17\0\3\3\5\0\4\50\2\0"+
    "\43\3\1\110\10\3\17\0\3\3\5\0\4\50\2\0"+
    "\35\3\1\111\16\3\17\0\3\3\5\0\4\50\2\0"+
    "\43\3\1\112\10\3\17\0\3\3\5\0\4\50\2\0"+
    "\5\3\1\113\46\3\17\0\3\3\5\0\4\50\2\0"+
    "\35\3\1\114\16\3\17\0\3\3\5\0\4\50\2\0"+
    "\5\3\1\115\46\3\17\0\3\3\5\0\4\50\2\0"+
    "\10\3\1\116\32\3\1\117\10\3\17\0\3\3\5\0"+
    "\4\50\2\0\50\3\1\120\3\3\17\0\3\3\5\0"+
    "\4\50\2\0\36\3\1\121\14\3\1\122\17\0\3\3"+
    "\5\0\4\50\74\0\1\123\110\0\1\124\110\0\1\125"+
    "\15\0\102\126\3\0\4\126\102\0\1\47\5\0\1\47"+
    "\1\0\54\50\17\0\3\50\5\0\4\50\3\0\1\127"+
    "\23\0\10\127\41\0\1\127\7\0\1\127\2\0\4\3"+
    "\1\130\47\3\17\0\3\3\5\0\4\50\2\0\25\3"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\17\3\17\0\3\3\5\0\4\50\2\0\25\3\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\1\150\17\3"+
    "\17\0\3\3\5\0\4\50\2\0\25\3\1\151\1\152"+
    "\1\153\1\154\1\155\1\156\1\157\1\160\17\3\17\0"+
    "\3\3\5\0\4\50\2\0\25\3\1\161\1\162\1\163"+
    "\1\164\1\165\1\166\1\167\1\170\17\3\17\0\3\3"+
    "\5\0\4\50\2\0\25\3\1\171\1\172\1\173\1\174"+
    "\23\3\17\0\3\3\5\0\4\50\2\0\54\3\17\0"+
    "\1\175\2\3\5\0\4\50\2\0\47\3\1\176\4\3"+
    "\17\0\3\3\5\0\4\50\2\0\5\3\1\177\46\3"+
    "\17\0\3\3\5\0\4\50\2\0\3\3\1\200\50\3"+
    "\17\0\3\3\5\0\4\50\2\0\12\3\1\201\41\3"+
    "\17\0\3\3\5\0\4\50\2\0\37\3\1\202\14\3"+
    "\17\0\3\3\5\0\4\50\2\0\11\3\1\203\42\3"+
    "\17\0\3\3\5\0\4\50\2\0\16\3\1\204\35\3"+
    "\17\0\3\3\5\0\4\50\2\0\37\3\1\205\14\3"+
    "\17\0\3\3\5\0\4\50\2\0\3\3\1\206\50\3"+
    "\17\0\3\3\5\0\4\50\2\0\25\3\1\207\1\210"+
    "\1\211\1\212\1\213\1\214\1\215\1\216\17\3\17\0"+
    "\3\3\5\0\4\50\2\0\25\3\1\217\1\220\1\221"+
    "\1\222\1\223\1\224\1\225\1\226\17\3\17\0\3\3"+
    "\5\0\4\50\2\0\25\3\1\227\1\230\1\231\1\232"+
    "\1\233\1\234\1\235\1\236\17\3\17\0\3\3\5\0"+
    "\4\50\2\0\25\3\1\237\1\240\1\241\1\242\1\243"+
    "\1\244\1\245\1\246\17\3\17\0\3\3\5\0\4\50"+
    "\2\0\25\3\1\247\1\250\1\251\1\252\23\3\17\0"+
    "\3\3\5\0\4\50\2\0\3\3\1\253\50\3\17\0"+
    "\3\3\5\0\4\50\2\0\23\3\1\254\30\3\17\0"+
    "\3\3\5\0\4\50\2\0\41\3\1\255\12\3\17\0"+
    "\3\3\5\0\4\50\2\0\43\3\1\256\10\3\17\0"+
    "\3\3\5\0\4\50\2\0\44\3\1\257\7\3\17\0"+
    "\3\3\5\0\4\50\2\0\16\3\1\260\35\3\17\0"+
    "\3\3\5\0\4\50\2\0\11\3\1\261\42\3\17\0"+
    "\3\3\5\0\4\50\2\0\10\3\1\262\43\3\17\0"+
    "\3\3\5\0\4\50\2\0\2\3\1\263\51\3\17\0"+
    "\3\3\5\0\4\50\2\0\10\3\1\264\1\3\1\265"+
    "\41\3\17\0\3\3\5\0\4\50\2\0\2\3\1\266"+
    "\51\3\17\0\3\3\5\0\4\50\2\0\53\3\1\267"+
    "\17\0\3\3\5\0\4\50\2\0\41\3\1\270\12\3"+
    "\17\0\3\3\5\0\4\50\2\0\3\3\1\271\50\3"+
    "\17\0\3\3\5\0\4\50\2\0\3\3\1\272\50\3"+
    "\17\0\3\3\5\0\4\50\102\0\1\273\10\0\5\3"+
    "\1\274\46\3\17\0\3\3\5\0\4\50\2\0\24\3"+
    "\1\275\27\3\17\0\3\3\5\0\4\50\2\0\47\3"+
    "\1\276\4\3\17\0\3\3\5\0\4\50\2\0\11\3"+
    "\1\277\42\3\17\0\3\3\5\0\4\50\2\0\11\3"+
    "\1\300\42\3\17\0\3\3\5\0\4\50\2\0\13\3"+
    "\1\301\40\3\17\0\3\3\5\0\4\50\2\0\40\3"+
    "\1\302\13\3\17\0\3\3\5\0\4\50\2\0\5\3"+
    "\1\303\46\3\17\0\3\3\5\0\4\50\2\0\7\3"+
    "\1\175\44\3\17\0\3\3\5\0\4\50\2\0\12\3"+
    "\1\304\41\3\17\0\3\3\5\0\4\50\2\0\11\3"+
    "\1\305\42\3\17\0\3\3\5\0\4\50\2\0\10\3"+
    "\1\306\43\3\17\0\3\3\5\0\4\50\2\0\45\3"+
    "\1\307\6\3\17\0\3\3\5\0\4\50\2\0\45\3"+
    "\1\310\6\3\17\0\3\3\5\0\4\50\2\0\43\3"+
    "\1\311\10\3\17\0\3\3\5\0\4\50\2\0\16\3"+
    "\1\270\35\3\17\0\3\3\5\0\4\50\2\0\41\3"+
    "\1\312\12\3\17\0\3\3\5\0\4\50\2\0\36\3"+
    "\1\313\15\3\17\0\3\3\5\0\4\50\2\0\45\3"+
    "\1\314\6\3\17\0\3\3\5\0\4\50\2\0\10\3"+
    "\1\315\43\3\17\0\3\3\5\0\4\50\2\0\24\3"+
    "\1\316\27\3\17\0\3\3\5\0\4\50\2\0\10\3"+
    "\1\317\43\3\17\0\3\3\5\0\4\50\2\0\42\3"+
    "\1\320\11\3\17\0\3\3\5\0\4\50\2\0\45\3"+
    "\1\321\6\3\17\0\3\3\5\0\4\50\2\0\6\3"+
    "\1\322\45\3\17\0\3\3\5\0\4\50\2\0\45\3"+
    "\1\323\6\3\17\0\3\3\5\0\4\50\2\0\14\3"+
    "\1\324\37\3\17\0\3\3\5\0\4\50\2\0\23\3"+
    "\1\325\30\3\17\0\3\3\5\0\4\50\2\0\16\3"+
    "\1\326\35\3\17\0\3\3\5\0\4\50\2\0\44\3"+
    "\1\327\7\3\17\0\3\3\5\0\4\50\2\0\12\3"+
    "\1\330\41\3\17\0\3\3\5\0\4\50\2\0\54\3"+
    "\17\0\2\3\1\331\5\0\4\50\2\0\5\3\1\332"+
    "\46\3\17\0\3\3\5\0\4\50\2\0\43\3\1\333"+
    "\10\3\17\0\3\3\5\0\4\50\2\0\20\3\1\334"+
    "\33\3\17\0\3\3\5\0\4\50\2\0\41\3\1\335"+
    "\12\3\17\0\3\3\5\0\4\50\2\0\54\3\17\0"+
    "\1\3\1\336\1\3\5\0\4\50\2\0\13\3\1\337"+
    "\40\3\17\0\3\3\5\0\4\50\2\0\5\3\1\340"+
    "\46\3\17\0\3\3\5\0\4\50\2\0\7\3\1\341"+
    "\44\3\17\0\3\3\5\0\4\50\2\0\5\3\1\342"+
    "\46\3\17\0\3\3\5\0\4\50\2\0\20\3\1\343"+
    "\33\3\17\0\3\3\5\0\4\50\2\0\50\3\1\344"+
    "\3\3\17\0\3\3\5\0\4\50\2\0\5\3\1\345"+
    "\46\3\17\0\3\3\5\0\4\50\2\0\10\3\1\346"+
    "\43\3\17\0\3\3\5\0\4\50\2\0\23\3\1\347"+
    "\30\3\17\0\3\3\5\0\4\50\2\0\42\3\1\350"+
    "\11\3\17\0\3\3\5\0\4\50\2\0\24\3\1\351"+
    "\27\3\17\0\3\3\5\0\4\50\2\0\45\3\1\352"+
    "\6\3\17\0\3\3\5\0\4\50\2\0\41\3\1\353"+
    "\12\3\17\0\3\3\5\0\4\50\2\0\11\3\1\354"+
    "\42\3\17\0\3\3\5\0\4\50\2\0\20\3\1\355"+
    "\33\3\17\0\3\3\5\0\4\50\2\0\43\3\1\356"+
    "\10\3\17\0\3\3\5\0\4\50\2\0\36\3\1\357"+
    "\15\3\17\0\3\3\5\0\4\50\2\0\12\3\1\360"+
    "\41\3\17\0\3\3\5\0\4\50\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8833];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\14\11\6\1\1\0\51\1\3\11"+
    "\1\0\144\1\1\11\65\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	int lineaActual=1;
	private static int actualEtq=0;
	
	public int linea(){ return yyline+1; }
	public int columna(){ return yycolumn+1; }
	
	private static String nuevaEtq(){
		return "etqL"+(++actualEtq);
	}

   	  private Symbol symbol(int type){
	  return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value){
	  return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2950) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Error léxico en línea "+lineaActual+":-"+yytext()+"-");
          }
        case 139: break;
        case 2: 
          { return symbol(sym.NMETODO, new String(yytext()));
          }
        case 140: break;
        case 3: 
          { return symbol(sym.NUMERO, new Integer(yytext()));
          }
        case 141: break;
        case 4: 
          { return symbol(sym.CIRCUN);
          }
        case 142: break;
        case 5: 
          { return symbol(sym.LCORCH);
          }
        case 143: break;
        case 6: 
          { return symbol(sym.RCORCH);
          }
        case 144: break;
        case 7: 
          { return symbol(sym.DOSPUNTOS);
          }
        case 145: break;
        case 8: 
          { return symbol(sym.LPAREN);
          }
        case 146: break;
        case 9: 
          { return symbol(sym.RPAREN);
          }
        case 147: break;
        case 10: 
          { return symbol(sym.LLLAVE);
          }
        case 148: break;
        case 11: 
          { return symbol(sym.RLLAVE);
          }
        case 149: break;
        case 12: 
          { return symbol(sym.COMA);
          }
        case 150: break;
        case 13: 
          { return symbol(sym.PCOMA);
          }
        case 151: break;
        case 14: 
          { return symbol(sym.MAS);
          }
        case 152: break;
        case 15: 
          { return symbol(sym.MENOS);
          }
        case 153: break;
        case 16: 
          { return symbol(sym.MAYOR);
          }
        case 154: break;
        case 17: 
          { return symbol(sym.MENOR);
          }
        case 155: break;
        case 18: 
          { return symbol(sym.IGUAL);
          }
        case 156: break;
        case 19: 
          { ;
          }
        case 157: break;
        case 20: 
          { return symbol(sym.ID, yytext());
          }
        case 158: break;
        case 21: 
          { return symbol(sym.TA,new String("\tTRISA"));
          }
        case 159: break;
        case 22: 
          { return symbol(sym.TB,new String("\tTRISB"));
          }
        case 160: break;
        case 23: 
          { return symbol(sym.TC,new String("\tTRISC"));
          }
        case 161: break;
        case 24: 
          { return symbol(sym.TD,new String("\tTRISD"));
          }
        case 162: break;
        case 25: 
          { return symbol(sym.TE,new String("\tTRISE"));
          }
        case 163: break;
        case 26: 
          { return symbol(sym.TO);
          }
        case 164: break;
        case 27: 
          { return symbol(sym.SI,nuevaEtq());
          }
        case 165: break;
        case 28: 
          { return symbol(sym.PA,new String("\tPORTA"));
          }
        case 166: break;
        case 29: 
          { return symbol(sym.PB,new String("\tPORTB"));
          }
        case 167: break;
        case 30: 
          { return symbol(sym.PC,new String("\tPORTC"));
          }
        case 168: break;
        case 31: 
          { return symbol(sym.PD,new String("\tPORTD"));
          }
        case 169: break;
        case 32: 
          { return symbol(sym.PE,new String("\tPORTE"));
          }
        case 170: break;
        case 33: 
          { return  symbol(sym.DO);
          }
        case 171: break;
        case 34: 
          { return symbol(sym.NO);
          }
        case 172: break;
        case 35: 
          { return symbol(sym.OR);
          }
        case 173: break;
        case 36: 
          { return symbol(sym.OF);
          }
        case 174: break;
        case 37: 
          { return symbol(sym.MAYORIGUAL);
          }
        case 175: break;
        case 38: 
          { return symbol(sym.MENORIGUAL);
          }
        case 176: break;
        case 39: 
          { return symbol(sym.IGUAL2);
          }
        case 177: break;
        case 40: 
          { return symbol(sym.NUMREAL);
          }
        case 178: break;
        case 41: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA0"));
          }
        case 179: break;
        case 42: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA1"));
          }
        case 180: break;
        case 43: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA2"));
          }
        case 181: break;
        case 44: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA3"));
          }
        case 182: break;
        case 45: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA4"));
          }
        case 183: break;
        case 46: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA5"));
          }
        case 184: break;
        case 47: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA6"));
          }
        case 185: break;
        case 48: 
          { return symbol(sym.TA,new String("\tTRISAbits.TRISA7"));
          }
        case 186: break;
        case 49: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB0"));
          }
        case 187: break;
        case 50: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB1"));
          }
        case 188: break;
        case 51: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB2"));
          }
        case 189: break;
        case 52: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB3"));
          }
        case 190: break;
        case 53: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB4"));
          }
        case 191: break;
        case 54: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB5"));
          }
        case 192: break;
        case 55: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB6"));
          }
        case 193: break;
        case 56: 
          { return symbol(sym.TA,new String("\tTRISBbits.TRISB7"));
          }
        case 194: break;
        case 57: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC0"));
          }
        case 195: break;
        case 58: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC1"));
          }
        case 196: break;
        case 59: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC2"));
          }
        case 197: break;
        case 60: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC3"));
          }
        case 198: break;
        case 61: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC4"));
          }
        case 199: break;
        case 62: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC5"));
          }
        case 200: break;
        case 63: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC6"));
          }
        case 201: break;
        case 64: 
          { return symbol(sym.TC,new String("\tTRISCbits.TRISC7"));
          }
        case 202: break;
        case 65: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD0"));
          }
        case 203: break;
        case 66: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD1"));
          }
        case 204: break;
        case 67: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD2"));
          }
        case 205: break;
        case 68: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD3"));
          }
        case 206: break;
        case 69: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD4"));
          }
        case 207: break;
        case 70: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD5"));
          }
        case 208: break;
        case 71: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD6"));
          }
        case 209: break;
        case 72: 
          { return symbol(sym.TD,new String("\tTRISDbits.TRISD7"));
          }
        case 210: break;
        case 73: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE0"));
          }
        case 211: break;
        case 74: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE1"));
          }
        case 212: break;
        case 75: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE2"));
          }
        case 213: break;
        case 76: 
          { return symbol(sym.TE,new String("\tTRISEbits.TRISE3"));
          }
        case 214: break;
        case 77: 
          { return symbol(sym.FIN);
          }
        case 215: break;
        case 78: 
          { return symbol(sym.PA0,new String("\tPORTAbits.RA0"));
          }
        case 216: break;
        case 79: 
          { return symbol(sym.PA1,new String("\tPORTAbits.RA1"));
          }
        case 217: break;
        case 80: 
          { return symbol(sym.PA2,new String("\tPORTAbits.RA2"));
          }
        case 218: break;
        case 81: 
          { return symbol(sym.PA3,new String("\tPORTAbits.RA3"));
          }
        case 219: break;
        case 82: 
          { return symbol(sym.PA4,new String("\tPORTAbits.RA4"));
          }
        case 220: break;
        case 83: 
          { return symbol(sym.PA5,new String("\tPORTAbits.RA5"));
          }
        case 221: break;
        case 84: 
          { return symbol(sym.PA6,new String("\tPORTAbits.RA6"));
          }
        case 222: break;
        case 85: 
          { return symbol(sym.PA7,new String("\tPORTAbits.RA7"));
          }
        case 223: break;
        case 86: 
          { return symbol(sym.PB0,new String("\tPORTBbits.RB0"));
          }
        case 224: break;
        case 87: 
          { return symbol(sym.PB1,new String("\tPORTBbits.RB1"));
          }
        case 225: break;
        case 88: 
          { return symbol(sym.PB2,new String("\tPORTBbits.RB2"));
          }
        case 226: break;
        case 89: 
          { return symbol(sym.PB3,new String("\tPORTBbits.RB3"));
          }
        case 227: break;
        case 90: 
          { return symbol(sym.PB4,new String("\tPORTBbits.RB4"));
          }
        case 228: break;
        case 91: 
          { return symbol(sym.PB5,new String("\tPORTBbits.RB5"));
          }
        case 229: break;
        case 92: 
          { return symbol(sym.PB6,new String("\tPORTBbits.RB6"));
          }
        case 230: break;
        case 93: 
          { return symbol(sym.PB7,new String("\tPORTBbits.RB7"));
          }
        case 231: break;
        case 94: 
          { return symbol(sym.PC0,new String("\tPORTCbits.RC0"));
          }
        case 232: break;
        case 95: 
          { return symbol(sym.PC1,new String("\tPORTCbits.RC1"));
          }
        case 233: break;
        case 96: 
          { return symbol(sym.PC2,new String("\tPORTCbits.RC2"));
          }
        case 234: break;
        case 97: 
          { return symbol(sym.PC3,new String("\tPORTCbits.RC3"));
          }
        case 235: break;
        case 98: 
          { return symbol(sym.PC4,new String("\tPORTCbits.RC4"));
          }
        case 236: break;
        case 99: 
          { return symbol(sym.PC5,new String("\tPORTCbits.RC5"));
          }
        case 237: break;
        case 100: 
          { return symbol(sym.PC6,new String("\tPORTCbits.RC6"));
          }
        case 238: break;
        case 101: 
          { return symbol(sym.PC7,new String("\tPORTCbits.RC7"));
          }
        case 239: break;
        case 102: 
          { return symbol(sym.PD0,new String("\tPORTDbits.RD0"));
          }
        case 240: break;
        case 103: 
          { return symbol(sym.PD1,new String("\tPORTDbits.RD1"));
          }
        case 241: break;
        case 104: 
          { return symbol(sym.PD2,new String("\tPORTDbits.RD2"));
          }
        case 242: break;
        case 105: 
          { return symbol(sym.PD3,new String("\tPORTDbits.RD3"));
          }
        case 243: break;
        case 106: 
          { return symbol(sym.PD4,new String("\tPORTDbits.RD4"));
          }
        case 244: break;
        case 107: 
          { return symbol(sym.PD5,new String("\tPORTDbits.RD5"));
          }
        case 245: break;
        case 108: 
          { return symbol(sym.PD6,new String("\tPORTDbits.RD6"));
          }
        case 246: break;
        case 109: 
          { return symbol(sym.PD7,new String("\tPORTDbits.RD7"));
          }
        case 247: break;
        case 110: 
          { return symbol(sym.PE0,new String("\tPORTEbits.RE0"));
          }
        case 248: break;
        case 111: 
          { return symbol(sym.PE1,new String("\tPORTEbits.RE1"));
          }
        case 249: break;
        case 112: 
          { return symbol(sym.PE2,new String("\tPORTEbits.RE2"));
          }
        case 250: break;
        case 113: 
          { return symbol(sym.PE3,new String("\tPORTEbits.RE3"));
          }
        case 251: break;
        case 114: 
          { return symbol(sym.AND);
          }
        case 252: break;
        case 115: 
          { return symbol(sym.TIPOVC);
          }
        case 253: break;
        case 116: 
          { return symbol(sym.CARACTER);
          }
        case 254: break;
        case 117: 
          { return symbol(sym.CTELOGICA);
          }
        case 255: break;
        case 118: 
          { return symbol(sym.THEN);
          }
        case 256: break;
        case 119: 
          { return symbol(sym.MAIN,new String("\n\n\tvoid main(void)"));
          }
        case 257: break;
        case 120: 
          { return symbol(sym.CASO,nuevaEtq());
          }
        case 258: break;
        case 121: 
          { return symbol(sym.CHAR);
          }
        case 259: break;
        case 122: 
          { return symbol(sym.REAL);
          }
        case 260: break;
        case 123: 
          { return symbol(sym.VOID,new String("\n\tvoid  "));
          }
        case 261: break;
        case 124: 
          { return symbol(sym.SETUP,new String("\tvoid setup()"));
          }
        case 262: break;
        case 125: 
          { return symbol(sym.FUSES,new String("#include <xc.h>\n"
								                + "// CONFIG1\n" 
								                +"#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)\n" 
								                +"#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)\n"
								                +"#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)\n"
								                +"#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)\n" 
								                +"#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)\n"
								                +"#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)\n"
								                +"#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)\n" 
								                +"#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)\n"
								                +"#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)\n" 
								                +"#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)\n" 
								                +"\n" +"\n" +"\n" 
								                +"// CONFIG2\n"
								                +"\n"
								                +"#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)\n"
								                +"\n"
								                +"#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)\n\n\n\n"));
          }
        case 263: break;
        case 126: 
          { return symbol(sym.ARRAY);
          }
        case 264: break;
        case 127: 
          { return symbol(sym.CICLO,new String("\n\n\tvoid loop()"));
          }
        case 265: break;
        case 128: 
          { return symbol(sym.WHILE ,nuevaEtq());
          }
        case 266: break;
        case 129: 
          { return symbol(sym.CHALE,new String("\t\tretardo"));
          }
        case 267: break;
        case 130: 
          { return symbol(sym.TOGGLE,new String("!"));
          }
        case 268: break;
        case 131: 
          { return symbol(sym.SALIDA);
          }
        case 269: break;
        case 132: 
          { return symbol(sym.SWITCH);
          }
        case 270: break;
        case 133: 
          { return symbol(sym.POINTER);
          }
        case 271: break;
        case 134: 
          { return symbol(sym.BOOLEAN);
          }
        case 272: break;
        case 135: 
          { return symbol(sym.ENTRADA);
          }
        case 273: break;
        case 136: 
          { return symbol(sym.RETARDO,new String("\n\n\tvoid retardo(unsigned int i){for(;i>0;i--);}\n\n"));
          }
        case 274: break;
        case 137: 
          { return symbol(sym.INTEGER);
          }
        case 275: break;
        case 138: 
          { return symbol(sym.OTHERWISE);
          }
        case 276: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
