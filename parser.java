
//----------------------------------------------------
// The following code was generated by CUP v0.10k
<<<<<<< HEAD
// Thu Jul 02 13:47:23 CDT 2015
=======
// Sun Jul 05 20:57:33 CDT 2015
>>>>>>> origin/master
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Stack;

/** CUP v0.10k generated parser.
<<<<<<< HEAD
  * @version Thu Jul 02 13:47:23 CDT 2015
=======
  * @version Sun Jul 05 20:57:33 CDT 2015
>>>>>>> origin/master
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\265\000\002\003\005\000\002\002\004\000\002\004" +
=======
    "\000\305\000\002\003\005\000\002\002\004\000\002\004" +
>>>>>>> origin/master
    "\004\000\002\004\010\000\002\004\005\000\002\004\011" +
    "\000\002\006\006\000\002\006\007\000\002\013\006\000" +
    "\002\013\007\000\002\016\003\000\002\016\003\000\002" +
    "\007\006\000\002\005\006\000\002\005\005\000\002\010" +
<<<<<<< HEAD
    "\011\000\002\010\012\000\002\013\003\000\002\013\004" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\007\000\002\020\010\000\002\020\004\000\002" +
    "\020\011\000\002\020\011\000\002\035\002\000\002\020" +
    "\014\000\002\036\002\000\002\020\014\000\002\020\012" +
    "\000\002\020\012\000\002\020\012\000\002\020\012\000" +
    "\002\012\006\000\002\012\005\000\002\012\007\000\002" +
    "\012\006\000\002\012\005\000\002\012\006\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\004\000\002\024\005\000" +
    "\002\024\006\000\002\026\004\000\002\026\005\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
=======
    "\011\000\002\010\012\000\002\010\012\000\002\010\013" +
    "\000\002\027\005\000\002\027\007\000\002\012\003\000" +
    "\002\012\004\000\002\017\007\000\002\017\011\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\007\000\002\017\010\000\002\017\004" +
    "\000\002\017\011\000\002\017\011\000\002\030\002\000" +
    "\002\017\014\000\002\031\002\000\002\017\014\000\002" +
    "\017\012\000\002\017\012\000\002\017\012\000\002\017" +
    "\012\000\002\011\006\000\002\011\005\000\002\011\007" +
    "\000\002\011\006\000\002\011\005\000\002\011\006\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\005\000\002\022" +
    "\006\000\002\024\004\000\002\024\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
>>>>>>> origin/master
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
<<<<<<< HEAD
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003" });
=======
    "\015\003\000\002\015\003\000\002\015\003" });
>>>>>>> origin/master

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\u0124\000\004\025\005\001\002\000\004\002\u0126\001" +
    "\002\000\006\024\006\155\012\001\002\000\004\171\u0117" +
    "\001\002\000\006\030\u0111\031\u0102\001\002\000\004\023" +
    "\u010c\001\002\000\006\024\006\155\372\001\002\000\004" +
    "\214\013\001\002\000\004\165\014\001\002\000\004\166" +
    "\015\001\002\000\004\171\016\001\002\000\262\022\112" +
    "\033\141\034\136\035\134\036\133\037\131\040\025\041" +
    "\022\042\021\043\020\044\017\045\124\046\123\047\122" +
    "\050\121\051\117\052\116\053\115\054\114\055\101\056" +
    "\100\057\077\060\076\061\075\062\074\063\073\064\072" +
    "\065\060\066\057\067\056\070\055\071\054\072\053\073" +
    "\052\074\050\075\037\076\036\077\035\100\034\101\033" +
    "\102\032\103\031\104\030\105\147\106\146\107\145\110" +
    "\144\111\143\112\142\113\140\114\137\115\135\116\132" +
    "\117\130\120\127\121\113\122\111\123\110\124\107\125" +
    "\106\126\105\127\103\130\102\131\071\132\070\133\067" +
    "\134\066\135\064\136\063\137\062\140\061\141\051\142" +
    "\047\143\046\144\045\145\044\146\043\147\042\150\041" +
    "\151\027\152\026\153\024\154\023\162\120\211\125\214" +
    "\065\215\040\217\104\001\002\000\006\175\uffbe\177\uffbe" +
    "\001\002\000\006\175\uffbf\177\uffbf\001\002\000\006\175" +
    "\uffc0\177\uffc0\001\002\000\006\175\uffc1\177\uffc1\001\002" +
    "\000\006\175\uff76\177\uff76\001\002\000\006\175\uff77\177" +
    "\uff77\001\002\000\006\175\uffc2\177\uffc2\001\002\000\006" +
    "\175\uff78\177\uff78\001\002\000\006\175\uff79\177\uff79\001" +
    "\002\000\006\175\uff9e\177\uff9e\001\002\000\006\175\uff9f" +
    "\177\uff9f\001\002\000\006\175\uffa0\177\uffa0\001\002\000" +
    "\006\175\uffa1\177\uffa1\001\002\000\006\175\uffa2\177\uffa2" +
    "\001\002\000\006\175\uffa3\177\uffa3\001\002\000\006\175" +
    "\uffa4\177\uffa4\001\002\000\006\175\uffa5\177\uffa5\001\002" +
    "\000\004\165\346\001\002\000\006\175\uff7a\177\uff7a\001" +
    "\002\000\006\175\uff7b\177\uff7b\001\002\000\006\175\uff7c" +
    "\177\uff7c\001\002\000\006\175\uff7d\177\uff7d\001\002\000" +
    "\006\175\uff7e\177\uff7e\001\002\000\006\175\uff7f\177\uff7f" +
    "\001\002\000\006\175\uff80\177\uff80\001\002\000\006\175" +
    "\uffa6\177\uffa6\001\002\000\006\175\uff81\177\uff81\001\002" +
    "\000\006\175\uffa7\177\uffa7\001\002\000\006\175\uffa8\177" +
    "\uffa8\001\002\000\006\175\uffa9\177\uffa9\001\002\000\006" +
    "\175\uffaa\177\uffaa\001\002\000\006\175\uffab\177\uffab\001" +
    "\002\000\006\175\uffac\177\uffac\001\002\000\006\175\uffad" +
    "\177\uffad\001\002\000\006\175\uff82\177\uff82\001\002\000" +
    "\006\175\uff83\177\uff83\001\002\000\006\175\uff84\177\uff84" +
    "\001\002\000\006\175\uff85\177\uff85\001\002\000\004\165" +
    "\343\001\002\000\006\175\uff86\177\uff86\001\002\000\006" +
    "\175\uff87\177\uff87\001\002\000\006\175\uff88\177\uff88\001" +
    "\002\000\006\175\uff89\177\uff89\001\002\000\006\175\uffae" +
    "\177\uffae\001\002\000\006\175\uffaf\177\uffaf\001\002\000" +
    "\006\175\uffb0\177\uffb0\001\002\000\006\175\uffb1\177\uffb1" +
    "\001\002\000\006\175\uffb2\177\uffb2\001\002\000\006\175" +
    "\uffb3\177\uffb3\001\002\000\006\175\uffb4\177\uffb4\001\002" +
    "\000\006\175\uffb5\177\uffb5\001\002\000\006\175\uff8a\177" +
    "\uff8a\001\002\000\006\175\uff8b\177\uff8b\001\002\000\004" +
    "\165\301\001\002\000\006\175\uff8c\177\uff8c\001\002\000" +
    "\006\175\uff8d\177\uff8d\001\002\000\006\175\uff8e\177\uff8e" +
    "\001\002\000\006\175\uff8f\177\uff8f\001\002\000\006\175" +
    "\uff90\177\uff90\001\002\000\004\165\275\001\002\000\006" +
    "\175\uff91\177\uff91\001\002\000\006\175\uffb6\177\uffb6\001" +
    "\002\000\006\175\uffb7\177\uffb7\001\002\000\006\175\uffb8" +
    "\177\uffb8\001\002\000\006\175\uffb9\177\uffb9\001\002\000" +
    "\004\165\240\001\002\000\006\175\uffba\177\uffba\001\002" +
    "\000\006\175\uffbb\177\uffbb\001\002\000\006\175\uffbc\177" +
    "\uffbc\001\002\000\006\175\uffbd\177\uffbd\001\002\000\004" +
    "\174\237\001\002\000\274\022\112\033\141\034\136\035" +
    "\134\036\133\037\131\040\025\041\022\042\021\043\020" +
    "\044\017\045\124\046\123\047\122\050\121\051\117\052" +
    "\116\053\115\054\114\055\101\056\100\057\077\060\076" +
    "\061\075\062\074\063\073\064\072\065\060\066\057\067" +
    "\056\070\055\071\054\072\053\073\052\074\050\075\037" +
    "\076\036\077\035\100\034\101\033\102\032\103\031\104" +
    "\030\105\147\106\146\107\145\110\144\111\143\112\142" +
    "\113\140\114\137\115\135\116\132\117\130\120\127\121" +
    "\113\122\111\123\110\124\107\125\106\126\105\127\103" +
    "\130\102\131\071\132\070\133\067\134\066\135\064\136" +
    "\063\137\062\140\061\141\051\142\047\143\046\144\045" +
    "\145\044\146\043\147\042\150\041\151\027\152\026\153" +
    "\024\154\023\157\ufff0\160\ufff0\162\120\164\ufff0\172\ufff0" +
    "\211\125\214\065\215\040\216\ufff0\217\104\001\002\000" +
    "\006\175\uff92\177\uff92\001\002\000\006\175\uff93\177\uff93" +
    "\001\002\000\006\175\uffc3\177\uffc3\001\002\000\006\175" +
    "\uff94\177\uff94\001\002\000\006\175\uffc4\177\uffc4\001\002" +
    "\000\006\175\uffc5\177\uffc5\001\002\000\006\175\uff95\177" +
    "\uff95\001\002\000\006\175\uffc6\177\uffc6\001\002\000\006" +
    "\175\uff96\177\uff96\001\002\000\006\175\uff97\177\uff97\001" +
    "\002\000\006\175\uffc7\177\uffc7\001\002\000\006\175\uff98" +
    "\177\uff98\001\002\000\006\175\uff99\177\uff99\001\002\000" +
    "\006\175\uff9a\177\uff9a\001\002\000\006\175\uff9b\177\uff9b" +
    "\001\002\000\006\175\uff9c\177\uff9c\001\002\000\006\175" +
    "\uff9d\177\uff9d\001\002\000\006\175\153\177\154\001\002" +
    "\000\004\172\152\001\002\000\006\024\ufff2\155\ufff2\001" +
    "\002\000\126\033\167\034\166\035\165\036\164\037\163" +
    "\111\157\112\155\113\225\114\222\115\220\116\217\117" +
    "\215\120\214\121\210\122\206\123\205\124\204\125\203" +
    "\126\202\127\201\130\200\131\177\132\176\133\175\134" +
    "\174\135\173\136\172\137\171\140\170\141\162\142\161" +
    "\143\160\144\156\145\226\146\223\147\221\150\216\151" +
    "\213\152\212\153\211\154\207\212\230\001\002\000\124" +
    "\033\167\034\166\035\165\036\164\037\163\111\157\112" +
    "\155\113\225\114\222\115\220\116\217\117\215\120\214" +
    "\121\210\122\206\123\205\124\204\125\203\126\202\127" +
    "\201\130\200\131\177\132\176\133\175\134\174\135\173" +
    "\136\172\137\171\140\170\141\162\142\161\143\160\144" +
    "\156\145\226\146\223\147\221\150\216\151\213\152\212" +
    "\153\211\154\207\001\002\000\026\166\uff6f\167\uff6f\174" +
    "\uff6f\176\uff6f\200\uff6f\201\uff6f\202\uff6f\203\uff6f\204\uff6f" +
    "\205\uff6f\001\002\000\026\166\uff55\167\uff55\174\uff55\176" +
    "\uff55\200\uff55\201\uff55\202\uff55\203\uff55\204\uff55\205\uff55" +
    "\001\002\000\026\166\uff70\167\uff70\174\uff70\176\uff70\200" +
    "\uff70\201\uff70\202\uff70\203\uff70\204\uff70\205\uff70\001\002" +
    "\000\026\166\uff56\167\uff56\174\uff56\176\uff56\200\uff56\201" +
    "\uff56\202\uff56\203\uff56\204\uff56\205\uff56\001\002\000\026" +
    "\166\uff57\167\uff57\174\uff57\176\uff57\200\uff57\201\uff57\202" +
    "\uff57\203\uff57\204\uff57\205\uff57\001\002\000\026\166\uff58" +
    "\167\uff58\174\uff58\176\uff58\200\uff58\201\uff58\202\uff58\203" +
    "\uff58\204\uff58\205\uff58\001\002\000\026\166\uff71\167\uff71" +
    "\174\uff71\176\uff71\200\uff71\201\uff71\202\uff71\203\uff71\204" +
    "\uff71\205\uff71\001\002\000\026\166\uff72\167\uff72\174\uff72" +
    "\176\uff72\200\uff72\201\uff72\202\uff72\203\uff72\204\uff72\205" +
    "\uff72\001\002\000\026\166\uff73\167\uff73\174\uff73\176\uff73" +
    "\200\uff73\201\uff73\202\uff73\203\uff73\204\uff73\205\uff73\001" +
    "\002\000\026\166\uff74\167\uff74\174\uff74\176\uff74\200\uff74" +
    "\201\uff74\202\uff74\203\uff74\204\uff74\205\uff74\001\002\000" +
    "\026\166\uff75\167\uff75\174\uff75\176\uff75\200\uff75\201\uff75" +
    "\202\uff75\203\uff75\204\uff75\205\uff75\001\002\000\026\166" +
    "\uff59\167\uff59\174\uff59\176\uff59\200\uff59\201\uff59\202\uff59" +
    "\203\uff59\204\uff59\205\uff59\001\002\000\026\166\uff5a\167" +
    "\uff5a\174\uff5a\176\uff5a\200\uff5a\201\uff5a\202\uff5a\203\uff5a" +
    "\204\uff5a\205\uff5a\001\002\000\026\166\uff5b\167\uff5b\174" +
    "\uff5b\176\uff5b\200\uff5b\201\uff5b\202\uff5b\203\uff5b\204\uff5b" +
    "\205\uff5b\001\002\000\026\166\uff5c\167\uff5c\174\uff5c\176" +
    "\uff5c\200\uff5c\201\uff5c\202\uff5c\203\uff5c\204\uff5c\205\uff5c" +
    "\001\002\000\026\166\uff5d\167\uff5d\174\uff5d\176\uff5d\200" +
    "\uff5d\201\uff5d\202\uff5d\203\uff5d\204\uff5d\205\uff5d\001\002" +
    "\000\026\166\uff5e\167\uff5e\174\uff5e\176\uff5e\200\uff5e\201" +
    "\uff5e\202\uff5e\203\uff5e\204\uff5e\205\uff5e\001\002\000\026" +
    "\166\uff5f\167\uff5f\174\uff5f\176\uff5f\200\uff5f\201\uff5f\202" +
    "\uff5f\203\uff5f\204\uff5f\205\uff5f\001\002\000\026\166\uff60" +
    "\167\uff60\174\uff60\176\uff60\200\uff60\201\uff60\202\uff60\203" +
    "\uff60\204\uff60\205\uff60\001\002\000\026\166\uff61\167\uff61" +
    "\174\uff61\176\uff61\200\uff61\201\uff61\202\uff61\203\uff61\204" +
    "\uff61\205\uff61\001\002\000\026\166\uff62\167\uff62\174\uff62" +
    "\176\uff62\200\uff62\201\uff62\202\uff62\203\uff62\204\uff62\205" +
    "\uff62\001\002\000\026\166\uff63\167\uff63\174\uff63\176\uff63" +
    "\200\uff63\201\uff63\202\uff63\203\uff63\204\uff63\205\uff63\001" +
    "\002\000\026\166\uff64\167\uff64\174\uff64\176\uff64\200\uff64" +
    "\201\uff64\202\uff64\203\uff64\204\uff64\205\uff64\001\002\000" +
    "\026\166\uff65\167\uff65\174\uff65\176\uff65\200\uff65\201\uff65" +
    "\202\uff65\203\uff65\204\uff65\205\uff65\001\002\000\026\166" +
    "\uff66\167\uff66\174\uff66\176\uff66\200\uff66\201\uff66\202\uff66" +
    "\203\uff66\204\uff66\205\uff66\001\002\000\026\166\uff67\167" +
    "\uff67\174\uff67\176\uff67\200\uff67\201\uff67\202\uff67\203\uff67" +
    "\204\uff67\205\uff67\001\002\000\026\166\uff4d\167\uff4d\174" +
    "\uff4d\176\uff4d\200\uff4d\201\uff4d\202\uff4d\203\uff4d\204\uff4d" +
    "\205\uff4d\001\002\000\026\166\uff68\167\uff68\174\uff68\176" +
    "\uff68\200\uff68\201\uff68\202\uff68\203\uff68\204\uff68\205\uff68" +
    "\001\002\000\026\166\uff4e\167\uff4e\174\uff4e\176\uff4e\200" +
    "\uff4e\201\uff4e\202\uff4e\203\uff4e\204\uff4e\205\uff4e\001\002" +
    "\000\026\166\uff4f\167\uff4f\174\uff4f\176\uff4f\200\uff4f\201" +
    "\uff4f\202\uff4f\203\uff4f\204\uff4f\205\uff4f\001\002\000\026" +
    "\166\uff50\167\uff50\174\uff50\176\uff50\200\uff50\201\uff50\202" +
    "\uff50\203\uff50\204\uff50\205\uff50\001\002\000\026\166\uff69" +
    "\167\uff69\174\uff69\176\uff69\200\uff69\201\uff69\202\uff69\203" +
    "\uff69\204\uff69\205\uff69\001\002\000\026\166\uff6a\167\uff6a" +
    "\174\uff6a\176\uff6a\200\uff6a\201\uff6a\202\uff6a\203\uff6a\204" +
    "\uff6a\205\uff6a\001\002\000\026\166\uff51\167\uff51\174\uff51" +
    "\176\uff51\200\uff51\201\uff51\202\uff51\203\uff51\204\uff51\205" +
    "\uff51\001\002\000\026\166\uff6b\167\uff6b\174\uff6b\176\uff6b" +
    "\200\uff6b\201\uff6b\202\uff6b\203\uff6b\204\uff6b\205\uff6b\001" +
    "\002\000\026\166\uff6c\167\uff6c\174\uff6c\176\uff6c\200\uff6c" +
    "\201\uff6c\202\uff6c\203\uff6c\204\uff6c\205\uff6c\001\002\000" +
    "\026\166\uff52\167\uff52\174\uff52\176\uff52\200\uff52\201\uff52" +
    "\202\uff52\203\uff52\204\uff52\205\uff52\001\002\000\026\166" +
    "\uff6d\167\uff6d\174\uff6d\176\uff6d\200\uff6d\201\uff6d\202\uff6d" +
    "\203\uff6d\204\uff6d\205\uff6d\001\002\000\026\166\uff53\167" +
    "\uff53\174\uff53\176\uff53\200\uff53\201\uff53\202\uff53\203\uff53" +
    "\204\uff53\205\uff53\001\002\000\004\174\227\001\002\000" +
    "\026\166\uff6e\167\uff6e\174\uff6e\176\uff6e\200\uff6e\201\uff6e" +
    "\202\uff6e\203\uff6e\204\uff6e\205\uff6e\001\002\000\026\166" +
    "\uff54\167\uff54\174\uff54\176\uff54\200\uff54\201\uff54\202\uff54" +
    "\203\uff54\204\uff54\205\uff54\001\002\000\274\022\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\101\uffee\102" +
    "\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110\uffee" +
    "\111\uffee\112\uffee\113\uffee\114\uffee\115\uffee\116\uffee\117" +
    "\uffee\120\uffee\121\uffee\122\uffee\123\uffee\124\uffee\125\uffee" +
    "\126\uffee\127\uffee\130\uffee\131\uffee\132\uffee\133\uffee\134" +
    "\uffee\135\uffee\136\uffee\137\uffee\140\uffee\141\uffee\142\uffee" +
    "\143\uffee\144\uffee\145\uffee\146\uffee\147\uffee\150\uffee\151" +
    "\uffee\152\uffee\153\uffee\154\uffee\157\uffee\160\uffee\162\uffee" +
    "\164\uffee\172\uffee\211\uffee\214\uffee\215\uffee\216\uffee\217" +
    "\uffee\001\002\000\004\174\235\001\002\000\004\167\232" +
    "\001\002\000\004\212\233\001\002\000\004\174\234\001" +
    "\002\000\274\022\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea" +
    "\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea\077" +
    "\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea" +
    "\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\113\uffea\114" +
    "\uffea\115\uffea\116\uffea\117\uffea\120\uffea\121\uffea\122\uffea" +
    "\123\uffea\124\uffea\125\uffea\126\uffea\127\uffea\130\uffea\131" +
    "\uffea\132\uffea\133\uffea\134\uffea\135\uffea\136\uffea\137\uffea" +
    "\140\uffea\141\uffea\142\uffea\143\uffea\144\uffea\145\uffea\146" +
    "\uffea\147\uffea\150\uffea\151\uffea\152\uffea\153\uffea\154\uffea" +
    "\157\uffea\160\uffea\162\uffea\164\uffea\172\uffea\211\uffea\214" +
    "\uffea\215\uffea\216\uffea\217\uffea\001\002\000\274\022\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073" +
    "\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed" +
    "\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110" +
    "\uffed\111\uffed\112\uffed\113\uffed\114\uffed\115\uffed\116\uffed" +
    "\117\uffed\120\uffed\121\uffed\122\uffed\123\uffed\124\uffed\125" +
    "\uffed\126\uffed\127\uffed\130\uffed\131\uffed\132\uffed\133\uffed" +
    "\134\uffed\135\uffed\136\uffed\137\uffed\140\uffed\141\uffed\142" +
    "\uffed\143\uffed\144\uffed\145\uffed\146\uffed\147\uffed\150\uffed" +
    "\151\uffed\152\uffed\153\uffed\154\uffed\157\uffed\160\uffed\162" +
    "\uffed\164\uffed\172\uffed\211\uffed\214\uffed\215\uffed\216\uffed" +
    "\217\uffed\001\002\000\014\157\uffef\160\uffef\164\uffef\172" +
    "\uffef\216\uffef\001\002\000\274\022\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075" +
    "\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9" +
    "\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\112" +
    "\uffe9\113\uffe9\114\uffe9\115\uffe9\116\uffe9\117\uffe9\120\uffe9" +
    "\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125\uffe9\126\uffe9\127" +
    "\uffe9\130\uffe9\131\uffe9\132\uffe9\133\uffe9\134\uffe9\135\uffe9" +
    "\136\uffe9\137\uffe9\140\uffe9\141\uffe9\142\uffe9\143\uffe9\144" +
    "\uffe9\145\uffe9\146\uffe9\147\uffe9\150\uffe9\151\uffe9\152\uffe9" +
    "\153\uffe9\154\uffe9\157\uffe9\160\uffe9\162\uffe9\164\uffe9\172" +
    "\uffe9\211\uffe9\214\uffe9\215\uffe9\216\uffe9\217\uffe9\001\002" +
    "\000\130\033\167\034\166\035\165\036\164\037\163\111" +
    "\157\112\155\113\225\114\222\115\220\116\217\117\215" +
    "\120\214\121\210\122\206\123\205\124\204\125\203\126" +
    "\202\127\201\130\200\131\177\132\176\133\175\134\174" +
    "\135\173\136\172\137\171\140\170\141\162\142\161\143" +
    "\160\144\156\145\226\146\223\147\221\150\216\151\213" +
    "\152\212\153\211\154\207\212\241\213\242\001\002\000" +
    "\006\166\uffd7\173\uffd7\001\002\000\006\166\uffd8\173\uffd8" +
    "\001\002\000\004\166\270\001\002\000\004\166\245\001" +
    "\002\000\004\163\246\001\002\000\006\164\250\216\251" +
    "\001\002\000\010\160\257\164\260\216\261\001\002\000" +
    "\004\173\255\001\002\000\006\212\241\213\242\001\002" +
    "\000\004\173\253\001\002\000\270\022\112\033\141\034" +
    "\136\035\134\036\133\037\131\040\025\041\022\042\021" +
    "\043\020\044\017\045\124\046\123\047\122\050\121\051" +
    "\117\052\116\053\115\054\114\055\101\056\100\057\077" +
    "\060\076\061\075\062\074\063\073\064\072\065\060\066" +
    "\057\067\056\070\055\071\054\072\053\073\052\074\050" +
    "\075\037\076\036\077\035\100\034\101\033\102\032\103" +
    "\031\104\030\105\147\106\146\107\145\110\144\111\143" +
    "\112\142\113\140\114\137\115\135\116\132\117\130\120" +
    "\127\121\113\122\111\123\110\124\107\125\106\126\105" +
    "\127\103\130\102\131\071\132\070\133\067\134\066\135" +
    "\064\136\063\137\062\140\061\141\051\142\047\143\046" +
    "\144\045\145\044\146\043\147\042\150\041\151\027\152" +
    "\026\153\024\154\023\160\uffda\162\120\164\uffda\211\125" +
    "\214\065\215\040\216\uffda\217\104\001\002\000\010\160" +
    "\uffde\164\uffde\216\uffde\001\002\000\262\022\112\033\141" +
    "\034\136\035\134\036\133\037\131\040\025\041\022\042" +
    "\021\043\020\044\017\045\124\046\123\047\122\050\121" +
    "\051\117\052\116\053\115\054\114\055\101\056\100\057" +
    "\077\060\076\061\075\062\074\063\073\064\072\065\060" +
    "\066\057\067\056\070\055\071\054\072\053\073\052\074" +
    "\050\075\037\076\036\077\035\100\034\101\033\102\032" +
    "\103\031\104\030\105\147\106\146\107\145\110\144\111" +
    "\143\112\142\113\140\114\137\115\135\116\132\117\130" +
    "\120\127\121\113\122\111\123\110\124\107\125\106\126" +
    "\105\127\103\130\102\131\071\132\070\133\067\134\066" +
    "\135\064\136\063\137\062\140\061\141\051\142\047\143" +
    "\046\144\045\145\044\146\043\147\042\150\041\151\027" +
    "\152\026\153\024\154\023\162\120\211\125\214\065\215" +
    "\040\217\104\001\002\000\010\160\uffdd\164\uffdd\216\uffdd" +
    "\001\002\000\004\162\267\001\002\000\004\173\265\001" +
    "\002\000\006\212\241\213\242\001\002\000\004\173\263" +
    "\001\002\000\270\022\112\033\141\034\136\035\134\036" +
    "\133\037\131\040\025\041\022\042\021\043\020\044\017" +
    "\045\124\046\123\047\122\050\121\051\117\052\116\053" +
    "\115\054\114\055\101\056\100\057\077\060\076\061\075" +
    "\062\074\063\073\064\072\065\060\066\057\067\056\070" +
    "\055\071\054\072\053\073\052\074\050\075\037\076\036" +
    "\077\035\100\034\101\033\102\032\103\031\104\030\105" +
    "\147\106\146\107\145\110\144\111\143\112\142\113\140" +
    "\114\137\115\135\116\132\117\130\120\127\121\113\122" +
    "\111\123\110\124\107\125\106\126\105\127\103\130\102" +
    "\131\071\132\070\133\067\134\066\135\064\136\063\137" +
    "\062\140\061\141\051\142\047\143\046\144\045\145\044" +
    "\146\043\147\042\150\041\151\027\152\026\153\024\154" +
    "\023\160\uffd9\162\120\164\uffd9\211\125\214\065\215\040" +
    "\216\uffd9\217\104\001\002\000\010\160\uffdc\164\uffdc\216" +
    "\uffdc\001\002\000\262\022\112\033\141\034\136\035\134" +
    "\036\133\037\131\040\025\041\022\042\021\043\020\044" +
    "\017\045\124\046\123\047\122\050\121\051\117\052\116" +
    "\053\115\054\114\055\101\056\100\057\077\060\076\061" +
    "\075\062\074\063\073\064\072\065\060\066\057\067\056" +
    "\070\055\071\054\072\053\073\052\074\050\075\037\076" +
    "\036\077\035\100\034\101\033\102\032\103\031\104\030" +
    "\105\147\106\146\107\145\110\144\111\143\112\142\113" +
    "\140\114\137\115\135\116\132\117\130\120\127\121\113" +
    "\122\111\123\110\124\107\125\106\126\105\127\103\130" +
    "\102\131\071\132\070\133\067\134\066\135\064\136\063" +
    "\137\062\140\061\141\051\142\047\143\046\144\045\145" +
    "\044\146\043\147\042\150\041\151\027\152\026\153\024" +
    "\154\023\162\120\211\125\214\065\215\040\217\104\001" +
    "\002\000\010\160\uffdb\164\uffdb\216\uffdb\001\002\000\274" +
    "\022\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072" +
    "\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1" +
    "\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1\107" +
    "\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\114\uffe1\115\uffe1" +
    "\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123\uffe1\124" +
    "\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1" +
    "\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1\140\uffe1\141" +
    "\uffe1\142\uffe1\143\uffe1\144\uffe1\145\uffe1\146\uffe1\147\uffe1" +
    "\150\uffe1\151\uffe1\152\uffe1\153\uffe1\154\uffe1\157\uffe1\160" +
    "\uffe1\162\uffe1\164\uffe1\172\uffe1\211\uffe1\214\uffe1\215\uffe1" +
    "\216\uffe1\217\uffe1\001\002\000\004\163\271\001\002\000" +
    "\006\164\250\216\251\001\002\000\010\160\273\164\260" +
    "\216\261\001\002\000\004\162\274\001\002\000\274\022" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101" +
    "\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2" +
    "\110\uffe2\111\uffe2\112\uffe2\113\uffe2\114\uffe2\115\uffe2\116" +
    "\uffe2\117\uffe2\120\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2" +
    "\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2\132\uffe2\133" +
    "\uffe2\134\uffe2\135\uffe2\136\uffe2\137\uffe2\140\uffe2\141\uffe2" +
    "\142\uffe2\143\uffe2\144\uffe2\145\uffe2\146\uffe2\147\uffe2\150" +
    "\uffe2\151\uffe2\152\uffe2\153\uffe2\154\uffe2\157\uffe2\160\uffe2" +
    "\162\uffe2\164\uffe2\172\uffe2\211\uffe2\214\uffe2\215\uffe2\216" +
    "\uffe2\217\uffe2\001\002\000\004\212\276\001\002\000\004" +
    "\166\277\001\002\000\004\174\300\001\002\000\274\022" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101" +
    "\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb" +
    "\110\uffeb\111\uffeb\112\uffeb\113\uffeb\114\uffeb\115\uffeb\116" +
    "\uffeb\117\uffeb\120\uffeb\121\uffeb\122\uffeb\123\uffeb\124\uffeb" +
    "\125\uffeb\126\uffeb\127\uffeb\130\uffeb\131\uffeb\132\uffeb\133" +
    "\uffeb\134\uffeb\135\uffeb\136\uffeb\137\uffeb\140\uffeb\141\uffeb" +
    "\142\uffeb\143\uffeb\144\uffeb\145\uffeb\146\uffeb\147\uffeb\150" +
    "\uffeb\151\uffeb\152\uffeb\153\uffeb\154\uffeb\157\uffeb\160\uffeb" +
    "\162\uffeb\164\uffeb\172\uffeb\211\uffeb\214\uffeb\215\uffeb\216" +
    "\uffeb\217\uffeb\001\002\000\132\032\303\033\167\034\166" +
    "\035\165\036\164\037\163\111\157\112\155\113\225\114" +
    "\222\115\220\116\217\117\215\120\214\121\210\122\206" +
    "\123\205\124\204\125\203\126\202\127\201\130\200\131" +
    "\177\132\176\133\175\134\174\135\173\136\172\137\171" +
    "\140\170\141\162\142\161\143\160\144\156\145\226\146" +
    "\223\147\221\150\216\151\213\152\212\153\211\154\207" +
    "\212\302\213\305\001\002\000\022\166\uffd7\176\uffd5\200" +
    "\uffd5\201\uffd5\202\uffd5\203\uffd5\204\uffd5\205\uffd5\001\002" +
    "\000\004\220\342\001\002\000\004\166\335\001\002\000" +
    "\022\166\uffd8\176\uffd6\200\uffd6\201\uffd6\202\uffd6\203\uffd6" +
    "\204\uffd6\205\uffd6\001\002\000\004\166\330\001\002\000" +
    "\020\176\316\200\317\201\315\202\312\203\311\204\313" +
    "\205\320\001\002\000\022\166\uffd4\176\uffd4\200\uffd4\201" +
    "\uffd4\202\uffd4\203\uffd4\204\uffd4\205\uffd4\001\002\000\132" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\111" +
    "\uffcc\112\uffcc\113\uffcc\114\uffcc\115\uffcc\116\uffcc\117\uffcc" +
    "\120\uffcc\121\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\126" +
    "\uffcc\127\uffcc\130\uffcc\131\uffcc\132\uffcc\133\uffcc\134\uffcc" +
    "\135\uffcc\136\uffcc\137\uffcc\140\uffcc\141\uffcc\142\uffcc\143" +
    "\uffcc\144\uffcc\145\uffcc\146\uffcc\147\uffcc\150\uffcc\151\uffcc" +
    "\152\uffcc\153\uffcc\154\uffcc\212\uffcc\213\uffcc\001\002\000" +
    "\132\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\111\uffcb\112\uffcb\113\uffcb\114\uffcb\115\uffcb\116\uffcb\117" +
    "\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125\uffcb" +
    "\126\uffcb\127\uffcb\130\uffcb\131\uffcb\132\uffcb\133\uffcb\134" +
    "\uffcb\135\uffcb\136\uffcb\137\uffcb\140\uffcb\141\uffcb\142\uffcb" +
    "\143\uffcb\144\uffcb\145\uffcb\146\uffcb\147\uffcb\150\uffcb\151" +
    "\uffcb\152\uffcb\153\uffcb\154\uffcb\212\uffcb\213\uffcb\001\002" +
    "\000\132\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\111\uffc8\112\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125" +
    "\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132\uffc8\133\uffc8" +
    "\134\uffc8\135\uffc8\136\uffc8\137\uffc8\140\uffc8\141\uffc8\142" +
    "\uffc8\143\uffc8\144\uffc8\145\uffc8\146\uffc8\147\uffc8\150\uffc8" +
    "\151\uffc8\152\uffc8\153\uffc8\154\uffc8\212\uffc8\213\uffc8\001" +
    "\002\000\132\032\303\033\167\034\166\035\165\036\164" +
    "\037\163\111\157\112\155\113\225\114\222\115\220\116" +
    "\217\117\215\120\214\121\210\122\206\123\205\124\204" +
    "\125\203\126\202\127\201\130\200\131\177\132\176\133" +
    "\175\134\174\135\173\136\172\137\171\140\170\141\162" +
    "\142\161\143\160\144\156\145\226\146\223\147\221\150" +
    "\216\151\213\152\212\153\211\154\207\212\321\213\322" +
    "\001\002\000\132\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\111\uffcd\112\uffcd\113\uffcd\114\uffcd\115\uffcd" +
    "\116\uffcd\117\uffcd\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124" +
    "\uffcd\125\uffcd\126\uffcd\127\uffcd\130\uffcd\131\uffcd\132\uffcd" +
    "\133\uffcd\134\uffcd\135\uffcd\136\uffcd\137\uffcd\140\uffcd\141" +
    "\uffcd\142\uffcd\143\uffcd\144\uffcd\145\uffcd\146\uffcd\147\uffcd" +
    "\150\uffcd\151\uffcd\152\uffcd\153\uffcd\154\uffcd\212\uffcd\213" +
    "\uffcd\001\002\000\132\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\111\uffca\112\uffca\113\uffca\114\uffca\115" +
    "\uffca\116\uffca\117\uffca\120\uffca\121\uffca\122\uffca\123\uffca" +
    "\124\uffca\125\uffca\126\uffca\127\uffca\130\uffca\131\uffca\132" +
    "\uffca\133\uffca\134\uffca\135\uffca\136\uffca\137\uffca\140\uffca" +
    "\141\uffca\142\uffca\143\uffca\144\uffca\145\uffca\146\uffca\147" +
    "\uffca\150\uffca\151\uffca\152\uffca\153\uffca\154\uffca\212\uffca" +
    "\213\uffca\001\002\000\132\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\111\uffce\112\uffce\113\uffce\114\uffce" +
    "\115\uffce\116\uffce\117\uffce\120\uffce\121\uffce\122\uffce\123" +
    "\uffce\124\uffce\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce" +
    "\132\uffce\133\uffce\134\uffce\135\uffce\136\uffce\137\uffce\140" +
    "\uffce\141\uffce\142\uffce\143\uffce\144\uffce\145\uffce\146\uffce" +
    "\147\uffce\150\uffce\151\uffce\152\uffce\153\uffce\154\uffce\212" +
    "\uffce\213\uffce\001\002\000\132\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\111\uffc9\112\uffc9\113\uffc9\114" +
    "\uffc9\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9" +
    "\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131" +
    "\uffc9\132\uffc9\133\uffc9\134\uffc9\135\uffc9\136\uffc9\137\uffc9" +
    "\140\uffc9\141\uffc9\142\uffc9\143\uffc9\144\uffc9\145\uffc9\146" +
    "\uffc9\147\uffc9\150\uffc9\151\uffc9\152\uffc9\153\uffc9\154\uffc9" +
    "\212\uffc9\213\uffc9\001\002\000\022\166\uffd5\176\uffd5\200" +
    "\uffd5\201\uffd5\202\uffd5\203\uffd5\204\uffd5\205\uffd5\001\002" +
    "\000\022\166\uffd6\176\uffd6\200\uffd6\201\uffd6\202\uffd6\203" +
    "\uffd6\204\uffd6\205\uffd6\001\002\000\022\166\uffd2\176\316" +
    "\200\317\201\315\202\312\203\311\204\313\205\320\001" +
    "\002\000\004\166\uffd1\001\002\000\132\032\303\033\167" +
    "\034\166\035\165\036\164\037\163\111\157\112\155\113" +
    "\225\114\222\115\220\116\217\117\215\120\214\121\210" +
    "\122\206\123\205\124\204\125\203\126\202\127\201\130" +
    "\200\131\177\132\176\133\175\134\174\135\173\136\172" +
    "\137\171\140\170\141\162\142\161\143\160\144\156\145" +
    "\226\146\223\147\221\150\216\151\213\152\212\153\211" +
    "\154\207\212\321\213\322\001\002\000\022\166\uffd0\176" +
    "\316\200\317\201\315\202\312\203\311\204\313\205\320" +
    "\001\002\000\004\166\uffcf\001\002\000\004\161\331\001" +
    "\002\000\262\022\112\033\141\034\136\035\134\036\133" +
    "\037\131\040\025\041\022\042\021\043\020\044\017\045" +
    "\124\046\123\047\122\050\121\051\117\052\116\053\115" +
    "\054\114\055\101\056\100\057\077\060\076\061\075\062" +
    "\074\063\073\064\072\065\060\066\057\067\056\070\055" +
    "\071\054\072\053\073\052\074\050\075\037\076\036\077" +
    "\035\100\034\101\033\102\032\103\031\104\030\105\147" +
    "\106\146\107\145\110\144\111\143\112\142\113\140\114" +
    "\137\115\135\116\132\117\130\120\127\121\113\122\111" +
    "\123\110\124\107\125\106\126\105\127\103\130\102\131" +
    "\071\132\070\133\067\134\066\135\064\136\063\137\062" +
    "\140\061\141\051\142\047\143\046\144\045\145\044\146" +
    "\043\147\042\150\041\151\027\152\026\153\024\154\023" +
    "\162\120\211\125\214\065\215\040\217\104\001\002\000" +
    "\004\160\333\001\002\000\004\217\334\001\002\000\274" +
    "\022\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf" +
    "\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107" +
    "\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf\115\uffdf" +
    "\116\uffdf\117\uffdf\120\uffdf\121\uffdf\122\uffdf\123\uffdf\124" +
    "\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf" +
    "\133\uffdf\134\uffdf\135\uffdf\136\uffdf\137\uffdf\140\uffdf\141" +
    "\uffdf\142\uffdf\143\uffdf\144\uffdf\145\uffdf\146\uffdf\147\uffdf" +
    "\150\uffdf\151\uffdf\152\uffdf\153\uffdf\154\uffdf\157\uffdf\160" +
    "\uffdf\162\uffdf\164\uffdf\172\uffdf\211\uffdf\214\uffdf\215\uffdf" +
    "\216\uffdf\217\uffdf\001\002\000\004\161\336\001\002\000" +
    "\262\022\112\033\141\034\136\035\134\036\133\037\131" +
    "\040\025\041\022\042\021\043\020\044\017\045\124\046" +
    "\123\047\122\050\121\051\117\052\116\053\115\054\114" +
    "\055\101\056\100\057\077\060\076\061\075\062\074\063" +
    "\073\064\072\065\060\066\057\067\056\070\055\071\054" +
    "\072\053\073\052\074\050\075\037\076\036\077\035\100" +
    "\034\101\033\102\032\103\031\104\030\105\147\106\146" +
    "\107\145\110\144\111\143\112\142\113\140\114\137\115" +
    "\135\116\132\117\130\120\127\121\113\122\111\123\110" +
    "\124\107\125\106\126\105\127\103\130\102\131\071\132" +
    "\070\133\067\134\066\135\064\136\063\137\062\140\061" +
    "\141\051\142\047\143\046\144\045\145\044\146\043\147" +
    "\042\150\041\151\027\152\026\153\024\154\023\162\120" +
    "\211\125\214\065\215\040\217\104\001\002\000\004\160" +
    "\340\001\002\000\004\217\341\001\002\000\274\022\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0" +
    "\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110" +
    "\uffe0\111\uffe0\112\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0" +
    "\117\uffe0\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124\uffe0\125" +
    "\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0" +
    "\134\uffe0\135\uffe0\136\uffe0\137\uffe0\140\uffe0\141\uffe0\142" +
    "\uffe0\143\uffe0\144\uffe0\145\uffe0\146\uffe0\147\uffe0\150\uffe0" +
    "\151\uffe0\152\uffe0\153\uffe0\154\uffe0\157\uffe0\160\uffe0\162" +
    "\uffe0\164\uffe0\172\uffe0\211\uffe0\214\uffe0\215\uffe0\216\uffe0" +
    "\217\uffe0\001\002\000\022\166\uffd3\176\uffd3\200\uffd3\201" +
    "\uffd3\202\uffd3\203\uffd3\204\uffd3\205\uffd3\001\002\000\004" +
    "\166\344\001\002\000\004\174\345\001\002\000\274\022" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec" +
    "\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101" +
    "\uffec\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec" +
    "\110\uffec\111\uffec\112\uffec\113\uffec\114\uffec\115\uffec\116" +
    "\uffec\117\uffec\120\uffec\121\uffec\122\uffec\123\uffec\124\uffec" +
    "\125\uffec\126\uffec\127\uffec\130\uffec\131\uffec\132\uffec\133" +
    "\uffec\134\uffec\135\uffec\136\uffec\137\uffec\140\uffec\141\uffec" +
    "\142\uffec\143\uffec\144\uffec\145\uffec\146\uffec\147\uffec\150" +
    "\uffec\151\uffec\152\uffec\153\uffec\154\uffec\157\uffec\160\uffec" +
    "\162\uffec\164\uffec\172\uffec\211\uffec\214\uffec\215\uffec\216" +
    "\uffec\217\uffec\001\002\000\132\032\303\033\167\034\166" +
    "\035\165\036\164\037\163\111\157\112\155\113\225\114" +
    "\222\115\220\116\217\117\215\120\214\121\210\122\206" +
    "\123\205\124\204\125\203\126\202\127\201\130\200\131" +
    "\177\132\176\133\175\134\174\135\173\136\172\137\171" +
    "\140\170\141\162\142\161\143\160\144\156\145\226\146" +
    "\223\147\221\150\216\151\213\152\212\153\211\154\207" +
    "\212\321\213\322\001\002\000\004\166\361\001\002\000" +
    "\022\166\351\176\uffd4\200\uffd4\201\uffd4\202\uffd4\203\uffd4" +
    "\204\uffd4\205\uffd4\001\002\000\004\156\352\001\002\000" +
    "\262\022\112\033\141\034\136\035\134\036\133\037\131" +
    "\040\025\041\022\042\021\043\020\044\017\045\124\046" +
    "\123\047\122\050\121\051\117\052\116\053\115\054\114" +
    "\055\101\056\100\057\077\060\076\061\075\062\074\063" +
    "\073\064\072\065\060\066\057\067\056\070\055\071\054" +
    "\072\053\073\052\074\050\075\037\076\036\077\035\100" +
    "\034\101\033\102\032\103\031\104\030\105\147\106\146" +
    "\107\145\110\144\111\143\112\142\113\140\114\137\115" +
    "\135\116\132\117\130\120\127\121\113\122\111\123\110" +
    "\124\107\125\106\126\105\127\103\130\102\131\071\132" +
    "\070\133\067\134\066\135\064\136\063\137\062\140\061" +
    "\141\051\142\047\143\046\144\045\145\044\146\043\147" +
    "\042\150\041\151\027\152\026\153\024\154\023\162\120" +
    "\211\125\214\065\215\040\217\104\001\002\000\006\157" +
    "\uffe4\160\355\001\002\000\004\157\356\001\002\000\274" +
    "\022\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072" +
    "\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7" +
    "\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107" +
    "\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7\114\uffe7\115\uffe7" +
    "\116\uffe7\117\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7\124" +
    "\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\132\uffe7" +
    "\133\uffe7\134\uffe7\135\uffe7\136\uffe7\137\uffe7\140\uffe7\141" +
    "\uffe7\142\uffe7\143\uffe7\144\uffe7\145\uffe7\146\uffe7\147\uffe7" +
    "\150\uffe7\151\uffe7\152\uffe7\153\uffe7\154\uffe7\157\uffe7\160" +
    "\uffe7\162\uffe7\164\uffe7\172\uffe7\211\uffe7\214\uffe7\215\uffe7" +
    "\216\uffe7\217\uffe7\001\002\000\262\022\112\033\141\034" +
    "\136\035\134\036\133\037\131\040\025\041\022\042\021" +
    "\043\020\044\017\045\124\046\123\047\122\050\121\051" +
    "\117\052\116\053\115\054\114\055\101\056\100\057\077" +
    "\060\076\061\075\062\074\063\073\064\072\065\060\066" +
    "\057\067\056\070\055\071\054\072\053\073\052\074\050" +
    "\075\037\076\036\077\035\100\034\101\033\102\032\103" +
    "\031\104\030\105\147\106\146\107\145\110\144\111\143" +
    "\112\142\113\140\114\137\115\135\116\132\117\130\120" +
    "\127\121\113\122\111\123\110\124\107\125\106\126\105" +
    "\127\103\130\102\131\071\132\070\133\067\134\066\135" +
    "\064\136\063\137\062\140\061\141\051\142\047\143\046" +
    "\144\045\145\044\146\043\147\042\150\041\151\027\152" +
    "\026\153\024\154\023\162\120\211\125\214\065\215\040" +
    "\217\104\001\002\000\004\160\360\001\002\000\274\022" +
=======
    "\000\u0146\000\004\021\005\001\002\000\004\002\u0148\001" +
    "\002\000\006\020\006\150\012\001\002\000\004\164\u0139" +
    "\001\002\000\006\024\u0133\025\u0124\001\002\000\004\017" +
    "\u012e\001\002\000\006\020\006\150\u0117\001\002\000\004" +
    "\207\013\001\002\000\004\160\014\001\002\000\006\161" +
    "\016\207\015\001\002\000\004\166\u0112\001\002\000\004" +
    "\164\u010f\001\002\000\004\161\020\001\002\000\004\164" +
    "\021\001\002\000\264\016\114\026\144\027\142\030\137" +
    "\031\135\032\133\033\027\034\026\035\024\036\023\037" +
    "\022\040\126\041\125\042\124\043\123\044\121\045\120" +
    "\046\117\047\116\050\103\051\102\052\101\053\100\054" +
    "\077\055\076\056\075\057\074\060\063\061\062\062\061" +
    "\063\060\064\057\065\056\066\055\067\053\070\042\071" +
    "\041\072\040\073\037\074\036\075\035\076\034\077\033" +
    "\100\153\101\152\102\151\103\150\104\146\105\145\106" +
    "\143\107\141\110\140\111\136\112\134\113\132\114\115" +
    "\115\113\116\112\117\111\120\110\121\107\122\105\123" +
    "\104\124\073\125\072\126\071\127\070\130\067\131\066" +
    "\132\065\133\064\134\054\135\052\136\051\137\050\140" +
    "\047\141\046\142\045\143\044\144\032\145\031\146\030" +
    "\147\025\155\122\202\131\205\127\207\147\211\043\213" +
    "\106\001\002\000\006\170\uffae\172\uffae\001\002\000\006" +
    "\170\uffaf\172\uffaf\001\002\000\006\170\uffb0\172\uffb0\001" +
    "\002\000\006\170\uff66\172\uff66\001\002\000\006\170\uffb1" +
    "\172\uffb1\001\002\000\006\170\uffb2\172\uffb2\001\002\000" +
    "\006\170\uff67\172\uff67\001\002\000\006\170\uff68\172\uff68" +
    "\001\002\000\006\170\uff69\172\uff69\001\002\000\006\170" +
    "\uff8e\172\uff8e\001\002\000\006\170\uff8f\172\uff8f\001\002" +
    "\000\006\170\uff90\172\uff90\001\002\000\006\170\uff91\172" +
    "\uff91\001\002\000\006\170\uff92\172\uff92\001\002\000\006" +
    "\170\uff93\172\uff93\001\002\000\006\170\uff94\172\uff94\001" +
    "\002\000\006\170\uff95\172\uff95\001\002\000\004\160\374" +
    "\001\002\000\006\170\uff6a\172\uff6a\001\002\000\006\170" +
    "\uff6b\172\uff6b\001\002\000\006\170\uff6c\172\uff6c\001\002" +
    "\000\006\170\uff6d\172\uff6d\001\002\000\006\170\uff6e\172" +
    "\uff6e\001\002\000\006\170\uff6f\172\uff6f\001\002\000\006" +
    "\170\uff70\172\uff70\001\002\000\006\170\uff96\172\uff96\001" +
    "\002\000\006\170\uff71\172\uff71\001\002\000\006\170\uff97" +
    "\172\uff97\001\002\000\006\170\uff98\172\uff98\001\002\000" +
    "\006\170\uff99\172\uff99\001\002\000\006\170\uff9a\172\uff9a" +
    "\001\002\000\006\170\uff9b\172\uff9b\001\002\000\006\170" +
    "\uff9c\172\uff9c\001\002\000\006\170\uff9d\172\uff9d\001\002" +
    "\000\006\170\uff72\172\uff72\001\002\000\006\170\uff73\172" +
    "\uff73\001\002\000\006\170\uff74\172\uff74\001\002\000\006" +
    "\170\uff75\172\uff75\001\002\000\006\170\uff76\172\uff76\001" +
    "\002\000\006\170\uff77\172\uff77\001\002\000\006\170\uff78" +
    "\172\uff78\001\002\000\006\170\uff79\172\uff79\001\002\000" +
    "\006\170\uff9e\172\uff9e\001\002\000\006\170\uff9f\172\uff9f" +
    "\001\002\000\006\170\uffa0\172\uffa0\001\002\000\006\170" +
    "\uffa1\172\uffa1\001\002\000\006\170\uffa2\172\uffa2\001\002" +
    "\000\006\170\uffa3\172\uffa3\001\002\000\006\170\uffa4\172" +
    "\uffa4\001\002\000\006\170\uffa5\172\uffa5\001\002\000\006" +
    "\170\uff7a\172\uff7a\001\002\000\006\170\uff7b\172\uff7b\001" +
    "\002\000\004\160\333\001\002\000\006\170\uff7c\172\uff7c" +
    "\001\002\000\006\170\uff7d\172\uff7d\001\002\000\006\170" +
    "\uff7e\172\uff7e\001\002\000\006\170\uff7f\172\uff7f\001\002" +
    "\000\006\170\uff80\172\uff80\001\002\000\004\160\327\001" +
    "\002\000\006\170\uff81\172\uff81\001\002\000\006\170\uffa6" +
    "\172\uffa6\001\002\000\006\170\uffa7\172\uffa7\001\002\000" +
    "\006\170\uffa8\172\uffa8\001\002\000\006\170\uffa9\172\uffa9" +
    "\001\002\000\004\160\272\001\002\000\006\170\uffaa\172" +
    "\uffaa\001\002\000\006\170\uffab\172\uffab\001\002\000\006" +
    "\170\uffac\172\uffac\001\002\000\006\170\uffad\172\uffad\001" +
    "\002\000\004\167\271\001\002\000\276\016\114\026\144" +
    "\027\142\030\137\031\135\032\133\033\027\034\026\035" +
    "\024\036\023\037\022\040\126\041\125\042\124\043\123" +
    "\044\121\045\120\046\117\047\116\050\103\051\102\052" +
    "\101\053\100\054\077\055\076\056\075\057\074\060\063" +
    "\061\062\062\061\063\060\064\057\065\056\066\055\067" +
    "\053\070\042\071\041\072\040\073\037\074\036\075\035" +
    "\076\034\077\033\100\153\101\152\102\151\103\150\104" +
    "\146\105\145\106\143\107\141\110\140\111\136\112\134" +
    "\113\132\114\115\115\113\116\112\117\111\120\110\121" +
    "\107\122\105\123\104\124\073\125\072\126\071\127\070" +
    "\130\067\131\066\132\065\133\064\134\054\135\052\136" +
    "\051\137\050\140\047\141\046\142\045\143\044\144\032" +
    "\145\031\146\030\147\025\152\uffec\153\uffec\155\122\157" +
    "\uffec\165\uffec\202\131\205\127\207\147\211\043\212\uffec" +
    "\213\106\001\002\000\004\207\255\001\002\000\006\170" +
    "\uff82\172\uff82\001\002\000\006\170\uffb3\172\uffb3\001\002" +
    "\000\006\170\uff83\172\uff83\001\002\000\006\170\uffb4\172" +
    "\uffb4\001\002\000\006\170\uff84\172\uff84\001\002\000\006" +
    "\170\uffb5\172\uffb5\001\002\000\006\170\uff85\172\uff85\001" +
    "\002\000\006\170\uff86\172\uff86\001\002\000\006\170\uffb6" +
    "\172\uffb6\001\002\000\006\170\uff87\172\uff87\001\002\000" +
    "\006\170\uffb7\172\uffb7\001\002\000\006\170\uff88\172\uff88" +
    "\001\002\000\006\170\uff89\172\uff89\001\002\000\006\160" +
    "\243\170\242\001\002\000\006\170\uff8a\172\uff8a\001\002" +
    "\000\006\170\uff8b\172\uff8b\001\002\000\006\170\uff8c\172" +
    "\uff8c\001\002\000\006\170\uff8d\172\uff8d\001\002\000\006" +
    "\170\157\172\160\001\002\000\004\165\156\001\002\000" +
    "\006\020\ufff0\150\ufff0\001\002\000\126\026\173\027\172" +
    "\030\171\031\170\032\167\104\163\105\161\106\231\107" +
    "\227\110\224\111\222\112\221\113\220\114\214\115\212" +
    "\116\211\117\210\120\207\121\206\122\205\123\204\124" +
    "\203\125\202\126\201\127\200\130\177\131\176\132\175" +
    "\133\174\134\166\135\165\136\164\137\162\140\232\141" +
    "\226\142\225\143\223\144\217\145\216\146\215\147\213" +
    "\206\234\001\002\000\124\026\173\027\172\030\171\031" +
    "\170\032\167\104\163\105\161\106\231\107\227\110\224" +
    "\111\222\112\221\113\220\114\214\115\212\116\211\117" +
    "\210\120\207\121\206\122\205\123\204\124\203\125\202" +
    "\126\201\127\200\130\177\131\176\132\175\133\174\134" +
    "\166\135\165\136\164\137\162\140\232\141\226\142\225" +
    "\143\223\144\217\145\216\146\215\147\213\001\002\000" +
    "\030\161\uff5f\162\uff5f\167\uff5f\171\uff5f\173\uff5f\174\uff5f" +
    "\175\uff5f\176\uff5f\177\uff5f\200\uff5f\201\uff5f\001\002\000" +
    "\030\161\uff45\162\uff45\167\uff45\171\uff45\173\uff45\174\uff45" +
    "\175\uff45\176\uff45\177\uff45\200\uff45\201\uff45\001\002\000" +
    "\030\161\uff60\162\uff60\167\uff60\171\uff60\173\uff60\174\uff60" +
    "\175\uff60\176\uff60\177\uff60\200\uff60\201\uff60\001\002\000" +
    "\030\161\uff46\162\uff46\167\uff46\171\uff46\173\uff46\174\uff46" +
    "\175\uff46\176\uff46\177\uff46\200\uff46\201\uff46\001\002\000" +
    "\030\161\uff47\162\uff47\167\uff47\171\uff47\173\uff47\174\uff47" +
    "\175\uff47\176\uff47\177\uff47\200\uff47\201\uff47\001\002\000" +
    "\030\161\uff48\162\uff48\167\uff48\171\uff48\173\uff48\174\uff48" +
    "\175\uff48\176\uff48\177\uff48\200\uff48\201\uff48\001\002\000" +
    "\030\161\uff61\162\uff61\167\uff61\171\uff61\173\uff61\174\uff61" +
    "\175\uff61\176\uff61\177\uff61\200\uff61\201\uff61\001\002\000" +
    "\030\161\uff62\162\uff62\167\uff62\171\uff62\173\uff62\174\uff62" +
    "\175\uff62\176\uff62\177\uff62\200\uff62\201\uff62\001\002\000" +
    "\030\161\uff63\162\uff63\167\uff63\171\uff63\173\uff63\174\uff63" +
    "\175\uff63\176\uff63\177\uff63\200\uff63\201\uff63\001\002\000" +
    "\030\161\uff64\162\uff64\167\uff64\171\uff64\173\uff64\174\uff64" +
    "\175\uff64\176\uff64\177\uff64\200\uff64\201\uff64\001\002\000" +
    "\030\161\uff65\162\uff65\167\uff65\171\uff65\173\uff65\174\uff65" +
    "\175\uff65\176\uff65\177\uff65\200\uff65\201\uff65\001\002\000" +
    "\030\161\uff49\162\uff49\167\uff49\171\uff49\173\uff49\174\uff49" +
    "\175\uff49\176\uff49\177\uff49\200\uff49\201\uff49\001\002\000" +
    "\030\161\uff4a\162\uff4a\167\uff4a\171\uff4a\173\uff4a\174\uff4a" +
    "\175\uff4a\176\uff4a\177\uff4a\200\uff4a\201\uff4a\001\002\000" +
    "\030\161\uff4b\162\uff4b\167\uff4b\171\uff4b\173\uff4b\174\uff4b" +
    "\175\uff4b\176\uff4b\177\uff4b\200\uff4b\201\uff4b\001\002\000" +
    "\030\161\uff4c\162\uff4c\167\uff4c\171\uff4c\173\uff4c\174\uff4c" +
    "\175\uff4c\176\uff4c\177\uff4c\200\uff4c\201\uff4c\001\002\000" +
    "\030\161\uff4d\162\uff4d\167\uff4d\171\uff4d\173\uff4d\174\uff4d" +
    "\175\uff4d\176\uff4d\177\uff4d\200\uff4d\201\uff4d\001\002\000" +
    "\030\161\uff4e\162\uff4e\167\uff4e\171\uff4e\173\uff4e\174\uff4e" +
    "\175\uff4e\176\uff4e\177\uff4e\200\uff4e\201\uff4e\001\002\000" +
    "\030\161\uff4f\162\uff4f\167\uff4f\171\uff4f\173\uff4f\174\uff4f" +
    "\175\uff4f\176\uff4f\177\uff4f\200\uff4f\201\uff4f\001\002\000" +
    "\030\161\uff50\162\uff50\167\uff50\171\uff50\173\uff50\174\uff50" +
    "\175\uff50\176\uff50\177\uff50\200\uff50\201\uff50\001\002\000" +
    "\030\161\uff51\162\uff51\167\uff51\171\uff51\173\uff51\174\uff51" +
    "\175\uff51\176\uff51\177\uff51\200\uff51\201\uff51\001\002\000" +
    "\030\161\uff52\162\uff52\167\uff52\171\uff52\173\uff52\174\uff52" +
    "\175\uff52\176\uff52\177\uff52\200\uff52\201\uff52\001\002\000" +
    "\030\161\uff53\162\uff53\167\uff53\171\uff53\173\uff53\174\uff53" +
    "\175\uff53\176\uff53\177\uff53\200\uff53\201\uff53\001\002\000" +
    "\030\161\uff54\162\uff54\167\uff54\171\uff54\173\uff54\174\uff54" +
    "\175\uff54\176\uff54\177\uff54\200\uff54\201\uff54\001\002\000" +
    "\030\161\uff55\162\uff55\167\uff55\171\uff55\173\uff55\174\uff55" +
    "\175\uff55\176\uff55\177\uff55\200\uff55\201\uff55\001\002\000" +
    "\030\161\uff56\162\uff56\167\uff56\171\uff56\173\uff56\174\uff56" +
    "\175\uff56\176\uff56\177\uff56\200\uff56\201\uff56\001\002\000" +
    "\030\161\uff57\162\uff57\167\uff57\171\uff57\173\uff57\174\uff57" +
    "\175\uff57\176\uff57\177\uff57\200\uff57\201\uff57\001\002\000" +
    "\030\161\uff3d\162\uff3d\167\uff3d\171\uff3d\173\uff3d\174\uff3d" +
    "\175\uff3d\176\uff3d\177\uff3d\200\uff3d\201\uff3d\001\002\000" +
    "\030\161\uff58\162\uff58\167\uff58\171\uff58\173\uff58\174\uff58" +
    "\175\uff58\176\uff58\177\uff58\200\uff58\201\uff58\001\002\000" +
    "\030\161\uff3e\162\uff3e\167\uff3e\171\uff3e\173\uff3e\174\uff3e" +
    "\175\uff3e\176\uff3e\177\uff3e\200\uff3e\201\uff3e\001\002\000" +
    "\030\161\uff3f\162\uff3f\167\uff3f\171\uff3f\173\uff3f\174\uff3f" +
    "\175\uff3f\176\uff3f\177\uff3f\200\uff3f\201\uff3f\001\002\000" +
    "\030\161\uff40\162\uff40\167\uff40\171\uff40\173\uff40\174\uff40" +
    "\175\uff40\176\uff40\177\uff40\200\uff40\201\uff40\001\002\000" +
    "\030\161\uff59\162\uff59\167\uff59\171\uff59\173\uff59\174\uff59" +
    "\175\uff59\176\uff59\177\uff59\200\uff59\201\uff59\001\002\000" +
    "\030\161\uff5a\162\uff5a\167\uff5a\171\uff5a\173\uff5a\174\uff5a" +
    "\175\uff5a\176\uff5a\177\uff5a\200\uff5a\201\uff5a\001\002\000" +
    "\030\161\uff5b\162\uff5b\167\uff5b\171\uff5b\173\uff5b\174\uff5b" +
    "\175\uff5b\176\uff5b\177\uff5b\200\uff5b\201\uff5b\001\002\000" +
    "\030\161\uff41\162\uff41\167\uff41\171\uff41\173\uff41\174\uff41" +
    "\175\uff41\176\uff41\177\uff41\200\uff41\201\uff41\001\002\000" +
    "\030\161\uff5c\162\uff5c\167\uff5c\171\uff5c\173\uff5c\174\uff5c" +
    "\175\uff5c\176\uff5c\177\uff5c\200\uff5c\201\uff5c\001\002\000" +
    "\030\161\uff42\162\uff42\167\uff42\171\uff42\173\uff42\174\uff42" +
    "\175\uff42\176\uff42\177\uff42\200\uff42\201\uff42\001\002\000" +
    "\030\161\uff43\162\uff43\167\uff43\171\uff43\173\uff43\174\uff43" +
    "\175\uff43\176\uff43\177\uff43\200\uff43\201\uff43\001\002\000" +
    "\030\161\uff5d\162\uff5d\167\uff5d\171\uff5d\173\uff5d\174\uff5d" +
    "\175\uff5d\176\uff5d\177\uff5d\200\uff5d\201\uff5d\001\002\000" +
    "\004\167\233\001\002\000\030\161\uff5e\162\uff5e\167\uff5e" +
    "\171\uff5e\173\uff5e\174\uff5e\175\uff5e\176\uff5e\177\uff5e\200" +
    "\uff5e\201\uff5e\001\002\000\030\161\uff44\162\uff44\167\uff44" +
    "\171\uff44\173\uff44\174\uff44\175\uff44\176\uff44\177\uff44\200" +
    "\uff44\201\uff44\001\002\000\276\016\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7" +
    "\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105" +
    "\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7" +
    "\114\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7\122" +
    "\uffe7\123\uffe7\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7" +
    "\131\uffe7\132\uffe7\133\uffe7\134\uffe7\135\uffe7\136\uffe7\137" +
    "\uffe7\140\uffe7\141\uffe7\142\uffe7\143\uffe7\144\uffe7\145\uffe7" +
    "\146\uffe7\147\uffe7\152\uffe7\153\uffe7\155\uffe7\157\uffe7\165" +
    "\uffe7\202\uffe7\205\uffe7\207\uffe7\211\uffe7\212\uffe7\213\uffe7" +
    "\001\002\000\004\167\241\001\002\000\004\162\236\001" +
    "\002\000\004\206\237\001\002\000\004\167\240\001\002" +
    "\000\276\016\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
>>>>>>> origin/master
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3" +
    "\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101" +
    "\uffe3\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3" +
    "\110\uffe3\111\uffe3\112\uffe3\113\uffe3\114\uffe3\115\uffe3\116" +
    "\uffe3\117\uffe3\120\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3" +
    "\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3\133" +
    "\uffe3\134\uffe3\135\uffe3\136\uffe3\137\uffe3\140\uffe3\141\uffe3" +
<<<<<<< HEAD
    "\142\uffe3\143\uffe3\144\uffe3\145\uffe3\146\uffe3\147\uffe3\150" +
    "\uffe3\151\uffe3\152\uffe3\153\uffe3\154\uffe3\157\uffe3\160\uffe3" +
    "\162\uffe3\164\uffe3\172\uffe3\211\uffe3\214\uffe3\215\uffe3\216" +
    "\uffe3\217\uffe3\001\002\000\004\156\362\001\002\000\262" +
    "\022\112\033\141\034\136\035\134\036\133\037\131\040" +
    "\025\041\022\042\021\043\020\044\017\045\124\046\123" +
    "\047\122\050\121\051\117\052\116\053\115\054\114\055" +
    "\101\056\100\057\077\060\076\061\075\062\074\063\073" +
    "\064\072\065\060\066\057\067\056\070\055\071\054\072" +
    "\053\073\052\074\050\075\037\076\036\077\035\100\034" +
    "\101\033\102\032\103\031\104\030\105\147\106\146\107" +
    "\145\110\144\111\143\112\142\113\140\114\137\115\135" +
    "\116\132\117\130\120\127\121\113\122\111\123\110\124" +
    "\107\125\106\126\105\127\103\130\102\131\071\132\070" +
    "\133\067\134\066\135\064\136\063\137\062\140\061\141" +
    "\051\142\047\143\046\144\045\145\044\146\043\147\042" +
    "\150\041\151\027\152\026\153\024\154\023\162\120\211" +
    "\125\214\065\215\040\217\104\001\002\000\006\157\uffe6" +
    "\160\365\001\002\000\004\157\366\001\002\000\274\022" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8" +
    "\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101" +
    "\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8" +
    "\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8\116" +
    "\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\124\uffe8" +
    "\125\uffe8\126\uffe8\127\uffe8\130\uffe8\131\uffe8\132\uffe8\133" +
    "\uffe8\134\uffe8\135\uffe8\136\uffe8\137\uffe8\140\uffe8\141\uffe8" +
    "\142\uffe8\143\uffe8\144\uffe8\145\uffe8\146\uffe8\147\uffe8\150" +
    "\uffe8\151\uffe8\152\uffe8\153\uffe8\154\uffe8\157\uffe8\160\uffe8" +
    "\162\uffe8\164\uffe8\172\uffe8\211\uffe8\214\uffe8\215\uffe8\216" +
    "\uffe8\217\uffe8\001\002\000\262\022\112\033\141\034\136" +
    "\035\134\036\133\037\131\040\025\041\022\042\021\043" +
    "\020\044\017\045\124\046\123\047\122\050\121\051\117" +
    "\052\116\053\115\054\114\055\101\056\100\057\077\060" +
    "\076\061\075\062\074\063\073\064\072\065\060\066\057" +
    "\067\056\070\055\071\054\072\053\073\052\074\050\075" +
    "\037\076\036\077\035\100\034\101\033\102\032\103\031" +
    "\104\030\105\147\106\146\107\145\110\144\111\143\112" +
    "\142\113\140\114\137\115\135\116\132\117\130\120\127" +
    "\121\113\122\111\123\110\124\107\125\106\126\105\127" +
    "\103\130\102\131\071\132\070\133\067\134\066\135\064" +
    "\136\063\137\062\140\061\141\051\142\047\143\046\144" +
    "\045\145\044\146\043\147\042\150\041\151\027\152\026" +
    "\153\024\154\023\162\120\211\125\214\065\215\040\217" +
    "\104\001\002\000\004\160\370\001\002\000\274\022\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5" +
    "\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5\110" +
    "\uffe5\111\uffe5\112\uffe5\113\uffe5\114\uffe5\115\uffe5\116\uffe5" +
    "\117\uffe5\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125" +
    "\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5\132\uffe5\133\uffe5" +
    "\134\uffe5\135\uffe5\136\uffe5\137\uffe5\140\uffe5\141\uffe5\142" +
    "\uffe5\143\uffe5\144\uffe5\145\uffe5\146\uffe5\147\uffe5\150\uffe5" +
    "\151\uffe5\152\uffe5\153\uffe5\154\uffe5\157\uffe5\160\uffe5\162" +
    "\uffe5\164\uffe5\172\uffe5\211\uffe5\214\uffe5\215\uffe5\216\uffe5" +
    "\217\uffe5\001\002\000\006\030\u0101\031\u0102\001\002\000" +
    "\004\214\373\001\002\000\004\165\374\001\002\000\004" +
    "\166\375\001\002\000\004\171\376\001\002\000\262\022" +
    "\112\033\141\034\136\035\134\036\133\037\131\040\025" +
    "\041\022\042\021\043\020\044\017\045\124\046\123\047" +
    "\122\050\121\051\117\052\116\053\115\054\114\055\101" +
    "\056\100\057\077\060\076\061\075\062\074\063\073\064" +
    "\072\065\060\066\057\067\056\070\055\071\054\072\053" +
    "\073\052\074\050\075\037\076\036\077\035\100\034\101" +
    "\033\102\032\103\031\104\030\105\147\106\146\107\145" +
    "\110\144\111\143\112\142\113\140\114\137\115\135\116" +
    "\132\117\130\120\127\121\113\122\111\123\110\124\107" +
    "\125\106\126\105\127\103\130\102\131\071\132\070\133" +
    "\067\134\066\135\064\136\063\137\062\140\061\141\051" +
    "\142\047\143\046\144\045\145\044\146\043\147\042\150" +
    "\041\151\027\152\026\153\024\154\023\162\120\211\125" +
    "\214\065\215\040\217\104\001\002\000\004\172\u0100\001" +
    "\002\000\006\024\ufff1\155\ufff1\001\002\000\004\165\u0107" +
    "\001\002\000\004\171\u0104\001\002\000\004\023\ufffd\001" +
    "\002\000\262\022\112\033\141\034\136\035\134\036\133" +
    "\037\131\040\025\041\022\042\021\043\020\044\017\045" +
    "\124\046\123\047\122\050\121\051\117\052\116\053\115" +
    "\054\114\055\101\056\100\057\077\060\076\061\075\062" +
    "\074\063\073\064\072\065\060\066\057\067\056\070\055" +
    "\071\054\072\053\073\052\074\050\075\037\076\036\077" +
    "\035\100\034\101\033\102\032\103\031\104\030\105\147" +
    "\106\146\107\145\110\144\111\143\112\142\113\140\114" +
    "\137\115\135\116\132\117\130\120\127\121\113\122\111" +
    "\123\110\124\107\125\106\126\105\127\103\130\102\131" +
    "\071\132\070\133\067\134\066\135\064\136\063\137\062" +
    "\140\061\141\051\142\047\143\046\144\045\145\044\146" +
    "\043\147\042\150\041\151\027\152\026\153\024\154\023" +
    "\162\120\211\125\214\065\215\040\217\104\001\002\000" +
    "\004\172\u0106\001\002\000\004\023\ufff5\001\002\000\004" +
    "\166\u0108\001\002\000\004\174\u0109\001\002\000\004\031" +
    "\u0102\001\002\000\004\023\ufffc\001\002\000\004\002\001" +
    "\001\002\000\004\171\u010d\001\002\000\264\022\112\033" +
    "\141\034\136\035\134\036\133\037\131\040\025\041\022" +
    "\042\021\043\020\044\017\045\124\046\123\047\122\050" +
    "\121\051\117\052\116\053\115\054\114\055\101\056\100" +
    "\057\077\060\076\061\075\062\074\063\073\064\072\065" +
    "\060\066\057\067\056\070\055\071\054\072\053\073\052" +
    "\074\050\075\037\076\036\077\035\100\034\101\033\102" +
    "\032\103\031\104\030\105\147\106\146\107\145\110\144" +
    "\111\143\112\142\113\140\114\137\115\135\116\132\117" +
    "\130\120\127\121\113\122\111\123\110\124\107\125\106" +
    "\126\105\127\103\130\102\131\071\132\070\133\067\134" +
    "\066\135\064\136\063\137\062\140\061\141\051\142\047" +
    "\143\046\144\045\145\044\146\043\147\042\150\041\151" +
    "\027\152\026\153\024\154\023\162\120\172\u010e\211\125" +
    "\214\065\215\040\217\104\001\002\000\004\002\ufff3\001" +
    "\002\000\004\172\u0110\001\002\000\004\002\ufff4\001\002" +
    "\000\004\165\u0113\001\002\000\004\023\uffff\001\002\000" +
    "\004\166\u0114\001\002\000\004\174\u0115\001\002\000\004" +
    "\031\u0102\001\002\000\004\023\ufffe\001\002\000\246\033" +
    "\141\034\136\035\134\036\133\037\131\040\025\041\022" +
    "\042\021\043\020\044\017\045\124\046\123\047\122\050" +
    "\121\051\117\052\116\053\115\054\114\055\101\056\100" +
    "\057\077\060\076\061\075\062\074\063\073\064\072\065" +
    "\060\066\057\067\056\070\055\071\054\072\053\073\052" +
    "\074\050\075\037\076\036\077\035\100\034\101\033\102" +
    "\032\103\031\104\030\105\147\106\146\107\145\110\144" +
    "\111\143\112\142\113\140\114\137\115\135\116\132\117" +
    "\130\120\127\121\113\122\111\123\110\124\107\125\106" +
    "\126\105\127\103\130\102\131\071\132\070\133\067\134" +
    "\066\135\064\136\063\137\062\140\061\141\051\142\047" +
    "\143\046\144\045\145\044\146\043\147\042\150\041\151" +
    "\027\152\026\153\024\154\023\001\002\000\264\022\112" +
    "\033\141\034\136\035\134\036\133\037\131\040\025\041" +
    "\022\042\021\043\020\044\017\045\124\046\123\047\122" +
    "\050\121\051\117\052\116\053\115\054\114\055\101\056" +
    "\100\057\077\060\076\061\075\062\074\063\073\064\072" +
    "\065\060\066\057\067\056\070\055\071\054\072\053\073" +
    "\052\074\050\075\037\076\036\077\035\100\034\101\033" +
    "\102\032\103\031\104\030\105\147\106\146\107\145\110" +
    "\144\111\143\112\142\113\140\114\137\115\135\116\132" +
    "\117\130\120\127\121\113\122\111\123\110\124\107\125" +
    "\106\126\105\127\103\130\102\131\071\132\070\133\067" +
    "\134\066\135\064\136\063\137\062\140\061\141\051\142" +
    "\047\143\046\144\045\145\044\146\043\147\042\150\041" +
    "\151\027\152\026\153\024\154\023\162\120\172\u011f\211" +
    "\125\214\065\215\040\217\104\001\002\000\004\175\u011a" +
    "\001\002\000\006\026\u011d\027\u011b\001\002\000\004\174" +
    "\ufff6\001\002\000\004\174\u011e\001\002\000\004\174\ufff7" +
    "\001\002\000\264\022\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9" +
    "\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105" +
    "\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9" +
    "\114\ufff9\115\ufff9\116\ufff9\117\ufff9\120\ufff9\121\ufff9\122" +
    "\ufff9\123\ufff9\124\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9" +
    "\131\ufff9\132\ufff9\133\ufff9\134\ufff9\135\ufff9\136\ufff9\137" +
    "\ufff9\140\ufff9\141\ufff9\142\ufff9\143\ufff9\144\ufff9\145\ufff9" +
    "\146\ufff9\147\ufff9\150\ufff9\151\ufff9\152\ufff9\153\ufff9\154" +
    "\ufff9\162\ufff9\172\ufff9\211\ufff9\214\ufff9\215\ufff9\217\ufff9" +
    "\001\002\000\006\030\ufffb\031\ufffb\001\002\000\006\175" +
    "\u0123\177\154\001\002\000\004\172\u0122\001\002\000\006" +
    "\030\ufffa\031\ufffa\001\002\000\132\026\u011d\027\u011b\033" +
    "\167\034\166\035\165\036\164\037\163\111\157\112\155" +
    "\113\225\114\222\115\220\116\217\117\215\120\214\121" +
    "\210\122\206\123\205\124\204\125\203\126\202\127\201" +
    "\130\200\131\177\132\176\133\175\134\174\135\173\136" +
    "\172\137\171\140\170\141\162\142\161\143\160\144\156" +
    "\145\226\146\223\147\221\150\216\151\213\152\212\153" +
    "\211\154\207\212\230\001\002\000\004\174\u0125\001\002" +
    "\000\264\022\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8" +
    "\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8\106" +
    "\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\114\ufff8" +
    "\115\ufff8\116\ufff8\117\ufff8\120\ufff8\121\ufff8\122\ufff8\123" +
    "\ufff8\124\ufff8\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8" +
    "\132\ufff8\133\ufff8\134\ufff8\135\ufff8\136\ufff8\137\ufff8\140" +
    "\ufff8\141\ufff8\142\ufff8\143\ufff8\144\ufff8\145\ufff8\146\ufff8" +
    "\147\ufff8\150\ufff8\151\ufff8\152\ufff8\153\ufff8\154\ufff8\162" +
    "\ufff8\172\ufff8\211\ufff8\214\ufff8\215\ufff8\217\ufff8\001\002" +
    "\000\004\002\000\001\002" });
=======
    "\142\uffe3\143\uffe3\144\uffe3\145\uffe3\146\uffe3\147\uffe3\152" +
    "\uffe3\153\uffe3\155\uffe3\157\uffe3\165\uffe3\202\uffe3\205\uffe3" +
    "\207\uffe3\211\uffe3\212\uffe3\213\uffe3\001\002\000\276\016" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6" +
    "\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111" +
    "\uffe6\112\uffe6\113\uffe6\114\uffe6\115\uffe6\116\uffe6\117\uffe6" +
    "\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6\126" +
    "\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6\133\uffe6\134\uffe6" +
    "\135\uffe6\136\uffe6\137\uffe6\140\uffe6\141\uffe6\142\uffe6\143" +
    "\uffe6\144\uffe6\145\uffe6\146\uffe6\147\uffe6\152\uffe6\153\uffe6" +
    "\155\uffe6\157\uffe6\165\uffe6\202\uffe6\205\uffe6\207\uffe6\211" +
    "\uffe6\212\uffe6\213\uffe6\001\002\000\014\010\251\011\253" +
    "\012\250\206\247\207\246\001\002\000\004\161\244\001" +
    "\002\000\004\167\245\001\002\000\276\016\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104" +
    "\uffe5\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5" +
    "\113\uffe5\114\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121" +
    "\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5" +
    "\130\uffe5\131\uffe5\132\uffe5\133\uffe5\134\uffe5\135\uffe5\136" +
    "\uffe5\137\uffe5\140\uffe5\141\uffe5\142\uffe5\143\uffe5\144\uffe5" +
    "\145\uffe5\146\uffe5\147\uffe5\152\uffe5\153\uffe5\155\uffe5\157" +
    "\uffe5\165\uffe5\202\uffe5\205\uffe5\207\uffe5\211\uffe5\212\uffe5" +
    "\213\uffe5\001\002\000\004\167\uffbc\001\002\000\004\167" +
    "\uffbb\001\002\000\004\167\uffb8\001\002\000\004\167\uffb9" +
    "\001\002\000\004\167\254\001\002\000\004\167\uffba\001" +
    "\002\000\276\016\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107" +
    "\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\124" +
    "\uffe8\125\uffe8\126\uffe8\127\uffe8\130\uffe8\131\uffe8\132\uffe8" +
    "\133\uffe8\134\uffe8\135\uffe8\136\uffe8\137\uffe8\140\uffe8\141" +
    "\uffe8\142\uffe8\143\uffe8\144\uffe8\145\uffe8\146\uffe8\147\uffe8" +
    "\152\uffe8\153\uffe8\155\uffe8\157\uffe8\165\uffe8\202\uffe8\205" +
    "\uffe8\207\uffe8\211\uffe8\212\uffe8\213\uffe8\001\002\000\004" +
    "\166\256\001\002\000\012\004\257\005\260\006\262\007" +
    "\263\001\002\000\012\015\uffc0\161\uffc0\167\uffc0\170\uffc0" +
    "\001\002\000\012\015\uffbf\161\uffbf\167\uffbf\170\uffbf\001" +
    "\002\000\006\167\265\170\264\001\002\000\012\015\uffbe" +
    "\161\uffbe\167\uffbe\170\uffbe\001\002\000\012\015\uffbd\161" +
    "\uffbd\167\uffbd\170\uffbd\001\002\000\014\010\251\011\253" +
    "\012\250\206\247\207\246\001\002\000\276\016\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075" +
    "\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea" +
    "\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112" +
    "\uffea\113\uffea\114\uffea\115\uffea\116\uffea\117\uffea\120\uffea" +
    "\121\uffea\122\uffea\123\uffea\124\uffea\125\uffea\126\uffea\127" +
    "\uffea\130\uffea\131\uffea\132\uffea\133\uffea\134\uffea\135\uffea" +
    "\136\uffea\137\uffea\140\uffea\141\uffea\142\uffea\143\uffea\144" +
    "\uffea\145\uffea\146\uffea\147\uffea\152\uffea\153\uffea\155\uffea" +
    "\157\uffea\165\uffea\202\uffea\205\uffea\207\uffea\211\uffea\212" +
    "\uffea\213\uffea\001\002\000\004\167\267\001\002\000\276" +
    "\016\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9" +
    "\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102" +
    "\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9" +
    "\111\uffe9\112\uffe9\113\uffe9\114\uffe9\115\uffe9\116\uffe9\117" +
    "\uffe9\120\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125\uffe9" +
    "\126\uffe9\127\uffe9\130\uffe9\131\uffe9\132\uffe9\133\uffe9\134" +
    "\uffe9\135\uffe9\136\uffe9\137\uffe9\140\uffe9\141\uffe9\142\uffe9" +
    "\143\uffe9\144\uffe9\145\uffe9\146\uffe9\147\uffe9\152\uffe9\153" +
    "\uffe9\155\uffe9\157\uffe9\165\uffe9\202\uffe9\205\uffe9\207\uffe9" +
    "\211\uffe9\212\uffe9\213\uffe9\001\002\000\014\152\uffeb\153" +
    "\uffeb\157\uffeb\165\uffeb\212\uffeb\001\002\000\276\016\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2" +
    "\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103" +
    "\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2" +
    "\112\uffe2\113\uffe2\114\uffe2\115\uffe2\116\uffe2\117\uffe2\120" +
    "\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2" +
    "\127\uffe2\130\uffe2\131\uffe2\132\uffe2\133\uffe2\134\uffe2\135" +
    "\uffe2\136\uffe2\137\uffe2\140\uffe2\141\uffe2\142\uffe2\143\uffe2" +
    "\144\uffe2\145\uffe2\146\uffe2\147\uffe2\152\uffe2\153\uffe2\155" +
    "\uffe2\157\uffe2\165\uffe2\202\uffe2\205\uffe2\207\uffe2\211\uffe2" +
    "\212\uffe2\213\uffe2\001\002\000\130\026\173\027\172\030" +
    "\171\031\170\032\167\104\163\105\161\106\231\107\227" +
    "\110\224\111\222\112\221\113\220\114\214\115\212\116" +
    "\211\117\210\120\207\121\206\122\205\123\204\124\203" +
    "\125\202\126\201\127\200\130\177\131\176\132\175\133" +
    "\174\134\166\135\165\136\164\137\162\140\232\141\226" +
    "\142\225\143\223\144\217\145\216\146\215\147\213\206" +
    "\273\207\274\001\002\000\006\161\uffd0\166\uffd0\001\002" +
    "\000\006\161\uffd1\166\uffd1\001\002\000\004\161\322\001" +
    "\002\000\004\161\277\001\002\000\004\156\300\001\002" +
    "\000\006\157\302\212\303\001\002\000\010\153\311\157" +
    "\312\212\313\001\002\000\004\166\307\001\002\000\006" +
    "\206\273\207\274\001\002\000\004\166\305\001\002\000" +
    "\272\016\114\026\144\027\142\030\137\031\135\032\133" +
    "\033\027\034\026\035\024\036\023\037\022\040\126\041" +
    "\125\042\124\043\123\044\121\045\120\046\117\047\116" +
    "\050\103\051\102\052\101\053\100\054\077\055\076\056" +
    "\075\057\074\060\063\061\062\062\061\063\060\064\057" +
    "\065\056\066\055\067\053\070\042\071\041\072\040\073" +
    "\037\074\036\075\035\076\034\077\033\100\153\101\152" +
    "\102\151\103\150\104\146\105\145\106\143\107\141\110" +
    "\140\111\136\112\134\113\132\114\115\115\113\116\112" +
    "\117\111\120\110\121\107\122\105\123\104\124\073\125" +
    "\072\126\071\127\070\130\067\131\066\132\065\133\064" +
    "\134\054\135\052\136\051\137\050\140\047\141\046\142" +
    "\045\143\044\144\032\145\031\146\030\147\025\153\uffd3" +
    "\155\122\157\uffd3\202\131\205\127\207\147\211\043\212" +
    "\uffd3\213\106\001\002\000\010\153\uffd7\157\uffd7\212\uffd7" +
    "\001\002\000\264\016\114\026\144\027\142\030\137\031" +
    "\135\032\133\033\027\034\026\035\024\036\023\037\022" +
    "\040\126\041\125\042\124\043\123\044\121\045\120\046" +
    "\117\047\116\050\103\051\102\052\101\053\100\054\077" +
    "\055\076\056\075\057\074\060\063\061\062\062\061\063" +
    "\060\064\057\065\056\066\055\067\053\070\042\071\041" +
    "\072\040\073\037\074\036\075\035\076\034\077\033\100" +
    "\153\101\152\102\151\103\150\104\146\105\145\106\143" +
    "\107\141\110\140\111\136\112\134\113\132\114\115\115" +
    "\113\116\112\117\111\120\110\121\107\122\105\123\104" +
    "\124\073\125\072\126\071\127\070\130\067\131\066\132" +
    "\065\133\064\134\054\135\052\136\051\137\050\140\047" +
    "\141\046\142\045\143\044\144\032\145\031\146\030\147" +
    "\025\155\122\202\131\205\127\207\147\211\043\213\106" +
    "\001\002\000\010\153\uffd6\157\uffd6\212\uffd6\001\002\000" +
    "\004\155\321\001\002\000\004\166\317\001\002\000\006" +
    "\206\273\207\274\001\002\000\004\166\315\001\002\000" +
    "\272\016\114\026\144\027\142\030\137\031\135\032\133" +
    "\033\027\034\026\035\024\036\023\037\022\040\126\041" +
    "\125\042\124\043\123\044\121\045\120\046\117\047\116" +
    "\050\103\051\102\052\101\053\100\054\077\055\076\056" +
    "\075\057\074\060\063\061\062\062\061\063\060\064\057" +
    "\065\056\066\055\067\053\070\042\071\041\072\040\073" +
    "\037\074\036\075\035\076\034\077\033\100\153\101\152" +
    "\102\151\103\150\104\146\105\145\106\143\107\141\110" +
    "\140\111\136\112\134\113\132\114\115\115\113\116\112" +
    "\117\111\120\110\121\107\122\105\123\104\124\073\125" +
    "\072\126\071\127\070\130\067\131\066\132\065\133\064" +
    "\134\054\135\052\136\051\137\050\140\047\141\046\142" +
    "\045\143\044\144\032\145\031\146\030\147\025\153\uffd2" +
    "\155\122\157\uffd2\202\131\205\127\207\147\211\043\212" +
    "\uffd2\213\106\001\002\000\010\153\uffd5\157\uffd5\212\uffd5" +
    "\001\002\000\264\016\114\026\144\027\142\030\137\031" +
    "\135\032\133\033\027\034\026\035\024\036\023\037\022" +
    "\040\126\041\125\042\124\043\123\044\121\045\120\046" +
    "\117\047\116\050\103\051\102\052\101\053\100\054\077" +
    "\055\076\056\075\057\074\060\063\061\062\062\061\063" +
    "\060\064\057\065\056\066\055\067\053\070\042\071\041" +
    "\072\040\073\037\074\036\075\035\076\034\077\033\100" +
    "\153\101\152\102\151\103\150\104\146\105\145\106\143" +
    "\107\141\110\140\111\136\112\134\113\132\114\115\115" +
    "\113\116\112\117\111\120\110\121\107\122\105\123\104" +
    "\124\073\125\072\126\071\127\070\130\067\131\066\132" +
    "\065\133\064\134\054\135\052\136\051\137\050\140\047" +
    "\141\046\142\045\143\044\144\032\145\031\146\030\147" +
    "\025\155\122\202\131\205\127\207\147\211\043\213\106" +
    "\001\002\000\010\153\uffd4\157\uffd4\212\uffd4\001\002\000" +
    "\276\016\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda" +
    "\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107\uffda\110" +
    "\uffda\111\uffda\112\uffda\113\uffda\114\uffda\115\uffda\116\uffda" +
    "\117\uffda\120\uffda\121\uffda\122\uffda\123\uffda\124\uffda\125" +
    "\uffda\126\uffda\127\uffda\130\uffda\131\uffda\132\uffda\133\uffda" +
    "\134\uffda\135\uffda\136\uffda\137\uffda\140\uffda\141\uffda\142" +
    "\uffda\143\uffda\144\uffda\145\uffda\146\uffda\147\uffda\152\uffda" +
    "\153\uffda\155\uffda\157\uffda\165\uffda\202\uffda\205\uffda\207" +
    "\uffda\211\uffda\212\uffda\213\uffda\001\002\000\004\156\323" +
    "\001\002\000\006\157\302\212\303\001\002\000\010\153" +
    "\325\157\312\212\313\001\002\000\004\155\326\001\002" +
    "\000\276\016\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101" +
    "\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb" +
    "\110\uffdb\111\uffdb\112\uffdb\113\uffdb\114\uffdb\115\uffdb\116" +
    "\uffdb\117\uffdb\120\uffdb\121\uffdb\122\uffdb\123\uffdb\124\uffdb" +
    "\125\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133" +
    "\uffdb\134\uffdb\135\uffdb\136\uffdb\137\uffdb\140\uffdb\141\uffdb" +
    "\142\uffdb\143\uffdb\144\uffdb\145\uffdb\146\uffdb\147\uffdb\152" +
    "\uffdb\153\uffdb\155\uffdb\157\uffdb\165\uffdb\202\uffdb\205\uffdb" +
    "\207\uffdb\211\uffdb\212\uffdb\213\uffdb\001\002\000\004\206" +
    "\330\001\002\000\004\161\331\001\002\000\004\167\332" +
    "\001\002\000\276\016\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4" +
    "\107\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\114\uffe4\115" +
    "\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4\122\uffe4\123\uffe4" +
    "\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132" +
    "\uffe4\133\uffe4\134\uffe4\135\uffe4\136\uffe4\137\uffe4\140\uffe4" +
    "\141\uffe4\142\uffe4\143\uffe4\144\uffe4\145\uffe4\146\uffe4\147" +
    "\uffe4\152\uffe4\153\uffe4\155\uffe4\157\uffe4\165\uffe4\202\uffe4" +
    "\205\uffe4\207\uffe4\211\uffe4\212\uffe4\213\uffe4\001\002\000" +
    "\130\026\173\027\172\030\171\031\170\032\167\104\163" +
    "\105\161\106\231\107\227\110\224\111\222\112\221\113" +
    "\220\114\214\115\212\116\211\117\210\120\207\121\206" +
    "\122\205\123\204\124\203\125\202\126\201\127\200\130" +
    "\177\131\176\132\175\133\174\134\166\135\165\136\164" +
    "\137\162\140\232\141\226\142\225\143\223\144\217\145" +
    "\216\146\215\147\213\206\334\207\336\001\002\000\024" +
    "\161\uffd0\171\uffce\173\uffce\174\uffce\175\uffce\176\uffce\177" +
    "\uffce\200\uffce\201\uffce\001\002\000\004\161\367\001\002" +
    "\000\024\161\uffd1\171\uffcf\173\uffcf\174\uffcf\175\uffcf\176" +
    "\uffcf\177\uffcf\200\uffcf\201\uffcf\001\002\000\004\161\362" +
    "\001\002\000\022\171\347\173\346\174\344\175\345\176" +
    "\343\177\342\200\352\201\351\001\002\000\024\161\uffcd" +
    "\171\uffcd\173\uffcd\174\uffcd\175\uffcd\176\uffcd\177\uffcd\200" +
    "\uffcd\201\uffcd\001\002\000\130\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110" +
    "\uffc1\111\uffc1\112\uffc1\113\uffc1\114\uffc1\115\uffc1\116\uffc1" +
    "\117\uffc1\120\uffc1\121\uffc1\122\uffc1\123\uffc1\124\uffc1\125" +
    "\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1\132\uffc1\133\uffc1" +
    "\134\uffc1\135\uffc1\136\uffc1\137\uffc1\140\uffc1\141\uffc1\142" +
    "\uffc1\143\uffc1\144\uffc1\145\uffc1\146\uffc1\147\uffc1\206\uffc1" +
    "\207\uffc1\001\002\000\130\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6" +
    "\111\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117" +
    "\uffc6\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6\125\uffc6" +
    "\126\uffc6\127\uffc6\130\uffc6\131\uffc6\132\uffc6\133\uffc6\134" +
    "\uffc6\135\uffc6\136\uffc6\137\uffc6\140\uffc6\141\uffc6\142\uffc6" +
    "\143\uffc6\144\uffc6\145\uffc6\146\uffc6\147\uffc6\206\uffc6\207" +
    "\uffc6\001\002\000\130\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7" +
    "\120\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\125\uffc7\126" +
    "\uffc7\127\uffc7\130\uffc7\131\uffc7\132\uffc7\133\uffc7\134\uffc7" +
    "\135\uffc7\136\uffc7\137\uffc7\140\uffc7\141\uffc7\142\uffc7\143" +
    "\uffc7\144\uffc7\145\uffc7\146\uffc7\147\uffc7\206\uffc7\207\uffc7" +
    "\001\002\000\130\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5" +
    "\112\uffc5\113\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120" +
    "\uffc5\121\uffc5\122\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5" +
    "\127\uffc5\130\uffc5\131\uffc5\132\uffc5\133\uffc5\134\uffc5\135" +
    "\uffc5\136\uffc5\137\uffc5\140\uffc5\141\uffc5\142\uffc5\143\uffc5" +
    "\144\uffc5\145\uffc5\146\uffc5\147\uffc5\206\uffc5\207\uffc5\001" +
    "\002\000\130\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112" +
    "\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8\117\uffc8\120\uffc8" +
    "\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8\126\uffc8\127" +
    "\uffc8\130\uffc8\131\uffc8\132\uffc8\133\uffc8\134\uffc8\135\uffc8" +
    "\136\uffc8\137\uffc8\140\uffc8\141\uffc8\142\uffc8\143\uffc8\144" +
    "\uffc8\145\uffc8\146\uffc8\147\uffc8\206\uffc8\207\uffc8\001\002" +
    "\000\130\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\104" +
    "\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\113\uffc4\114\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121" +
    "\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4" +
    "\130\uffc4\131\uffc4\132\uffc4\133\uffc4\134\uffc4\135\uffc4\136" +
    "\uffc4\137\uffc4\140\uffc4\141\uffc4\142\uffc4\143\uffc4\144\uffc4" +
    "\145\uffc4\146\uffc4\147\uffc4\206\uffc4\207\uffc4\001\002\000" +
    "\130\026\173\027\172\030\171\031\170\032\167\104\163" +
    "\105\161\106\231\107\227\110\224\111\222\112\221\113" +
    "\220\114\214\115\212\116\211\117\210\120\207\121\206" +
    "\122\205\123\204\124\203\125\202\126\201\127\200\130" +
    "\177\131\176\132\175\133\174\134\166\135\165\136\164" +
    "\137\162\140\232\141\226\142\225\143\223\144\217\145" +
    "\216\146\215\147\213\206\353\207\354\001\002\000\130" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3" +
    "\114\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3\122" +
    "\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3" +
    "\131\uffc3\132\uffc3\133\uffc3\134\uffc3\135\uffc3\136\uffc3\137" +
    "\uffc3\140\uffc3\141\uffc3\142\uffc3\143\uffc3\144\uffc3\145\uffc3" +
    "\146\uffc3\147\uffc3\206\uffc3\207\uffc3\001\002\000\130\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\104\uffc2\105\uffc2" +
    "\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114" +
    "\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2" +
    "\123\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131" +
    "\uffc2\132\uffc2\133\uffc2\134\uffc2\135\uffc2\136\uffc2\137\uffc2" +
    "\140\uffc2\141\uffc2\142\uffc2\143\uffc2\144\uffc2\145\uffc2\146" +
    "\uffc2\147\uffc2\206\uffc2\207\uffc2\001\002\000\024\161\uffce" +
    "\171\uffce\173\uffce\174\uffce\175\uffce\176\uffce\177\uffce\200" +
    "\uffce\201\uffce\001\002\000\024\161\uffcf\171\uffcf\173\uffcf" +
    "\174\uffcf\175\uffcf\176\uffcf\177\uffcf\200\uffcf\201\uffcf\001" +
    "\002\000\024\161\uffcc\171\347\173\346\174\344\175\345" +
    "\176\343\177\342\200\352\201\351\001\002\000\004\161" +
    "\uffcb\001\002\000\130\026\173\027\172\030\171\031\170" +
    "\032\167\104\163\105\161\106\231\107\227\110\224\111" +
    "\222\112\221\113\220\114\214\115\212\116\211\117\210" +
    "\120\207\121\206\122\205\123\204\124\203\125\202\126" +
    "\201\127\200\130\177\131\176\132\175\133\174\134\166" +
    "\135\165\136\164\137\162\140\232\141\226\142\225\143" +
    "\223\144\217\145\216\146\215\147\213\206\353\207\354" +
    "\001\002\000\024\161\uffca\171\347\173\346\174\344\175" +
    "\345\176\343\177\342\200\352\201\351\001\002\000\004" +
    "\161\uffc9\001\002\000\004\154\363\001\002\000\264\016" +
    "\114\026\144\027\142\030\137\031\135\032\133\033\027" +
    "\034\026\035\024\036\023\037\022\040\126\041\125\042" +
    "\124\043\123\044\121\045\120\046\117\047\116\050\103" +
    "\051\102\052\101\053\100\054\077\055\076\056\075\057" +
    "\074\060\063\061\062\062\061\063\060\064\057\065\056" +
    "\066\055\067\053\070\042\071\041\072\040\073\037\074" +
    "\036\075\035\076\034\077\033\100\153\101\152\102\151" +
    "\103\150\104\146\105\145\106\143\107\141\110\140\111" +
    "\136\112\134\113\132\114\115\115\113\116\112\117\111" +
    "\120\110\121\107\122\105\123\104\124\073\125\072\126" +
    "\071\127\070\130\067\131\066\132\065\133\064\134\054" +
    "\135\052\136\051\137\050\140\047\141\046\142\045\143" +
    "\044\144\032\145\031\146\030\147\025\155\122\202\131" +
    "\205\127\207\147\211\043\213\106\001\002\000\004\153" +
    "\365\001\002\000\004\213\366\001\002\000\276\016\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8" +
    "\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103" +
    "\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8" +
    "\112\uffd8\113\uffd8\114\uffd8\115\uffd8\116\uffd8\117\uffd8\120" +
    "\uffd8\121\uffd8\122\uffd8\123\uffd8\124\uffd8\125\uffd8\126\uffd8" +
    "\127\uffd8\130\uffd8\131\uffd8\132\uffd8\133\uffd8\134\uffd8\135" +
    "\uffd8\136\uffd8\137\uffd8\140\uffd8\141\uffd8\142\uffd8\143\uffd8" +
    "\144\uffd8\145\uffd8\146\uffd8\147\uffd8\152\uffd8\153\uffd8\155" +
    "\uffd8\157\uffd8\165\uffd8\202\uffd8\205\uffd8\207\uffd8\211\uffd8" +
    "\212\uffd8\213\uffd8\001\002\000\004\154\370\001\002\000" +
    "\264\016\114\026\144\027\142\030\137\031\135\032\133" +
    "\033\027\034\026\035\024\036\023\037\022\040\126\041" +
    "\125\042\124\043\123\044\121\045\120\046\117\047\116" +
    "\050\103\051\102\052\101\053\100\054\077\055\076\056" +
    "\075\057\074\060\063\061\062\062\061\063\060\064\057" +
    "\065\056\066\055\067\053\070\042\071\041\072\040\073" +
    "\037\074\036\075\035\076\034\077\033\100\153\101\152" +
    "\102\151\103\150\104\146\105\145\106\143\107\141\110" +
    "\140\111\136\112\134\113\132\114\115\115\113\116\112" +
    "\117\111\120\110\121\107\122\105\123\104\124\073\125" +
    "\072\126\071\127\070\130\067\131\066\132\065\133\064" +
    "\134\054\135\052\136\051\137\050\140\047\141\046\142" +
    "\045\143\044\144\032\145\031\146\030\147\025\155\122" +
    "\202\131\205\127\207\147\211\043\213\106\001\002\000" +
    "\004\153\372\001\002\000\004\213\373\001\002\000\276" +
    "\016\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9" +
    "\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102" +
    "\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9" +
    "\111\uffd9\112\uffd9\113\uffd9\114\uffd9\115\uffd9\116\uffd9\117" +
    "\uffd9\120\uffd9\121\uffd9\122\uffd9\123\uffd9\124\uffd9\125\uffd9" +
    "\126\uffd9\127\uffd9\130\uffd9\131\uffd9\132\uffd9\133\uffd9\134" +
    "\uffd9\135\uffd9\136\uffd9\137\uffd9\140\uffd9\141\uffd9\142\uffd9" +
    "\143\uffd9\144\uffd9\145\uffd9\146\uffd9\147\uffd9\152\uffd9\153" +
    "\uffd9\155\uffd9\157\uffd9\165\uffd9\202\uffd9\205\uffd9\207\uffd9" +
    "\211\uffd9\212\uffd9\213\uffd9\001\002\000\130\026\173\027" +
    "\172\030\171\031\170\032\167\104\163\105\161\106\231" +
    "\107\227\110\224\111\222\112\221\113\220\114\214\115" +
    "\212\116\211\117\210\120\207\121\206\122\205\123\204" +
    "\124\203\125\202\126\201\127\200\130\177\131\176\132" +
    "\175\133\174\134\166\135\165\136\164\137\162\140\232" +
    "\141\226\142\225\143\223\144\217\145\216\146\215\147" +
    "\213\206\353\207\354\001\002\000\004\161\u0107\001\002" +
    "\000\024\161\377\171\uffcd\173\uffcd\174\uffcd\175\uffcd\176" +
    "\uffcd\177\uffcd\200\uffcd\201\uffcd\001\002\000\004\151\u0100" +
    "\001\002\000\264\016\114\026\144\027\142\030\137\031" +
    "\135\032\133\033\027\034\026\035\024\036\023\037\022" +
    "\040\126\041\125\042\124\043\123\044\121\045\120\046" +
    "\117\047\116\050\103\051\102\052\101\053\100\054\077" +
    "\055\076\056\075\057\074\060\063\061\062\062\061\063" +
    "\060\064\057\065\056\066\055\067\053\070\042\071\041" +
    "\072\040\073\037\074\036\075\035\076\034\077\033\100" +
    "\153\101\152\102\151\103\150\104\146\105\145\106\143" +
    "\107\141\110\140\111\136\112\134\113\132\114\115\115" +
    "\113\116\112\117\111\120\110\121\107\122\105\123\104" +
    "\124\073\125\072\126\071\127\070\130\067\131\066\132" +
    "\065\133\064\134\054\135\052\136\051\137\050\140\047" +
    "\141\046\142\045\143\044\144\032\145\031\146\030\147" +
    "\025\155\122\202\131\205\127\207\147\211\043\213\106" +
    "\001\002\000\006\152\uffdd\153\u0103\001\002\000\004\152" +
    "\u0104\001\002\000\276\016\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0" +
    "\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106" +
    "\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0\114\uffe0" +
    "\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121\uffe0\122\uffe0\123" +
    "\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0" +
    "\132\uffe0\133\uffe0\134\uffe0\135\uffe0\136\uffe0\137\uffe0\140" +
    "\uffe0\141\uffe0\142\uffe0\143\uffe0\144\uffe0\145\uffe0\146\uffe0" +
    "\147\uffe0\152\uffe0\153\uffe0\155\uffe0\157\uffe0\165\uffe0\202" +
    "\uffe0\205\uffe0\207\uffe0\211\uffe0\212\uffe0\213\uffe0\001\002" +
    "\000\264\016\114\026\144\027\142\030\137\031\135\032" +
    "\133\033\027\034\026\035\024\036\023\037\022\040\126" +
    "\041\125\042\124\043\123\044\121\045\120\046\117\047" +
    "\116\050\103\051\102\052\101\053\100\054\077\055\076" +
    "\056\075\057\074\060\063\061\062\062\061\063\060\064" +
    "\057\065\056\066\055\067\053\070\042\071\041\072\040" +
    "\073\037\074\036\075\035\076\034\077\033\100\153\101" +
    "\152\102\151\103\150\104\146\105\145\106\143\107\141" +
    "\110\140\111\136\112\134\113\132\114\115\115\113\116" +
    "\112\117\111\120\110\121\107\122\105\123\104\124\073" +
    "\125\072\126\071\127\070\130\067\131\066\132\065\133" +
    "\064\134\054\135\052\136\051\137\050\140\047\141\046" +
    "\142\045\143\044\144\032\145\031\146\030\147\025\155" +
    "\122\202\131\205\127\207\147\211\043\213\106\001\002" +
    "\000\004\153\u0106\001\002\000\276\016\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc" +
    "\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113" +
    "\uffdc\114\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc\121\uffdc" +
    "\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130" +
    "\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc\135\uffdc\136\uffdc" +
    "\137\uffdc\140\uffdc\141\uffdc\142\uffdc\143\uffdc\144\uffdc\145" +
    "\uffdc\146\uffdc\147\uffdc\152\uffdc\153\uffdc\155\uffdc\157\uffdc" +
    "\165\uffdc\202\uffdc\205\uffdc\207\uffdc\211\uffdc\212\uffdc\213" +
    "\uffdc\001\002\000\004\151\u0108\001\002\000\264\016\114" +
    "\026\144\027\142\030\137\031\135\032\133\033\027\034" +
    "\026\035\024\036\023\037\022\040\126\041\125\042\124" +
    "\043\123\044\121\045\120\046\117\047\116\050\103\051" +
    "\102\052\101\053\100\054\077\055\076\056\075\057\074" +
    "\060\063\061\062\062\061\063\060\064\057\065\056\066" +
    "\055\067\053\070\042\071\041\072\040\073\037\074\036" +
    "\075\035\076\034\077\033\100\153\101\152\102\151\103" +
    "\150\104\146\105\145\106\143\107\141\110\140\111\136" +
    "\112\134\113\132\114\115\115\113\116\112\117\111\120" +
    "\110\121\107\122\105\123\104\124\073\125\072\126\071" +
    "\127\070\130\067\131\066\132\065\133\064\134\054\135" +
    "\052\136\051\137\050\140\047\141\046\142\045\143\044" +
    "\144\032\145\031\146\030\147\025\155\122\202\131\205" +
    "\127\207\147\211\043\213\106\001\002\000\006\152\uffdf" +
    "\153\u010b\001\002\000\004\152\u010c\001\002\000\276\016" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1" +
    "\103\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111" +
    "\uffe1\112\uffe1\113\uffe1\114\uffe1\115\uffe1\116\uffe1\117\uffe1" +
    "\120\uffe1\121\uffe1\122\uffe1\123\uffe1\124\uffe1\125\uffe1\126" +
    "\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1\133\uffe1\134\uffe1" +
    "\135\uffe1\136\uffe1\137\uffe1\140\uffe1\141\uffe1\142\uffe1\143" +
    "\uffe1\144\uffe1\145\uffe1\146\uffe1\147\uffe1\152\uffe1\153\uffe1" +
    "\155\uffe1\157\uffe1\165\uffe1\202\uffe1\205\uffe1\207\uffe1\211" +
    "\uffe1\212\uffe1\213\uffe1\001\002\000\264\016\114\026\144" +
    "\027\142\030\137\031\135\032\133\033\027\034\026\035" +
    "\024\036\023\037\022\040\126\041\125\042\124\043\123" +
    "\044\121\045\120\046\117\047\116\050\103\051\102\052" +
    "\101\053\100\054\077\055\076\056\075\057\074\060\063" +
    "\061\062\062\061\063\060\064\057\065\056\066\055\067" +
    "\053\070\042\071\041\072\040\073\037\074\036\075\035" +
    "\076\034\077\033\100\153\101\152\102\151\103\150\104" +
    "\146\105\145\106\143\107\141\110\140\111\136\112\134" +
    "\113\132\114\115\115\113\116\112\117\111\120\110\121" +
    "\107\122\105\123\104\124\073\125\072\126\071\127\070" +
    "\130\067\131\066\132\065\133\064\134\054\135\052\136" +
    "\051\137\050\140\047\141\046\142\045\143\044\144\032" +
    "\145\031\146\030\147\025\155\122\202\131\205\127\207" +
    "\147\211\043\213\106\001\002\000\004\153\u010e\001\002" +
    "\000\276\016\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101" +
    "\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106\uffde\107\uffde" +
    "\110\uffde\111\uffde\112\uffde\113\uffde\114\uffde\115\uffde\116" +
    "\uffde\117\uffde\120\uffde\121\uffde\122\uffde\123\uffde\124\uffde" +
    "\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde\132\uffde\133" +
    "\uffde\134\uffde\135\uffde\136\uffde\137\uffde\140\uffde\141\uffde" +
    "\142\uffde\143\uffde\144\uffde\145\uffde\146\uffde\147\uffde\152" +
    "\uffde\153\uffde\155\uffde\157\uffde\165\uffde\202\uffde\205\uffde" +
    "\207\uffde\211\uffde\212\uffde\213\uffde\001\002\000\264\016" +
    "\114\026\144\027\142\030\137\031\135\032\133\033\027" +
    "\034\026\035\024\036\023\037\022\040\126\041\125\042" +
    "\124\043\123\044\121\045\120\046\117\047\116\050\103" +
    "\051\102\052\101\053\100\054\077\055\076\056\075\057" +
    "\074\060\063\061\062\062\061\063\060\064\057\065\056" +
    "\066\055\067\053\070\042\071\041\072\040\073\037\074" +
    "\036\075\035\076\034\077\033\100\153\101\152\102\151" +
    "\103\150\104\146\105\145\106\143\107\141\110\140\111" +
    "\136\112\134\113\132\114\115\115\113\116\112\117\111" +
    "\120\110\121\107\122\105\123\104\124\073\125\072\126" +
    "\071\127\070\130\067\131\066\132\065\133\064\134\054" +
    "\135\052\136\051\137\050\140\047\141\046\142\045\143" +
    "\044\144\032\145\031\146\030\147\025\155\122\202\131" +
    "\205\127\207\147\211\043\213\106\001\002\000\004\165" +
    "\u0111\001\002\000\006\020\ufff2\150\ufff2\001\002\000\012" +
    "\004\257\005\260\006\262\007\263\001\002\000\006\015" +
    "\u0114\161\uffee\001\002\000\004\207\015\001\002\000\004" +
    "\161\uffed\001\002\000\006\024\u0123\025\u0124\001\002\000" +
    "\004\207\u0118\001\002\000\004\160\u0119\001\002\000\006" +
    "\161\u011a\207\015\001\002\000\004\164\u0120\001\002\000" +
    "\004\161\u011c\001\002\000\004\164\u011d\001\002\000\264" +
    "\016\114\026\144\027\142\030\137\031\135\032\133\033" +
    "\027\034\026\035\024\036\023\037\022\040\126\041\125" +
    "\042\124\043\123\044\121\045\120\046\117\047\116\050" +
    "\103\051\102\052\101\053\100\054\077\055\076\056\075" +
    "\057\074\060\063\061\062\062\061\063\060\064\057\065" +
    "\056\066\055\067\053\070\042\071\041\072\040\073\037" +
    "\074\036\075\035\076\034\077\033\100\153\101\152\102" +
    "\151\103\150\104\146\105\145\106\143\107\141\110\140" +
    "\111\136\112\134\113\132\114\115\115\113\116\112\117" +
    "\111\120\110\121\107\122\105\123\104\124\073\125\072" +
    "\126\071\127\070\130\067\131\066\132\065\133\064\134" +
    "\054\135\052\136\051\137\050\140\047\141\046\142\045" +
    "\143\044\144\032\145\031\146\030\147\025\155\122\202" +
    "\131\205\127\207\147\211\043\213\106\001\002\000\004" +
    "\165\u011f\001\002\000\006\020\uffef\150\uffef\001\002\000" +
    "\264\016\114\026\144\027\142\030\137\031\135\032\133" +
    "\033\027\034\026\035\024\036\023\037\022\040\126\041" +
    "\125\042\124\043\123\044\121\045\120\046\117\047\116" +
    "\050\103\051\102\052\101\053\100\054\077\055\076\056" +
    "\075\057\074\060\063\061\062\062\061\063\060\064\057" +
    "\065\056\066\055\067\053\070\042\071\041\072\040\073" +
    "\037\074\036\075\035\076\034\077\033\100\153\101\152" +
    "\102\151\103\150\104\146\105\145\106\143\107\141\110" +
    "\140\111\136\112\134\113\132\114\115\115\113\116\112" +
    "\117\111\120\110\121\107\122\105\123\104\124\073\125" +
    "\072\126\071\127\070\130\067\131\066\132\065\133\064" +
    "\134\054\135\052\136\051\137\050\140\047\141\046\142" +
    "\045\143\044\144\032\145\031\146\030\147\025\155\122" +
    "\202\131\205\127\207\147\211\043\213\106\001\002\000" +
    "\004\165\u0122\001\002\000\006\020\ufff1\150\ufff1\001\002" +
    "\000\004\160\u0129\001\002\000\004\164\u0126\001\002\000" +
    "\004\017\ufffd\001\002\000\264\016\114\026\144\027\142" +
    "\030\137\031\135\032\133\033\027\034\026\035\024\036" +
    "\023\037\022\040\126\041\125\042\124\043\123\044\121" +
    "\045\120\046\117\047\116\050\103\051\102\052\101\053" +
    "\100\054\077\055\076\056\075\057\074\060\063\061\062" +
    "\062\061\063\060\064\057\065\056\066\055\067\053\070" +
    "\042\071\041\072\040\073\037\074\036\075\035\076\034" +
    "\077\033\100\153\101\152\102\151\103\150\104\146\105" +
    "\145\106\143\107\141\110\140\111\136\112\134\113\132" +
    "\114\115\115\113\116\112\117\111\120\110\121\107\122" +
    "\105\123\104\124\073\125\072\126\071\127\070\130\067" +
    "\131\066\132\065\133\064\134\054\135\052\136\051\137" +
    "\050\140\047\141\046\142\045\143\044\144\032\145\031" +
    "\146\030\147\025\155\122\202\131\205\127\207\147\211" +
    "\043\213\106\001\002\000\004\165\u0128\001\002\000\004" +
    "\017\ufff5\001\002\000\004\161\u012a\001\002\000\004\167" +
    "\u012b\001\002\000\004\025\u0124\001\002\000\004\017\ufffc" +
    "\001\002\000\004\002\001\001\002\000\004\164\u012f\001" +
    "\002\000\266\016\114\026\144\027\142\030\137\031\135" +
    "\032\133\033\027\034\026\035\024\036\023\037\022\040" +
    "\126\041\125\042\124\043\123\044\121\045\120\046\117" +
    "\047\116\050\103\051\102\052\101\053\100\054\077\055" +
    "\076\056\075\057\074\060\063\061\062\062\061\063\060" +
    "\064\057\065\056\066\055\067\053\070\042\071\041\072" +
    "\040\073\037\074\036\075\035\076\034\077\033\100\153" +
    "\101\152\102\151\103\150\104\146\105\145\106\143\107" +
    "\141\110\140\111\136\112\134\113\132\114\115\115\113" +
    "\116\112\117\111\120\110\121\107\122\105\123\104\124" +
    "\073\125\072\126\071\127\070\130\067\131\066\132\065" +
    "\133\064\134\054\135\052\136\051\137\050\140\047\141" +
    "\046\142\045\143\044\144\032\145\031\146\030\147\025" +
    "\155\122\165\u0130\202\131\205\127\207\147\211\043\213" +
    "\106\001\002\000\004\002\ufff3\001\002\000\004\165\u0132" +
    "\001\002\000\004\002\ufff4\001\002\000\004\160\u0135\001" +
    "\002\000\004\017\uffff\001\002\000\004\161\u0136\001\002" +
    "\000\004\167\u0137\001\002\000\004\025\u0124\001\002\000" +
    "\004\017\ufffe\001\002\000\246\026\144\027\142\030\137" +
    "\031\135\032\133\033\027\034\026\035\024\036\023\037" +
    "\022\040\126\041\125\042\124\043\123\044\121\045\120" +
    "\046\117\047\116\050\103\051\102\052\101\053\100\054" +
    "\077\055\076\056\075\057\074\060\063\061\062\062\061" +
    "\063\060\064\057\065\056\066\055\067\053\070\042\071" +
    "\041\072\040\073\037\074\036\075\035\076\034\077\033" +
    "\100\153\101\152\102\151\103\150\104\146\105\145\106" +
    "\143\107\141\110\140\111\136\112\134\113\132\114\115" +
    "\115\113\116\112\117\111\120\110\121\107\122\105\123" +
    "\104\124\073\125\072\126\071\127\070\130\067\131\066" +
    "\132\065\133\064\134\054\135\052\136\051\137\050\140" +
    "\047\141\046\142\045\143\044\144\032\145\031\146\030" +
    "\147\025\001\002\000\266\016\114\026\144\027\142\030" +
    "\137\031\135\032\133\033\027\034\026\035\024\036\023" +
    "\037\022\040\126\041\125\042\124\043\123\044\121\045" +
    "\120\046\117\047\116\050\103\051\102\052\101\053\100" +
    "\054\077\055\076\056\075\057\074\060\063\061\062\062" +
    "\061\063\060\064\057\065\056\066\055\067\053\070\042" +
    "\071\041\072\040\073\037\074\036\075\035\076\034\077" +
    "\033\100\153\101\152\102\151\103\150\104\146\105\145" +
    "\106\143\107\141\110\140\111\136\112\134\113\132\114" +
    "\115\115\113\116\112\117\111\120\110\121\107\122\105" +
    "\123\104\124\073\125\072\126\071\127\070\130\067\131" +
    "\066\132\065\133\064\134\054\135\052\136\051\137\050" +
    "\140\047\141\046\142\045\143\044\144\032\145\031\146" +
    "\030\147\025\155\122\165\u0141\202\131\205\127\207\147" +
    "\211\043\213\106\001\002\000\004\170\u013c\001\002\000" +
    "\006\022\u013f\023\u013d\001\002\000\004\167\ufff6\001\002" +
    "\000\004\167\u0140\001\002\000\004\167\ufff7\001\002\000" +
    "\266\016\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073" +
    "\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9" +
    "\102\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9\110" +
    "\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\115\ufff9\116\ufff9" +
    "\117\ufff9\120\ufff9\121\ufff9\122\ufff9\123\ufff9\124\ufff9\125" +
    "\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\132\ufff9\133\ufff9" +
    "\134\ufff9\135\ufff9\136\ufff9\137\ufff9\140\ufff9\141\ufff9\142" +
    "\ufff9\143\ufff9\144\ufff9\145\ufff9\146\ufff9\147\ufff9\155\ufff9" +
    "\165\ufff9\202\ufff9\205\ufff9\207\ufff9\211\ufff9\213\ufff9\001" +
    "\002\000\006\024\ufffb\025\ufffb\001\002\000\006\170\u0145" +
    "\172\160\001\002\000\004\165\u0144\001\002\000\006\024" +
    "\ufffa\025\ufffa\001\002\000\132\022\u013f\023\u013d\026\173" +
    "\027\172\030\171\031\170\032\167\104\163\105\161\106" +
    "\231\107\227\110\224\111\222\112\221\113\220\114\214" +
    "\115\212\116\211\117\210\120\207\121\206\122\205\123" +
    "\204\124\203\125\202\126\201\127\200\130\177\131\176" +
    "\132\175\133\174\134\166\135\165\136\164\137\162\140" +
    "\232\141\226\142\225\143\223\144\217\145\216\146\215" +
    "\147\213\206\234\001\002\000\004\167\u0147\001\002\000" +
    "\266\016\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8" +
    "\102\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110" +
    "\ufff8\111\ufff8\112\ufff8\113\ufff8\114\ufff8\115\ufff8\116\ufff8" +
    "\117\ufff8\120\ufff8\121\ufff8\122\ufff8\123\ufff8\124\ufff8\125" +
    "\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\132\ufff8\133\ufff8" +
    "\134\ufff8\135\ufff8\136\ufff8\137\ufff8\140\ufff8\141\ufff8\142" +
    "\ufff8\143\ufff8\144\ufff8\145\ufff8\146\ufff8\147\ufff8\155\ufff8" +
    "\165\ufff8\202\ufff8\205\ufff8\207\ufff8\211\ufff8\213\ufff8\001" +
    "\002\000\004\002\000\001\002" });
>>>>>>> origin/master

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\u0124\000\004\003\003\001\001\000\002\001\001\000" +
    "\010\004\007\006\006\010\010\001\001\000\002\001\001" +
    "\000\004\007\u0111\001\001\000\004\005\u010a\001\001\000" +
    "\004\006\370\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\150\015" +
    "\147\020\125\001\001\000\002\001\001\000\002\001\001" +
=======
    "\000\u0146\000\004\003\003\001\001\000\002\001\001\000" +
    "\010\004\007\006\006\010\010\001\001\000\002\001\001" +
    "\000\004\007\u0133\001\001\000\004\005\u012c\001\001\000" +
    "\004\006\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\154" +
    "\014\153\017\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
>>>>>>> origin/master
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\267\014\153\017\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
<<<<<<< HEAD
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\230\001\001\000\004\016\223\001" +
=======
    "\002\001\001\000\002\001\001\000\004\015\234\001\001" +
    "\000\004\015\227\001\001\000\002\001\001\000\002\001" +
>>>>>>> origin/master
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
<<<<<<< HEAD
    "\004\012\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\251\001\001\000\002\001\001\000\010\013" +
    "\253\015\147\020\125\001\001\000\002\001\001\000\010" +
    "\013\255\015\147\020\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\261\001\001" +
    "\000\002\001\001\000\010\013\263\015\147\020\125\001" +
    "\001\000\002\001\001\000\010\013\265\015\147\020\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\307" +
    "\022\305\023\306\024\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\307\023\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\324\026\323\001\001\000" +
    "\002\001\001\000\006\016\307\023\325\001\001\000\006" +
    "\025\324\026\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\331\015\147\020\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\336\015\147\020\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\347\023\306\024\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\352" +
    "\015\147\020\125\001\001\000\004\036\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\356\015\147" +
    "\020\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\362\015\147\020\125\001\001" +
    "\000\004\035\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\366\015\147\020\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\376\015\147\020\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\u0104\015\147\020" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\u010e\015\147\020\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0115\001\001\000\002\001\001\000\006\014\u0117\015\u0118" +
    "\001\001\000\010\013\u0120\015\u011f\020\125\001\001\000" +
    "\002\001\001\000\004\017\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\230\017\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });
=======
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\275\020\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\303\001" +
    "\001\000\002\001\001\000\010\012\305\014\153\017\127" +
    "\001\001\000\002\001\001\000\010\012\307\014\153\017" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\313\001\001\000\002\001\001\000" +
    "\010\012\315\014\153\017\127\001\001\000\002\001\001" +
    "\000\010\012\317\014\153\017\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\340\020\336\021\337\022" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\340\021\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\356\024\355\001\001\000\002\001\001\000\006" +
    "\015\340\021\357\001\001\000\006\023\356\024\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\363" +
    "\014\153\017\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\370" +
    "\014\153\017\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\375\021\337\022\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\u0100\014\153\017\127\001\001\000\004" +
    "\031\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\u0104\014\153\017\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\u0108\014" +
    "\153\017\127\001\001\000\004\030\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\u010c\014\153\017" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\u010f\014\153\017\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\u0112\001\001\000\002\001\001" +
    "\000\004\027\u0114\001\001\000\002\001\001\000\004\007" +
    "\u0124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u011d\014\153\017\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\u0120\014" +
    "\153\017\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\u0126\014\153\017\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u012b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u0130\014\153\017\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u0137\001\001\000\002\001\001" +
    "\000\006\013\u0139\014\u013a\001\001\000\010\012\u0142\014" +
    "\u0141\017\127\001\001\000\002\001\001\000\004\016\u013d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\234\016" +
    "\u0145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });
>>>>>>> origin/master

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static TablaDatos tabla = new TablaDatos();
	
	static int estado;
	StringBuffer m = new StringBuffer("");
    static StringBuffer []vec=new StringBuffer[10];
    static int i=0;
//******************************************* 
   public void Documenta(int tipo)
   { m.append("Error de Sintaxis No."+tipo);
     ManejoDeErrores objeto=new ManejoDeErrores();
     String tip=objeto.Errores(tipo);
	  m.append("\nMensaje --> "+tip+"\n");
      vec[i++]=m;
     
   }
//*******************************************
   public void syntax_error(Symbol cur_token)
   { 
   	estado=((Symbol)stack.peek()).parse_state;
   	  ManejoDeErrores obj = new ManejoDeErrores();
      String m=obj.analizaToken(cur_token);
      System.err.println("\n\nSimbolo actual analizado: "+m+"-->"+cur_token);
      //System.err.println("\n\nSimbolo actual analizado: "+cur_token);

   }
//******************************************
   public void report_error(String message, Object info) 
   { if (info instanceof java_cup.runtime.Symbol)
     { java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
       if (s.left >= 0)
       { m.append("Linea "+ (s.left +1));   
         if (s.right >= 0)                    
          m.append(", Columna "+(s.right)+"\n");
       }
     }
   }
/**************METODO MAIN ********/
public static void main(String[] arg)		
 	{
	  /* Crea un objeto parser */
	  parser parserObj = new parser();
	  /* Asigna el Scanner */
	  Yylex miAnalizadorLexico = new Yylex(new InputStreamReader(System.in));
	  parserObj.setScanner(miAnalizadorLexico);
	  try{
		parserObj.parse();
		tabla.imprimir();
	  }
catch(Exception x){ 
	  parserObj.Documenta(estado);
  	  for(int j=0;j<i;j++)
		System.out.println(vec[j]);

	}

}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



methodsTable tablaMetodos = new methodsTable();
String codigo="";
String miCodigo="";
String errores="";
String retardos="";
String auxiliar="";
String losMetodos="";
String aux="";
String auxno="";
String aux2="";
String auxsw="";
String p2="";
String p1="";
String aux3="";
frijol f2;
String cadena_condiciones=" ";
String cadena_tipo="";
String cadena_parametros="";

	private static Stack<String>p = new Stack<String>();
	private static Stack<String>pila2 = new Stack<String>();

	private static int actualTmp=0;

	private static String nuevaTmp() {
		return "tmp"+(++actualTmp);
	}

	private static int actualEtq=0;

	private static String nuevaEtq() {
		return "etqY"+(++actualEtq);
	}
	
	

	private String generarTerceto(String terceto) {
		String tmp = nuevaTmp();
		System.out.println("Terceto: "+tmp + terceto);
		return tmp;
	}

	private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2){
		BloqueCondicion etqs = new BloqueCondicion();
		etqs.etqVerdad = nuevaEtq();
		etqs.etqFalso = nuevaEtq();
		etqs.condicion = Rvalor1+condicion+Rvalor2;
		auxiliar="";
		/*
		*System.out.println("\t if" + Rvalor1 + condicion + Rvalor2 + "");
		*/
	System.out.println("\tif "+ Rvalor1 + condicion + Rvalor2 +" goto etq Vd "+ etqs.etqVerdad);
	//RESULT=Rvalor1 + condicion + Rvalor2;
    System.out.println("\tgoto etq Falso: "+ etqs.etqFalso);
		return etqs;
	}

	private BloqueCondicion generarCondicion(String condicion, String Rvalor2){
		BloqueCondicion etqs = new BloqueCondicion();
		etqs.condicion = condicion+Rvalor2;
		auxiliar="";
		/*
		*System.out.println("\t if" + Rvalor1 + condicion + Rvalor2 + "");
		*/
		return etqs;
	}
	private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2,String extra){
		BloqueCondicion etqs = new BloqueCondicion();
		
		etqs.condicion = Rvalor1+condicion+Rvalor2+extra;
		auxiliar="";
		return etqs;
	}




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 180: // puertost ::= PE3 
=======
          case 196: // puertost ::= PE3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pe3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe3+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 179: // puertost ::= PE2 
=======
          case 195: // puertost ::= PE2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pe2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe2+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 178: // puertost ::= PE1 
=======
          case 194: // puertost ::= PE1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe1+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 177: // puertost ::= PE0 
=======
          case 193: // puertost ::= PE0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pe0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe0+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 176: // puertost ::= PD7 
=======
          case 192: // puertost ::= PD7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd7+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 175: // puertost ::= PD6 
=======
          case 191: // puertost ::= PD6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd6+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 174: // puertost ::= PD5 
=======
          case 190: // puertost ::= PD5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd5+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 173: // puertost ::= PD4 
=======
          case 189: // puertost ::= PD4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd4+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 172: // puertost ::= PD3 
=======
          case 188: // puertost ::= PD3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd3+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 171: // puertost ::= PD2 
=======
          case 187: // puertost ::= PD2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd2+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 170: // puertost ::= PD1 
=======
          case 186: // puertost ::= PD1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd1+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 169: // puertost ::= PD0 
=======
          case 185: // puertost ::= PD0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd0+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 168: // puertost ::= PC7 
=======
          case 184: // puertost ::= PC7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 167: // puertost ::= PC6 
=======
          case 183: // puertost ::= PC6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc6+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 166: // puertost ::= PC5 
=======
          case 182: // puertost ::= PC5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc5+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 165: // puertost ::= PC4 
=======
          case 181: // puertost ::= PC4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc4+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 164: // puertost ::= PC3 
=======
          case 180: // puertost ::= PC3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc3+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 163: // puertost ::= PC2 
=======
          case 179: // puertost ::= PC2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc2+"";    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 162: // puertost ::= PC1 
=======
          case 178: // puertost ::= PC1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc1+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 161: // puertost ::= PC0 
=======
          case 177: // puertost ::= PC0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc0+"";    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 160: // puertost ::= PB7 
=======
          case 176: // puertost ::= PB7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 159: // puertost ::= PB6 
=======
          case 175: // puertost ::= PB6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb6+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 158: // puertost ::= PB5 
=======
          case 174: // puertost ::= PB5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb5+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 157: // puertost ::= PB4 
=======
          case 173: // puertost ::= PB4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb4+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 156: // puertost ::= PB3 
=======
          case 172: // puertost ::= PB3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb3+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 155: // puertost ::= PB2 
=======
          case 171: // puertost ::= PB2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb2+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 154: // puertost ::= PB1 
=======
          case 170: // puertost ::= PB1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb1+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 153: // puertost ::= PB0 
=======
          case 169: // puertost ::= PB0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb0+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 152: // puertost ::= PA7 
=======
          case 168: // puertost ::= PA7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 151: // puertost ::= PA6 
=======
          case 167: // puertost ::= PA6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa6+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 150: // puertost ::= PA5 
=======
          case 166: // puertost ::= PA5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa5+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 149: // puertost ::= PA4 
=======
          case 165: // puertost ::= PA4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa4+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 148: // puertost ::= PA3 
=======
          case 164: // puertost ::= PA3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa3+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 147: // puertost ::= PA2 
=======
          case 163: // puertost ::= PA2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa2+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 146: // puertost ::= PA1 
=======
          case 162: // puertost ::= PA1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa1+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 145: // puertost ::= PA0 
=======
          case 161: // puertost ::= PA0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa0+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 144: // puertost ::= PE 
=======
          case 160: // puertost ::= PE 
>>>>>>> origin/master
            {
              String RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=pe+"";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 143: // puertost ::= PD 
=======
          case 159: // puertost ::= PD 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 142: // puertost ::= PC 
=======
          case 158: // puertost ::= PC 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc+"";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 141: // puertost ::= PB 
=======
          case 157: // puertost ::= PB 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pb+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 140: // puertost ::= PA 
=======
          case 156: // puertost ::= PA 
>>>>>>> origin/master
            {
              String RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 139: // puertos ::= PE3 
=======
          case 155: // puertos ::= PE3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pe3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe3+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 138: // puertos ::= PE2 
=======
          case 154: // puertos ::= PE2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pe2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe2+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 137: // puertos ::= PE1 
=======
          case 153: // puertos ::= PE1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe1+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 136: // puertos ::= PE0 
=======
          case 152: // puertos ::= PE0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pe0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe0+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 135: // puertos ::= PD7 
=======
          case 151: // puertos ::= PD7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pd7+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 134: // puertos ::= PD6 
=======
          case 150: // puertos ::= PD6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd6+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 133: // puertos ::= PD5 
=======
          case 149: // puertos ::= PD5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		   RESULT=pd5+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 132: // puertos ::= PD4 
=======
          case 148: // puertos ::= PD4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd4+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 131: // puertos ::= PD3 
=======
          case 147: // puertos ::= PD3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pd3+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 130: // puertos ::= PD2 
=======
          case 146: // puertos ::= PD2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		   RESULT=pd2+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 129: // puertos ::= PD1 
=======
          case 145: // puertos ::= PD1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd1+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 128: // puertos ::= PD0 
=======
          case 144: // puertos ::= PD0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pd0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pd0+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 127: // puertos ::= PC7 
=======
          case 143: // puertos ::= PC7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		     RESULT=pc7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 126: // puertos ::= PC6 
=======
          case 142: // puertos ::= PC6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pc6+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 125: // puertos ::= PC5 
=======
          case 141: // puertos ::= PC5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc5+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 124: // puertos ::= PC4 
=======
          case 140: // puertos ::= PC4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc4+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 123: // puertos ::= PC3 
=======
          case 139: // puertos ::= PC3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc3+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 122: // puertos ::= PC2 
=======
          case 138: // puertos ::= PC2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc2+"=";    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 121: // puertos ::= PC1 
=======
          case 137: // puertos ::= PC1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc1+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 120: // puertos ::= PC0 
=======
          case 136: // puertos ::= PC0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc0+"=";    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 119: // puertos ::= PB7 
=======
          case 135: // puertos ::= PB7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 118: // puertos ::= PB6 
=======
          case 134: // puertos ::= PB6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb6+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 117: // puertos ::= PB5 
=======
          case 133: // puertos ::= PB5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb5+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 116: // puertos ::= PB4 
=======
          case 132: // puertos ::= PB4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb4+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 115: // puertos ::= PB3 
=======
          case 131: // puertos ::= PB3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb3+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 114: // puertos ::= PB2 
=======
          case 130: // puertos ::= PB2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb2+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 113: // puertos ::= PB1 
=======
          case 129: // puertos ::= PB1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb1+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 112: // puertos ::= PB0 
=======
          case 128: // puertos ::= PB0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb0+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 111: // puertos ::= PA7 
=======
          case 127: // puertos ::= PA7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	RESULT=pa7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 110: // puertos ::= PA6 
=======
          case 126: // puertos ::= PA6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa6+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 109: // puertos ::= PA5 
=======
          case 125: // puertos ::= PA5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 108: // puertos ::= PA4 
=======
          case 124: // puertos ::= PA4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  	RESULT=pa4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 107: // puertos ::= PA3 
=======
          case 123: // puertos ::= PA3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 106: // puertos ::= PA2 
=======
          case 122: // puertos ::= PA2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 105: // puertos ::= PA1 
=======
          case 121: // puertos ::= PA1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 104: // puertos ::= PA0 
=======
          case 120: // puertos ::= PA0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pa0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 103: // puertos ::= TE3 
=======
          case 119: // puertos ::= TE3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int te3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 102: // puertos ::= TE2 
=======
          case 118: // puertos ::= TE2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int te2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 101: // puertos ::= TE1 
=======
          case 117: // puertos ::= TE1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int te1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 100: // puertos ::= TE0 
=======
          case 116: // puertos ::= TE0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int te0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 99: // puertos ::= TD7 
=======
          case 115: // puertos ::= TD7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int td7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 98: // puertos ::= TD6 
=======
          case 114: // puertos ::= TD6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int td6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 97: // puertos ::= TD5 
=======
          case 113: // puertos ::= TD5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int td5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 96: // puertos ::= TD4 
=======
          case 112: // puertos ::= TD4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int td4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 95: // puertos ::= TD3 
=======
          case 111: // puertos ::= TD3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int td3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 94: // puertos ::= TD2 
=======
          case 110: // puertos ::= TD2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int td2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 93: // puertos ::= TD1 
=======
          case 109: // puertos ::= TD1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int td1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 92: // puertos ::= TD0 
=======
          case 108: // puertos ::= TD0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int td0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 91: // puertos ::= TC7 
=======
          case 107: // puertos ::= TC7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 90: // puertos ::= TC6 
=======
          case 106: // puertos ::= TC6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 89: // puertos ::= TC5 
=======
          case 105: // puertos ::= TC5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 88: // puertos ::= TC4 
=======
          case 104: // puertos ::= TC4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 87: // puertos ::= TC3 
=======
          case 103: // puertos ::= TC3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 86: // puertos ::= TC2 
=======
          case 102: // puertos ::= TC2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 85: // puertos ::= TC1 
=======
          case 101: // puertos ::= TC1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 84: // puertos ::= TC0 
=======
          case 100: // puertos ::= TC0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 83: // puertos ::= TB7 
=======
          case 99: // puertos ::= TB7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 82: // puertos ::= TB6 
=======
          case 98: // puertos ::= TB6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 81: // puertos ::= TB5 
=======
          case 97: // puertos ::= TB5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 80: // puertos ::= TB4 
=======
          case 96: // puertos ::= TB4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 79: // puertos ::= TB3 
=======
          case 95: // puertos ::= TB3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 78: // puertos ::= TB2 
=======
          case 94: // puertos ::= TB2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 77: // puertos ::= TB1 
=======
          case 93: // puertos ::= TB1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 76: // puertos ::= TB0 
=======
          case 92: // puertos ::= TB0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 75: // puertos ::= TA7 
=======
          case 91: // puertos ::= TA7 
>>>>>>> origin/master
            {
              String RESULT = null;
		int ta7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 74: // puertos ::= TA6 
=======
          case 90: // puertos ::= TA6 
>>>>>>> origin/master
            {
              String RESULT = null;
		int ta6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 73: // puertos ::= TA5 
=======
          case 89: // puertos ::= TA5 
>>>>>>> origin/master
            {
              String RESULT = null;
		int ta5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 72: // puertos ::= TA4 
=======
          case 88: // puertos ::= TA4 
>>>>>>> origin/master
            {
              String RESULT = null;
		int ta4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 71: // puertos ::= TA3 
=======
          case 87: // puertos ::= TA3 
>>>>>>> origin/master
            {
              String RESULT = null;
		int ta3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 70: // puertos ::= TA2 
=======
          case 86: // puertos ::= TA2 
>>>>>>> origin/master
            {
              String RESULT = null;
		int ta2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 69: // puertos ::= TA1 
=======
          case 85: // puertos ::= TA1 
>>>>>>> origin/master
            {
              String RESULT = null;
		int ta1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 68: // puertos ::= TA0 
=======
          case 84: // puertos ::= TA0 
>>>>>>> origin/master
            {
              String RESULT = null;
		int ta0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 67: // puertos ::= TE 
=======
          case 83: // puertos ::= TE 
>>>>>>> origin/master
            {
              String RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=te+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 66: // puertos ::= TD 
=======
          case 82: // puertos ::= TD 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=td+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 65: // puertos ::= TC 
=======
          case 81: // puertos ::= TC 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=tc+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 64: // puertos ::= TB 
=======
          case 80: // puertos ::= TB 
>>>>>>> origin/master
            {
              String RESULT = null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=tb+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 63: // puertos ::= TA 
=======
          case 79: // puertos ::= TA 
>>>>>>> origin/master
            {
              String RESULT = null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=ta+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 62: // puertos ::= PE 
=======
          case 78: // puertos ::= PE 
>>>>>>> origin/master
            {
              String RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=pe+"=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 61: // puertos ::= PD 
=======
          case 77: // puertos ::= PD 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 60: // puertos ::= PC 
=======
          case 76: // puertos ::= PC 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc+"=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 59: // puertos ::= PB 
=======
          case 75: // puertos ::= PB 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pb+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 58: // puertos ::= PA 
=======
          case 74: // puertos ::= PA 
>>>>>>> origin/master
            {
              String RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 57: // signo ::= AND 
            {
              String RESULT = null;
		        RESULT=" && "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
          case 73: // exprtipos ::= CTELOGICA 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		 	RESULT=""+b;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exprtipos ::= CARACTER 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		 	 RESULT=""+b;
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exprtipos ::= NUMREAL 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		 	RESULT=""+n;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exprtipos ::= NUMERO 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		 	RESULT=""+n;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 56: // signo ::= OR 
            {
              String RESULT = null;
		         RESULT=" || "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
          case 69: // exprtipos ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			 DatoSimbolo s;
			 if ((s = parser.tabla.buscar(id)) != null) {
				cadena_tipo=s.getTipo();
				RESULT =s.getValor() ;
			}else{
				System.out.println("Varible -->"+id+" no declarada");
			} 

		  
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo ::= BOOLEAN 
            {
              String RESULT = null;
		
		  RESULT="bool";
		   
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo ::= CHAR 
            {
              String RESULT = null;
		 
		 	RESULT="char";
		 	
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo ::= REAL 
            {
              String RESULT = null;
		 
		 	RESULT="float";
		 	
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo ::= INTEGER 
            {
              String RESULT = null;
		
 		 	RESULT="int";
 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // signo ::= AND 
            {
              String RESULT = null;
		        RESULT=" && "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // signo ::= OR 
            {
              String RESULT = null;
		         RESULT=" || "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // signo ::= DIFERENTE 
            {
              String RESULT = null;
		  RESULT=" != "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 55: // signo ::= IGUAL2 
            {
              String RESULT = null;
		     RESULT=" == "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
          case 61: // signo ::= IGUAL2 
            {
              String RESULT = null;
		     RESULT=" == "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 54: // signo ::= MAYORIGUAL 
            {
              String RESULT = null;
		 RESULT=" >= "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
          case 60: // signo ::= MAYORIGUAL 
            {
              String RESULT = null;
		 RESULT=" >= "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 53: // signo ::= MENORIGUAL 
            {
              String RESULT = null;
		 RESULT=" <= "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
          case 59: // signo ::= MENORIGUAL 
            {
              String RESULT = null;
		 RESULT=" <= "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 52: // signo ::= MENOR 
            {
              String RESULT = null;
		      RESULT=" < ";  
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
          case 58: // signo ::= MENOR 
            {
              String RESULT = null;
		      RESULT=" < ";  
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 51: // signo ::= MAYOR 
            {
              String RESULT = null;
		       RESULT=" > ";  
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
          case 57: // signo ::= MAYOR 
            {
              String RESULT = null;
		       RESULT=" > ";  
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 50: // condicion_extra ::= signo item_condicion condicion_extra 
=======
          case 56: // condicion_extra ::= signo item_condicion condicion_extra 
>>>>>>> origin/master
            {
              String RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					cadena_condiciones =" "+sig+e1 +cadena_condiciones;
					RESULT =cadena_condiciones;
					System.out.println("resto de las condicion-->"+cadena_condiciones);
				
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion_extra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 49: // condicion_extra ::= signo item_condicion 
=======
          case 55: // condicion_extra ::= signo item_condicion 
>>>>>>> origin/master
            {
              String RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					cadena_condiciones=" "+sig+e1;
					RESULT=cadena_condiciones;
					System.out.println("resto de las condicion-->"+cadena_condiciones);
				
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion_extra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 48: // condicion ::= item_condicion signo item_condicion condicion_extra 
=======
          case 54: // condicion ::= item_condicion signo item_condicion condicion_extra 
>>>>>>> origin/master
            {
              BloqueCondicion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			 RESULT = generarCondicion(e1 ,sig, e2,c);
			
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(16/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 47: // condicion ::= item_condicion signo item_condicion 
=======
          case 53: // condicion ::= item_condicion signo item_condicion 
>>>>>>> origin/master
            {
              BloqueCondicion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT = generarCondicion(e1 ,sig, e2);
			
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(16/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 46: // item_condicion ::= BINARIO CADENA 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT="0b"+n;
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // item_condicion ::= puertost 
=======
          case 52: // item_condicion ::= puertost 
>>>>>>> origin/master
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT=p;
		
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(17/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(15/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 44: // item_condicion ::= NUMERO 
=======
          case 51: // item_condicion ::= NUMERO 
>>>>>>> origin/master
            {
              String RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			RESULT= Integer.toString(num); 
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // item_condicion ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT=id;
		
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(17/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(15/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= NUMERO 
            {
              String RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= Integer.toString(num); 
								//generarTerceto("="+num);
			
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=id;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cases ::= cases CASO expression DOSPUNTOS 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=c+"case "+e2+":\n";
				
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cases ::= CASO expression DOSPUNTOS 
            {
              Object RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT="case "+e2+":\n";
				
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cases ::= cases OTHERWISE DOSPUNTOS instrucciones 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				RESULT=c+"default: "+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cases ::= cases CASO expression DOSPUNTOS instrucciones 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT=c+"case "+e2+":"+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cases ::= OTHERWISE DOSPUNTOS instrucciones 
            {
              Object RESULT = null;
		
				RESULT="default: "+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cases ::= CASO expression DOSPUNTOS instrucciones 
            {
              Object RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="case "+e2+":"+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= WHILE LPAREN expression RPAREN DO instrucciones FIN WHILE 
            {
              String RESULT = null;
		int etqInicioWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int etqInicioWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String etqInicioWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
				RESULT="\n\t\twhile("+c+")\n\t\t{\n\t"+auxiliar+"\t\t}";
				auxiliar="";	
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= WHILE LPAREN condicion RPAREN DO instrucciones FIN WHILE 
            {
              String RESULT = null;
		int etqInicioWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int etqInicioWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String etqInicioWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
				RESULT="\n\t\twhile("+c.condicion+")\n\t\t{\n\t"+auxiliar+"\t\t}";
				auxiliar="";	
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= SWITCH LPAREN puertost RPAREN OF cases FIN SWITCH 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="\n\t\tswitch("+p+")\n{\n\t\t\t"+c+"\n}\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= SWITCH LPAREN expression RPAREN OF cases FIN SWITCH 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="\n\t\tswitch("+e+")\n{\n\t\t\t"+c+"\n}\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones NT$1 NO instrucciones FIN 
            {
              String RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
					//f2=pila2.pop();
					//p1=f2.getInstruccion();
					p1=pila2.pop().toString();
					auxno=auxiliar;
					RESULT="\n\t\tif("+p+")\n\t\t{\t"+p1+"\t\t}"+"\n\t\telse\n\t\t{\n\t"+auxno+"\t\t}\n";
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$1 ::= 
            {
              Object RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

					//frijol f=new frijol("",auxiliar);
					pila2.push(auxiliar);
					auxiliar="";
				
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(28/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(23/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones NT$0 NO instrucciones FIN 
            {
              String RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
					/*f2=p.pop();
					p1=f2.getInstruccion();*/
					p1=p.pop().toString();
					auxno=auxiliar;
					RESULT="\n\t\tif("+c.condicion+")\n\t\t{\t"+p1+"\t\t}"+"\n\t\telse\n\t\t{\n\t"+auxno+"\t\t}\n";
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$0 ::= 
            {
              Object RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

					//frijol f=new frijol("",auxiliar);
					p.push(auxiliar);
					auxiliar="";
				
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(27/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(22/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/master
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones FIN 
            {
              String RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				aux="\n\t\tif("+p+")\n\t\t{\t"+auxiliar+"\t\t}\n";
				auxiliar="";
				RESULT=aux;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones FIN 
            {
              String RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				aux="\n\t\tif("+c.condicion+")\n\t\t{\t"+auxiliar+"\t\t}\n";
				auxiliar="";
				RESULT=aux;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= RETURN PCOMA 
            {
              String RESULT = null;
		
				RESULT="return;\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= puertos IGUAL puertost MAS NUMERO PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=p+u+"+"+n+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= CHALE LPAREN NUMERO RPAREN PCOMA 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				//retardos= retardos+c+"("+n+");\n";
	   			RESULT=c+"("+n+");\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= ID LPAREN RPAREN PCOMA 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
				Metodos s;
				if ((s = tablaMetodos.search(i)) == null)
				{System.out.println(i+ " es una METODO no definido");}			
				else
				{
					// System.out.println(i+" instrucciones del metodo => "+s.getValor());
					//System.out.println("codigo intermedio==> "+i+"();");
					RESULT="\t"+i+"();\n";
				}	
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= puertos IGUAL NUMERO PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				//   miCodigo=p+t+u+";\n"+miCodigo;
				RESULT="\n\t"+p+n+";\n";
				//System.out.println("cadena de toggles:"+RESULT);
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= puertos TOGGLE puertost PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				//   miCodigo=p+t+u+";\n"+miCodigo;
				RESULT="\n\t"+p+t+u+";\n";
				//System.out.println("cadena de toggles:"+RESULT);
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= ID IGUAL exprtipos PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			System.out.println("Mensaje "+id + "-->"+t);
			DatoSimbolo ds=parser.tabla.buscar(id);
			 if(ds!= null){
			 	System.err.println(id + " redeclarada.");
			 RESULT="\n\t"+id+"="+t+";";
			}
			 else{
			 	System.out.println("Error al Asignar valor a: "+id);
			}

			
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= TIPOVC ID DOSPUNTOS tipo IGUAL exprtipos PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			 RESULT = t;
			 if(parser.tabla.buscar(id)!= null)
			 	System.err.println(id + " redeclarada.");
			 else
			 {
			 	System.out.println("Mensaje "+id + "-->"+e);
			 	RESULT="\n\t"+t+" "+id+" ="+e+";";
			 	parser.tabla.insertar(id, t,e);
			 }
			 	
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= TIPOVC ID DOSPUNTOS tipo PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			 
			 DatoSimbolo ds=parser.tabla.buscar(id);
			 if(ds!= null)
			 	System.err.println(id + " redeclarada.");
			 else{
			 	System.out.println("Mensaje "+id + "-->"+t);
			 	RESULT="\n\t"+t+" "+id+";";
				parser.tabla.insertar(id, t,"");

			 }
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= instruccion instrucciones 
            {
              String RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				System.out.println("valor de in en instrucciones:"+in);
				auxiliar=in+auxiliar;
				//RESULT=in;
                //aux=in;
				System.out.println("cadena de varias instrucciones en aux:"+auxiliar);
			
              CUP$parser$result = new java_cup.runtime.Symbol(8/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= instruccion 
            {
              String RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				System.out.println("valor de in en intruccion:"+in);
				auxiliar=in + auxiliar;
                //aux=in;
				//RESULT=in;
				System.out.println("cadena de una istruccion en aux: "+auxiliar);
			
              CUP$parser$result = new java_cup.runtime.Symbol(8/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= ID DOSPUNTOS tipo COMA parametros 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				cadena_parametros=" "+t+" "+id+" ,"+cadena_parametros;
			
              CUP$parser$result = new java_cup.runtime.Symbol(21/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= ID DOSPUNTOS tipo 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				cadena_parametros=" "+t+" "+id;
			
              CUP$parser$result = new java_cup.runtime.Symbol(21/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodo ::= metodo VOID ID LPAREN parametros RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(m)) == null)
				s = tablaMetodos.insert(m,auxiliar);
			else
				{ s.setvalue(auxiliar);}
			codigo=v+m+"("+cadena_parametros+")\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		    cadena_parametros="";
			//System.out.println("codigo intermedio==> int "+codigo);
		 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= VOID ID LPAREN parametros RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(i)) == null)
				s = tablaMetodos.insert(i,auxiliar);
			else
			{ 
				s.setvalue(auxiliar);
			}			
			codigo=v+i+"("+cadena_parametros+")\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		    cadena_parametros="";
			//System.out.println("codigo intermedio==> int "+codigo);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= metodo VOID ID LPAREN RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(m)) == null)
				s = tablaMetodos.insert(m,auxiliar);
			else
				{ s.setvalue(auxiliar);}
			codigo=v+m+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
			//System.out.println("codigo intermedio==> int "+codigo);
		 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodo ::= VOID ID LPAREN RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(i)) == null)
				s = tablaMetodos.insert(i,auxiliar);
			else
			{ 
				s.setvalue(auxiliar);
			}			
			codigo=v+i+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
			//System.out.println("codigo intermedio==> int "+codigo);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // main ::= MAIN LLLAVE RLLAVE 
            {
              Object RESULT = null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			miCodigo=miCodigo+main+"{\n\t\tsetup();\n\t\tloop();\n\n\t\t return; \n\t }";
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*main*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // main ::= MAIN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			miCodigo=miCodigo+main+"{\n\t\tsetup();\n\t\tloop();\n"+auxiliar+"\n\t\t return; \n\t }";
		    auxiliar="";
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*main*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ciclo ::= CICLO LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int cicloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cicloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ciclo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			miCodigo=miCodigo+ciclo+"{\n\t \twhile(1){\n\n"+ auxiliar +"\t\t}\n\n\t}";
			auxiliar="";
        
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ciclo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // io ::= SALIDA 
            {
              String RESULT = null;
		int salidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int salidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object salida = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT="0;\n"; 
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*io*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // io ::= ENTRADA 
            {
              String RESULT = null;
		 
		RESULT="1;\n";  
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*io*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // confpuertos ::= confpuertos puertos IGUAL io PCOMA 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				miCodigo=miCodigo+p+i;
	        
              CUP$parser$result = new java_cup.runtime.Symbol(9/*confpuertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // confpuertos ::= puertos IGUAL io PCOMA 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				miCodigo=miCodigo+p+i;
			
              CUP$parser$result = new java_cup.runtime.Symbol(9/*confpuertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // setup ::= SETUP LLLAVE confpuertos instrucciones RLLAVE 
            {
              Object RESULT = null;
		int setupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int setupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object setup = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	        //System.out.println("codigo intermedio==>"+setup+"   "+fsetup);
	        miCodigo=setup+"{\n\tOSCCON=0x60;\n\tANSEL=0;\n"+miCodigo+auxiliar+"\n}";
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*setup*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // setup ::= SETUP LLLAVE confpuertos RLLAVE 
            {
              Object RESULT = null;
		int setupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int setupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object setup = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			//System.out.println("codigo intermedio==>"+setup+"   "+fsetup);
	        miCodigo=setup+"{\n\tOSCCON=0x60;\n\tANSEL=0;\n"+miCodigo+"\n}";
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*setup*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodos ::= metodo setup RETARDO LPAREN RPAREN PCOMA ciclo 
            {
              Object RESULT = null;
		int retardoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retardoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object retardo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
					miCodigo=retardo+losMetodos+miCodigo;  
				
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodos ::= metodo setup ciclo 
            {
              Object RESULT = null;
		 
					miCodigo=losMetodos+miCodigo;  
				
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodos ::= setup RETARDO LPAREN RPAREN PCOMA ciclo 
            {
              Object RESULT = null;
		int retardoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retardoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object retardo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 miCodigo=retardo+miCodigo;  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // metodos ::= setup ciclo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= FUSES metodos main 
            {
              Object RESULT = null;
		int fusesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fusesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fuses = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
 					miCodigo=fuses+miCodigo;
              		 // System.out.println("Clase Generada\n\n"+miCodigo+"\n\n");
                File miClase;
	        	try{
	        		
	            	miClase = new File("mapic.c");
	            	if(miClase.exists())
	            		miClase.delete();

	            	if(miClase.createNewFile()){
	                	//System.out.println("Se ha creado el archivo");
	            	}
	            	FileWriter escribir=new FileWriter(miClase,true);
	            	escribir.write(miCodigo);
	            	escribir.close();
	        	}catch(IOException e){
	        		System.out.println("ERROR NO SE PUEDE ");
	            	
	        	}
             

              CUP$parser$result = new java_cup.runtime.Symbol(1/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

