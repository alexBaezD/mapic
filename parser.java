
//----------------------------------------------------
// The following code was generated by CUP v0.10k
<<<<<<< Updated upstream

=======
<<<<<<< HEAD
<<<<<<< HEAD
// Wed Jul 08 06:48:43 CDT 2015
=======

>>>>>>> origin/master
=======

>>>>>>> origin/master
>>>>>>> Stashed changes
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Stack;

/** CUP v0.10k generated parser.
<<<<<<< HEAD
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
  * @version Wed Jul 08 06:48:43 CDT 2015
=======
<<<<<<< HEAD
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
  * @version Thu Jul 30 14:21:47 CDT 2015
=======
  * @version Thu Jul 30 14:20:28 CDT 2015
>>>>>>> origin/master
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
>>>>>>> origin/master
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
<<<<<<< Updated upstream
    "\000\u0100\000\002\003\005\000\002\002\004\000\002\004" +
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\000\u0111\000\002\003\005\000\002\002\004\000\002\004" +
=======
    "\000\u0100\000\002\003\005\000\002\002\004\000\002\004" +
>>>>>>> origin/master
=======
    "\000\u0100\000\002\003\005\000\002\002\004\000\002\004" +
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\004\000\002\004\010\000\002\004\005\000\002\004\011" +
    "\000\002\006\006\000\002\006\007\000\002\013\006\000" +
    "\002\013\007\000\002\016\003\000\002\016\003\000\002" +
    "\007\006\000\002\005\006\000\002\005\005\000\002\010" +
    "\011\000\002\010\012\000\002\010\012\000\002\010\013" +
    "\000\002\027\005\000\002\027\007\000\002\012\003\000" +
    "\002\012\004\000\002\017\007\000\002\017\011\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\006\000\002\017\007\000\002\017\010\000\002\017\010" +
    "\000\002\017\006\000\002\017\006\000\002\017\004\000" +
    "\002\017\011\000\002\017\011\000\002\034\002\000\002" +
    "\017\014\000\002\035\002\000\002\017\014\000\002\017" +
    "\012\000\002\017\012\000\002\017\012\000\002\017\012" +
    "\000\002\017\006\000\002\017\006\000\002\017\010\000" +
    "\002\017\011\000\002\017\006\000\002\017\010\000\002" +
    "\017\010\000\002\032\005\000\002\032\007\000\002\032" +
    "\010\000\002\032\011\000\002\032\007\000\002\032\007" +
    "\000\002\032\010\000\002\032\010\000\002\033\004\000" +
    "\002\033\003\000\002\033\004\000\002\033\005\000\002" +
    "\011\006\000\002\011\005\000\002\011\007\000\002\011" +
    "\006\000\002\011\005\000\002\011\006\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\004\000" +
    "\002\031\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\004\000\002\020\004\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\004\000\002\021\004" +
    "\000\002\022\005\000\002\022\006\000\002\024\004\000" +
    "\002\024\005\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
=======
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\006\000\002\017\007\000\002\017\007\000\002\017\010" +
    "\000\002\017\004\000\002\017\006\000\002\017\011\000" +
    "\002\017\011\000\002\032\002\000\002\017\014\000\002" +
    "\033\002\000\002\017\014\000\002\017\012\000\002\017" +
    "\012\000\002\017\012\000\002\017\012\000\002\017\006" +
    "\000\002\017\006\000\002\017\010\000\002\017\010\000" +
    "\002\017\010\000\002\017\011\000\002\011\006\000\002" +
    "\011\005\000\002\011\007\000\002\011\006\000\002\011" +
    "\005\000\002\011\006\000\002\030\003\000\002\030\003" +
    "\000\002\031\004\000\002\031\005\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\004\000\002\021\004\000\002\022" +
    "\005\000\002\022\006\000\002\024\004\000\002\024\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\014\003\000\002\014\003\000\002" +
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
>>>>>>> origin/master
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
=======
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
>>>>>>> origin/master
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
<<<<<<< HEAD
    "\015\003" });
=======
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003" });
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
>>>>>>> origin/master
=======
>>>>>>> origin/master
>>>>>>> Stashed changes

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\000\u01b9\000\004\021\005\001\002\000\004\002\u01bb\001" +
    "\002\000\006\020\006\230\012\001\002\000\004\245\u01ac" +
    "\001\002\000\006\024\u01a6\025\u0197\001\002\000\004\017" +
    "\u01a1\001\002\000\006\020\006\230\u018a\001\002\000\004" +
    "\270\013\001\002\000\004\240\014\001\002\000\006\241" +
    "\016\270\015\001\002\000\004\247\u0185\001\002\000\004" +
    "\245\u0182\001\002\000\004\241\020\001\002\000\004\245" +
    "\021\001\002\000\u010e\016\141\026\175\027\174\030\171" +
    "\031\170\032\165\033\027\034\026\035\024\036\023\037" +
    "\022\040\162\041\203\044\157\045\156\046\155\047\152" +
    "\050\151\051\147\052\146\053\142\054\120\055\117\056" +
    "\116\057\115\060\114\061\113\062\111\063\110\064\070" +
    "\065\067\066\066\067\065\070\064\071\063\072\062\073" +
    "\060\074\045\075\044\076\043\077\042\100\040\101\037" +
    "\102\034\103\033\104\221\105\217\106\215\107\213\110" +
    "\200\111\177\112\176\113\173\114\172\115\167\116\166" +
    "\117\164\120\143\121\140\122\136\123\135\124\134\125" +
    "\133\126\131\127\127\130\107\131\106\132\105\133\104" +
    "\134\103\135\102\136\101\137\100\140\061\141\057\142" +
    "\056\143\054\144\053\145\052\146\051\147\050\150\032" +
    "\151\031\152\030\153\025\154\225\155\224\156\222\157" +
    "\220\160\216\161\214\162\212\163\211\164\126\165\125" +
    "\166\124\167\123\170\122\171\121\173\227\174\073\175" +
    "\210\176\112\177\230\200\035\201\036\202\041\203\047" +
    "\204\137\205\204\206\201\207\153\210\145\211\226\212" +
    "\150\213\144\214\223\215\071\216\072\217\074\220\075" +
    "\221\076\222\077\223\055\224\205\225\130\226\206\227" +
    "\207\235\154\263\163\266\160\270\202\272\046\274\132" +
    "\001\002\000\006\251\uff8f\253\uff8f\001\002\000\006\251" +
    "\uff90\253\uff90\001\002\000\006\251\uff91\253\uff91\001\002" +
    "\000\006\251\uff44\253\uff44\001\002\000\006\251\uff92\253" +
    "\uff92\001\002\000\006\251\uff93\253\uff93\001\002\000\006" +
    "\251\uff45\253\uff45\001\002\000\006\251\uff46\253\uff46\001" +
    "\002\000\006\251\uff47\253\uff47\001\002\000\006\251\uff6c" +
    "\253\uff6c\001\002\000\006\251\uff6d\253\uff6d\001\002\000" +
    "\006\251\uff28\253\uff28\001\002\000\006\251\uff27\253\uff27" +
    "\001\002\000\006\251\uff6e\253\uff6e\001\002\000\006\251" +
    "\uff6f\253\uff6f\001\002\000\006\251\uff26\253\uff26\001\002" +
    "\000\006\251\uff70\253\uff70\001\002\000\006\251\uff71\253" +
    "\uff71\001\002\000\006\251\uff72\253\uff72\001\002\000\006" +
    "\251\uff73\253\uff73\001\002\000\004\240\u016f\001\002\000" +
    "\006\251\uff25\253\uff25\001\002\000\006\251\uff48\253\uff48" +
    "\001\002\000\006\251\uff49\253\uff49\001\002\000\006\251" +
    "\uff4a\253\uff4a\001\002\000\006\251\uff4b\253\uff4b\001\002" +
    "\000\006\251\uff4c\253\uff4c\001\002\000\006\251\uff1e\253" +
    "\uff1e\001\002\000\006\251\uff4d\253\uff4d\001\002\000\006" +
    "\251\uff4e\253\uff4e\001\002\000\006\251\uff74\253\uff74\001" +
    "\002\000\006\251\uff4f\253\uff4f\001\002\000\006\251\uff75" +
    "\253\uff75\001\002\000\006\251\uff76\253\uff76\001\002\000" +
    "\006\251\uff77\253\uff77\001\002\000\006\251\uff78\253\uff78" +
    "\001\002\000\006\251\uff79\253\uff79\001\002\000\006\251" +
    "\uff7a\253\uff7a\001\002\000\006\251\uff7b\253\uff7b\001\002" +
    "\000\006\251\uff24\253\uff24\001\002\000\006\251\uff23\253" +
    "\uff23\001\002\000\006\251\uff2c\253\uff2c\001\002\000\006" +
    "\251\uff22\253\uff22\001\002\000\006\251\uff21\253\uff21\001" +
    "\002\000\006\251\uff20\253\uff20\001\002\000\006\251\uff1f" +
    "\253\uff1f\001\002\000\006\251\uff50\253\uff50\001\002\000" +
    "\006\251\uff51\253\uff51\001\002\000\006\251\uff52\253\uff52" +
    "\001\002\000\006\251\uff53\253\uff53\001\002\000\006\251" +
    "\uff54\253\uff54\001\002\000\006\251\uff55\253\uff55\001\002" +
    "\000\006\251\uff56\253\uff56\001\002\000\006\251\uff57\253" +
    "\uff57\001\002\000\006\251\uff7c\253\uff7c\001\002\000\006" +
    "\251\uff7d\253\uff7d\001\002\000\006\251\uff2a\253\uff2a\001" +
    "\002\000\006\251\uff7e\253\uff7e\001\002\000\006\251\uff7f" +
    "\253\uff7f\001\002\000\006\251\uff80\253\uff80\001\002\000" +
    "\006\251\uff81\253\uff81\001\002\000\006\251\uff82\253\uff82" +
    "\001\002\000\006\251\uff83\253\uff83\001\002\000\006\251" +
    "\uff36\253\uff36\001\002\000\006\251\uff37\253\uff37\001\002" +
    "\000\006\251\uff38\253\uff38\001\002\000\006\251\uff39\253" +
    "\uff39\001\002\000\006\251\uff3a\253\uff3a\001\002\000\006" +
    "\251\uff3b\253\uff3b\001\002\000\006\251\uff58\253\uff58\001" +
    "\002\000\006\251\uff1c\253\uff1c\001\002\000\006\251\uff59" +
    "\253\uff59\001\002\000\004\240\u014a\001\002\000\006\251" +
    "\uff5a\253\uff5a\001\002\000\006\251\uff5b\253\uff5b\001\002" +
    "\000\006\251\uff5c\253\uff5c\001\002\000\006\251\uff5d\253" +
    "\uff5d\001\002\000\006\251\uff8c\253\uff8c\001\002\000\006" +
    "\251\uff5e\253\uff5e\001\002\000\004\240\u0146\001\002\000" +
    "\006\251\uff84\253\uff84\001\002\000\006\251\uff5f\253\uff5f" +
    "\001\002\000\006\251\uff2f\253\uff2f\001\002\000\006\251" +
    "\uff32\253\uff32\001\002\000\006\251\uff85\253\uff85\001\002" +
    "\000\006\251\uff86\253\uff86\001\002\000\006\251\uff30\253" +
    "\uff30\001\002\000\006\251\uff87\253\uff87\001\002\000\006" +
    "\251\uff88\253\uff88\001\002\000\006\251\uff33\253\uff33\001" +
    "\002\000\004\240\u012b\001\002\000\006\251\uff89\253\uff89" +
    "\001\002\000\006\251\uff8a\253\uff8a\001\002\000\006\251" +
    "\uff8b\253\uff8b\001\002\000\004\250\u012a\001\002\000\u0118" +
    "\016\141\026\175\027\174\030\171\031\170\032\165\033" +
    "\027\034\026\035\024\036\023\037\022\040\162\041\203" +
    "\044\157\045\156\046\155\047\152\050\151\051\147\052" +
    "\146\053\142\054\120\055\117\056\116\057\115\060\114" +
    "\061\113\062\111\063\110\064\070\065\067\066\066\067" +
    "\065\070\064\071\063\072\062\073\060\074\045\075\044" +
    "\076\043\077\042\100\040\101\037\102\034\103\033\104" +
    "\221\105\217\106\215\107\213\110\200\111\177\112\176" +
    "\113\173\114\172\115\167\116\166\117\164\120\143\121" +
    "\140\122\136\123\135\124\134\125\133\126\131\127\127" +
    "\130\107\131\106\132\105\133\104\134\103\135\102\136" +
    "\101\137\100\140\061\141\057\142\056\143\054\144\053" +
    "\145\052\146\051\147\050\150\032\151\031\152\030\153" +
    "\025\154\225\155\224\156\222\157\220\160\216\161\214" +
    "\162\212\163\211\164\126\165\125\166\124\167\123\170" +
    "\122\171\121\173\227\174\073\175\210\176\112\177\230" +
    "\200\035\201\036\202\041\203\047\204\137\205\204\206" +
    "\201\207\153\210\145\211\226\212\150\213\144\214\223" +
    "\215\071\216\072\217\074\220\075\221\076\222\077\223" +
    "\055\224\205\225\130\226\206\227\207\232\uffec\233\uffec" +
    "\235\154\237\uffec\246\uffec\263\163\266\160\270\202\272" +
    "\046\273\uffec\274\132\001\002\000\006\251\uff8e\253\uff8e" +
    "\001\002\000\004\270\u011c\001\002\000\006\251\uff60\253" +
    "\uff60\001\002\000\006\251\uff94\253\uff94\001\002\000\006" +
    "\251\uff61\253\uff61\001\002\000\006\251\uff62\253\uff62\001" +
    "\002\000\006\251\uff95\253\uff95\001\002\000\006\251\uff96" +
    "\253\uff96\001\002\000\006\251\uff63\253\uff63\001\002\000" +
    "\006\251\uff64\253\uff64\001\002\000\006\251\uff97\253\uff97" +
    "\001\002\000\006\251\uff98\253\uff98\001\002\000\006\251" +
    "\uff65\253\uff65\001\002\000\006\251\uff66\253\uff66\001\002" +
    "\000\006\251\uff67\253\uff67\001\002\000\006\251\uff34\253" +
    "\uff34\001\002\000\016\240\326\242\321\243\324\251\322" +
    "\264\323\265\325\001\002\000\006\251\uff8d\253\uff8d\001" +
    "\002\000\006\251\uff35\253\uff35\001\002\000\006\251\uff1d" +
    "\253\uff1d\001\002\000\006\251\uff1b\253\uff1b\001\002\000" +
    "\006\251\uff1a\253\uff1a\001\002\000\006\251\uff2b\253\uff2b" +
    "\001\002\000\006\251\uff3c\253\uff3c\001\002\000\006\251" +
    "\uff3d\253\uff3d\001\002\000\006\251\uff68\253\uff68\001\002" +
    "\000\006\251\uff3e\253\uff3e\001\002\000\006\251\uff69\253" +
    "\uff69\001\002\000\006\251\uff3f\253\uff3f\001\002\000\006" +
    "\251\uff6a\253\uff6a\001\002\000\006\251\uff40\253\uff40\001" +
    "\002\000\006\251\uff6b\253\uff6b\001\002\000\006\251\uff41" +
    "\253\uff41\001\002\000\006\251\uff2e\253\uff2e\001\002\000" +
    "\006\251\uff42\253\uff42\001\002\000\006\251\uff43\253\uff43" +
    "\001\002\000\006\251\uff31\253\uff31\001\002\000\006\251" +
    "\uff2d\253\uff2d\001\002\000\006\251\uff29\253\uff29\001\002" +
    "\000\006\251\234\253\235\001\002\000\004\246\233\001" +
    "\002\000\006\020\ufff0\230\ufff0\001\002\000\126\026\250" +
    "\027\247\030\246\031\245\032\244\110\240\111\236\112" +
    "\305\113\303\114\301\115\277\116\276\117\275\120\272" +
    "\121\267\122\266\123\265\124\264\125\263\126\262\127" +
    "\261\130\260\131\257\132\256\133\255\134\254\135\253" +
    "\136\252\137\251\140\243\141\242\142\241\143\237\144" +
    "\307\145\304\146\302\147\300\150\274\151\273\152\271" +
    "\153\270\267\311\001\002\000\124\026\250\027\247\030" +
    "\246\031\245\032\244\110\240\111\236\112\305\113\303" +
    "\114\301\115\277\116\276\117\275\120\272\121\267\122" +
    "\266\123\265\124\264\125\263\126\262\127\261\130\260" +
    "\131\257\132\256\133\255\134\254\135\253\136\252\137" +
    "\251\140\243\141\242\142\241\143\237\144\307\145\304" +
    "\146\302\147\300\150\274\151\273\152\271\153\270\001" +
    "\002\000\030\241\uff13\242\uff13\250\uff13\252\uff13\254\uff13" +
    "\255\uff13\256\uff13\257\uff13\260\uff13\261\uff13\262\uff13\001" +
    "\002\000\030\241\ufef9\242\ufef9\250\ufef9\252\ufef9\254\ufef9" +
    "\255\ufef9\256\ufef9\257\ufef9\260\ufef9\261\ufef9\262\ufef9\001" +
    "\002\000\030\241\uff14\242\uff14\250\uff14\252\uff14\254\uff14" +
    "\255\uff14\256\uff14\257\uff14\260\uff14\261\uff14\262\uff14\001" +
    "\002\000\030\241\ufefa\242\ufefa\250\ufefa\252\ufefa\254\ufefa" +
    "\255\ufefa\256\ufefa\257\ufefa\260\ufefa\261\ufefa\262\ufefa\001" +
    "\002\000\030\241\ufefb\242\ufefb\250\ufefb\252\ufefb\254\ufefb" +
    "\255\ufefb\256\ufefb\257\ufefb\260\ufefb\261\ufefb\262\ufefb\001" +
    "\002\000\030\241\ufefc\242\ufefc\250\ufefc\252\ufefc\254\ufefc" +
    "\255\ufefc\256\ufefc\257\ufefc\260\ufefc\261\ufefc\262\ufefc\001" +
    "\002\000\030\241\uff15\242\uff15\250\uff15\252\uff15\254\uff15" +
    "\255\uff15\256\uff15\257\uff15\260\uff15\261\uff15\262\uff15\001" +
    "\002\000\030\241\uff16\242\uff16\250\uff16\252\uff16\254\uff16" +
    "\255\uff16\256\uff16\257\uff16\260\uff16\261\uff16\262\uff16\001" +
    "\002\000\030\241\uff17\242\uff17\250\uff17\252\uff17\254\uff17" +
    "\255\uff17\256\uff17\257\uff17\260\uff17\261\uff17\262\uff17\001" +
    "\002\000\030\241\uff18\242\uff18\250\uff18\252\uff18\254\uff18" +
    "\255\uff18\256\uff18\257\uff18\260\uff18\261\uff18\262\uff18\001" +
    "\002\000\030\241\uff19\242\uff19\250\uff19\252\uff19\254\uff19" +
    "\255\uff19\256\uff19\257\uff19\260\uff19\261\uff19\262\uff19\001" +
    "\002\000\030\241\ufefd\242\ufefd\250\ufefd\252\ufefd\254\ufefd" +
    "\255\ufefd\256\ufefd\257\ufefd\260\ufefd\261\ufefd\262\ufefd\001" +
    "\002\000\030\241\ufefe\242\ufefe\250\ufefe\252\ufefe\254\ufefe" +
    "\255\ufefe\256\ufefe\257\ufefe\260\ufefe\261\ufefe\262\ufefe\001" +
    "\002\000\030\241\ufeff\242\ufeff\250\ufeff\252\ufeff\254\ufeff" +
    "\255\ufeff\256\ufeff\257\ufeff\260\ufeff\261\ufeff\262\ufeff\001" +
    "\002\000\030\241\uff00\242\uff00\250\uff00\252\uff00\254\uff00" +
    "\255\uff00\256\uff00\257\uff00\260\uff00\261\uff00\262\uff00\001" +
    "\002\000\030\241\uff01\242\uff01\250\uff01\252\uff01\254\uff01" +
    "\255\uff01\256\uff01\257\uff01\260\uff01\261\uff01\262\uff01\001" +
    "\002\000\030\241\uff02\242\uff02\250\uff02\252\uff02\254\uff02" +
    "\255\uff02\256\uff02\257\uff02\260\uff02\261\uff02\262\uff02\001" +
    "\002\000\030\241\uff03\242\uff03\250\uff03\252\uff03\254\uff03" +
    "\255\uff03\256\uff03\257\uff03\260\uff03\261\uff03\262\uff03\001" +
    "\002\000\030\241\uff04\242\uff04\250\uff04\252\uff04\254\uff04" +
    "\255\uff04\256\uff04\257\uff04\260\uff04\261\uff04\262\uff04\001" +
    "\002\000\030\241\uff05\242\uff05\250\uff05\252\uff05\254\uff05" +
    "\255\uff05\256\uff05\257\uff05\260\uff05\261\uff05\262\uff05\001" +
    "\002\000\030\241\uff06\242\uff06\250\uff06\252\uff06\254\uff06" +
    "\255\uff06\256\uff06\257\uff06\260\uff06\261\uff06\262\uff06\001" +
    "\002\000\030\241\uff07\242\uff07\250\uff07\252\uff07\254\uff07" +
    "\255\uff07\256\uff07\257\uff07\260\uff07\261\uff07\262\uff07\001" +
    "\002\000\030\241\uff08\242\uff08\250\uff08\252\uff08\254\uff08" +
    "\255\uff08\256\uff08\257\uff08\260\uff08\261\uff08\262\uff08\001" +
    "\002\000\030\241\uff09\242\uff09\250\uff09\252\uff09\254\uff09" +
    "\255\uff09\256\uff09\257\uff09\260\uff09\261\uff09\262\uff09\001" +
    "\002\000\030\241\uff0a\242\uff0a\250\uff0a\252\uff0a\254\uff0a" +
    "\255\uff0a\256\uff0a\257\uff0a\260\uff0a\261\uff0a\262\uff0a\001" +
    "\002\000\030\241\uff0b\242\uff0b\250\uff0b\252\uff0b\254\uff0b" +
    "\255\uff0b\256\uff0b\257\uff0b\260\uff0b\261\uff0b\262\uff0b\001" +
    "\002\000\030\241\ufef1\242\ufef1\250\ufef1\252\ufef1\254\ufef1" +
    "\255\ufef1\256\ufef1\257\ufef1\260\ufef1\261\ufef1\262\ufef1\001" +
    "\002\000\030\241\ufef2\242\ufef2\250\ufef2\252\ufef2\254\ufef2" +
    "\255\ufef2\256\ufef2\257\ufef2\260\ufef2\261\ufef2\262\ufef2\001" +
    "\002\000\030\241\uff0c\242\uff0c\250\uff0c\252\uff0c\254\uff0c" +
    "\255\uff0c\256\uff0c\257\uff0c\260\uff0c\261\uff0c\262\uff0c\001" +
    "\002\000\030\241\ufef3\242\ufef3\250\ufef3\252\ufef3\254\ufef3" +
    "\255\ufef3\256\ufef3\257\ufef3\260\ufef3\261\ufef3\262\ufef3\001" +
    "\002\000\030\241\ufef4\242\ufef4\250\ufef4\252\ufef4\254\ufef4" +
    "\255\ufef4\256\ufef4\257\ufef4\260\ufef4\261\ufef4\262\ufef4\001" +
    "\002\000\030\241\uff0d\242\uff0d\250\uff0d\252\uff0d\254\uff0d" +
    "\255\uff0d\256\uff0d\257\uff0d\260\uff0d\261\uff0d\262\uff0d\001" +
    "\002\000\030\241\uff0e\242\uff0e\250\uff0e\252\uff0e\254\uff0e" +
    "\255\uff0e\256\uff0e\257\uff0e\260\uff0e\261\uff0e\262\uff0e\001" +
    "\002\000\030\241\uff0f\242\uff0f\250\uff0f\252\uff0f\254\uff0f" +
    "\255\uff0f\256\uff0f\257\uff0f\260\uff0f\261\uff0f\262\uff0f\001" +
    "\002\000\030\241\ufef5\242\ufef5\250\ufef5\252\ufef5\254\ufef5" +
    "\255\ufef5\256\ufef5\257\ufef5\260\ufef5\261\ufef5\262\ufef5\001" +
    "\002\000\030\241\uff10\242\uff10\250\uff10\252\uff10\254\uff10" +
    "\255\uff10\256\uff10\257\uff10\260\uff10\261\uff10\262\uff10\001" +
    "\002\000\030\241\ufef6\242\ufef6\250\ufef6\252\ufef6\254\ufef6" +
    "\255\ufef6\256\ufef6\257\ufef6\260\ufef6\261\ufef6\262\ufef6\001" +
    "\002\000\030\241\uff11\242\uff11\250\uff11\252\uff11\254\uff11" +
    "\255\uff11\256\uff11\257\uff11\260\uff11\261\uff11\262\uff11\001" +
    "\002\000\030\241\ufef7\242\ufef7\250\ufef7\252\ufef7\254\ufef7" +
    "\255\ufef7\256\ufef7\257\ufef7\260\ufef7\261\ufef7\262\ufef7\001" +
    "\002\000\030\241\uff12\242\uff12\250\uff12\252\uff12\254\uff12" +
    "\255\uff12\256\uff12\257\uff12\260\uff12\261\uff12\262\uff12\001" +
    "\002\000\004\250\310\001\002\000\030\241\ufef8\242\ufef8" +
    "\250\ufef8\252\ufef8\254\ufef8\255\ufef8\256\ufef8\257\ufef8\260" +
    "\ufef8\261\ufef8\262\ufef8\001\002\000\u0118\016\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106" +
    "\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7\114\uffe7" +
    "\115\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7\122\uffe7\123" +
    "\uffe7\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7" +
    "\132\uffe7\133\uffe7\134\uffe7\135\uffe7\136\uffe7\137\uffe7\140" +
    "\uffe7\141\uffe7\142\uffe7\143\uffe7\144\uffe7\145\uffe7\146\uffe7" +
    "\147\uffe7\150\uffe7\151\uffe7\152\uffe7\153\uffe7\154\uffe7\155" +
    "\uffe7\156\uffe7\157\uffe7\160\uffe7\161\uffe7\162\uffe7\163\uffe7" +
    "\164\uffe7\165\uffe7\166\uffe7\167\uffe7\170\uffe7\171\uffe7\173" +
    "\uffe7\174\uffe7\175\uffe7\176\uffe7\177\uffe7\200\uffe7\201\uffe7" +
    "\202\uffe7\203\uffe7\204\uffe7\205\uffe7\206\uffe7\207\uffe7\210" +
    "\uffe7\211\uffe7\212\uffe7\213\uffe7\214\uffe7\215\uffe7\216\uffe7" +
    "\217\uffe7\220\uffe7\221\uffe7\222\uffe7\223\uffe7\224\uffe7\225" +
    "\uffe7\226\uffe7\227\uffe7\232\uffe7\233\uffe7\235\uffe7\237\uffe7" +
    "\246\uffe7\263\uffe7\266\uffe7\270\uffe7\272\uffe7\273\uffe7\274" +
    "\uffe7\001\002\000\004\250\320\001\002\000\004\242\313" +
    "\001\002\000\006\267\314\270\315\001\002\000\004\250" +
    "\317\001\002\000\004\250\316\001\002\000\u0118\016\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2" +
    "\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105" +
    "\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2\113\uffe2" +
    "\114\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122" +
    "\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2" +
    "\131\uffe2\132\uffe2\133\uffe2\134\uffe2\135\uffe2\136\uffe2\137" +
    "\uffe2\140\uffe2\141\uffe2\142\uffe2\143\uffe2\144\uffe2\145\uffe2" +
    "\146\uffe2\147\uffe2\150\uffe2\151\uffe2\152\uffe2\153\uffe2\154" +
    "\uffe2\155\uffe2\156\uffe2\157\uffe2\160\uffe2\161\uffe2\162\uffe2" +
    "\163\uffe2\164\uffe2\165\uffe2\166\uffe2\167\uffe2\170\uffe2\171" +
    "\uffe2\173\uffe2\174\uffe2\175\uffe2\176\uffe2\177\uffe2\200\uffe2" +
    "\201\uffe2\202\uffe2\203\uffe2\204\uffe2\205\uffe2\206\uffe2\207" +
    "\uffe2\210\uffe2\211\uffe2\212\uffe2\213\uffe2\214\uffe2\215\uffe2" +
    "\216\uffe2\217\uffe2\220\uffe2\221\uffe2\222\uffe2\223\uffe2\224" +
    "\uffe2\225\uffe2\226\uffe2\227\uffe2\232\uffe2\233\uffe2\235\uffe2" +
    "\237\uffe2\246\uffe2\263\uffe2\266\uffe2\270\uffe2\272\uffe2\273" +
    "\uffe2\274\uffe2\001\002\000\u0118\016\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3" +
    "\101\uffe3\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107" +
    "\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3\114\uffe3\115\uffe3" +
    "\116\uffe3\117\uffe3\120\uffe3\121\uffe3\122\uffe3\123\uffe3\124" +
    "\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3" +
    "\133\uffe3\134\uffe3\135\uffe3\136\uffe3\137\uffe3\140\uffe3\141" +
    "\uffe3\142\uffe3\143\uffe3\144\uffe3\145\uffe3\146\uffe3\147\uffe3" +
    "\150\uffe3\151\uffe3\152\uffe3\153\uffe3\154\uffe3\155\uffe3\156" +
    "\uffe3\157\uffe3\160\uffe3\161\uffe3\162\uffe3\163\uffe3\164\uffe3" +
    "\165\uffe3\166\uffe3\167\uffe3\170\uffe3\171\uffe3\173\uffe3\174" +
    "\uffe3\175\uffe3\176\uffe3\177\uffe3\200\uffe3\201\uffe3\202\uffe3" +
    "\203\uffe3\204\uffe3\205\uffe3\206\uffe3\207\uffe3\210\uffe3\211" +
    "\uffe3\212\uffe3\213\uffe3\214\uffe3\215\uffe3\216\uffe3\217\uffe3" +
    "\220\uffe3\221\uffe3\222\uffe3\223\uffe3\224\uffe3\225\uffe3\226" +
    "\uffe3\227\uffe3\232\uffe3\233\uffe3\235\uffe3\237\uffe3\246\uffe3" +
    "\263\uffe3\266\uffe3\270\uffe3\272\uffe3\273\uffe3\274\uffe3\001" +
    "\002\000\u0118\016\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6" +
    "\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111" +
    "\uffe6\112\uffe6\113\uffe6\114\uffe6\115\uffe6\116\uffe6\117\uffe6" +
    "\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6\126" +
    "\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6\133\uffe6\134\uffe6" +
    "\135\uffe6\136\uffe6\137\uffe6\140\uffe6\141\uffe6\142\uffe6\143" +
    "\uffe6\144\uffe6\145\uffe6\146\uffe6\147\uffe6\150\uffe6\151\uffe6" +
    "\152\uffe6\153\uffe6\154\uffe6\155\uffe6\156\uffe6\157\uffe6\160" +
    "\uffe6\161\uffe6\162\uffe6\163\uffe6\164\uffe6\165\uffe6\166\uffe6" +
    "\167\uffe6\170\uffe6\171\uffe6\173\uffe6\174\uffe6\175\uffe6\176" +
    "\uffe6\177\uffe6\200\uffe6\201\uffe6\202\uffe6\203\uffe6\204\uffe6" +
    "\205\uffe6\206\uffe6\207\uffe6\210\uffe6\211\uffe6\212\uffe6\213" +
    "\uffe6\214\uffe6\215\uffe6\216\uffe6\217\uffe6\220\uffe6\221\uffe6" +
    "\222\uffe6\223\uffe6\224\uffe6\225\uffe6\226\uffe6\227\uffe6\232" +
    "\uffe6\233\uffe6\235\uffe6\237\uffe6\246\uffe6\263\uffe6\266\uffe6" +
    "\270\uffe6\272\uffe6\273\uffe6\274\uffe6\001\002\000\004\242" +
    "\u011a\001\002\000\016\010\345\011\340\012\347\240\344" +
    "\267\341\270\343\001\002\000\004\267\335\001\002\000" +
    "\004\243\333\001\002\000\004\267\331\001\002\000\004" +
    "\241\327\001\002\000\004\250\330\001\002\000\u0118\016" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076" +
    "\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5" +
    "\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\113" +
    "\uffe5\114\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5" +
    "\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130" +
    "\uffe5\131\uffe5\132\uffe5\133\uffe5\134\uffe5\135\uffe5\136\uffe5" +
    "\137\uffe5\140\uffe5\141\uffe5\142\uffe5\143\uffe5\144\uffe5\145" +
    "\uffe5\146\uffe5\147\uffe5\150\uffe5\151\uffe5\152\uffe5\153\uffe5" +
    "\154\uffe5\155\uffe5\156\uffe5\157\uffe5\160\uffe5\161\uffe5\162" +
    "\uffe5\163\uffe5\164\uffe5\165\uffe5\166\uffe5\167\uffe5\170\uffe5" +
    "\171\uffe5\173\uffe5\174\uffe5\175\uffe5\176\uffe5\177\uffe5\200" +
    "\uffe5\201\uffe5\202\uffe5\203\uffe5\204\uffe5\205\uffe5\206\uffe5" +
    "\207\uffe5\210\uffe5\211\uffe5\212\uffe5\213\uffe5\214\uffe5\215" +
    "\uffe5\216\uffe5\217\uffe5\220\uffe5\221\uffe5\222\uffe5\223\uffe5" +
    "\224\uffe5\225\uffe5\226\uffe5\227\uffe5\232\uffe5\233\uffe5\235" +
    "\uffe5\237\uffe5\246\uffe5\263\uffe5\266\uffe5\270\uffe5\272\uffe5" +
    "\273\uffe5\274\uffe5\001\002\000\004\250\332\001\002\000" +
    "\u0118\016\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075" +
    "\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4" +
    "\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112" +
    "\uffd4\113\uffd4\114\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4" +
    "\121\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127" +
    "\uffd4\130\uffd4\131\uffd4\132\uffd4\133\uffd4\134\uffd4\135\uffd4" +
    "\136\uffd4\137\uffd4\140\uffd4\141\uffd4\142\uffd4\143\uffd4\144" +
    "\uffd4\145\uffd4\146\uffd4\147\uffd4\150\uffd4\151\uffd4\152\uffd4" +
    "\153\uffd4\154\uffd4\155\uffd4\156\uffd4\157\uffd4\160\uffd4\161" +
    "\uffd4\162\uffd4\163\uffd4\164\uffd4\165\uffd4\166\uffd4\167\uffd4" +
    "\170\uffd4\171\uffd4\173\uffd4\174\uffd4\175\uffd4\176\uffd4\177" +
    "\uffd4\200\uffd4\201\uffd4\202\uffd4\203\uffd4\204\uffd4\205\uffd4" +
    "\206\uffd4\207\uffd4\210\uffd4\211\uffd4\212\uffd4\213\uffd4\214" +
    "\uffd4\215\uffd4\216\uffd4\217\uffd4\220\uffd4\221\uffd4\222\uffd4" +
    "\223\uffd4\224\uffd4\225\uffd4\226\uffd4\227\uffd4\232\uffd4\233" +
    "\uffd4\235\uffd4\237\uffd4\246\uffd4\263\uffd4\266\uffd4\270\uffd4" +
    "\272\uffd4\273\uffd4\274\uffd4\001\002\000\004\250\334\001" +
    "\002\000\u0118\016\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0" +
    "\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111" +
    "\uffe0\112\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0\117\uffe0" +
    "\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126" +
    "\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134\uffe0" +
    "\135\uffe0\136\uffe0\137\uffe0\140\uffe0\141\uffe0\142\uffe0\143" +
    "\uffe0\144\uffe0\145\uffe0\146\uffe0\147\uffe0\150\uffe0\151\uffe0" +
    "\152\uffe0\153\uffe0\154\uffe0\155\uffe0\156\uffe0\157\uffe0\160" +
    "\uffe0\161\uffe0\162\uffe0\163\uffe0\164\uffe0\165\uffe0\166\uffe0" +
    "\167\uffe0\170\uffe0\171\uffe0\173\uffe0\174\uffe0\175\uffe0\176" +
    "\uffe0\177\uffe0\200\uffe0\201\uffe0\202\uffe0\203\uffe0\204\uffe0" +
    "\205\uffe0\206\uffe0\207\uffe0\210\uffe0\211\uffe0\212\uffe0\213" +
    "\uffe0\214\uffe0\215\uffe0\216\uffe0\217\uffe0\220\uffe0\221\uffe0" +
    "\222\uffe0\223\uffe0\224\uffe0\225\uffe0\226\uffe0\227\uffe0\232" +
    "\uffe0\233\uffe0\235\uffe0\237\uffe0\246\uffe0\263\uffe0\266\uffe0" +
    "\270\uffe0\272\uffe0\273\uffe0\274\uffe0\001\002\000\004\250" +
    "\336\001\002\000\u0118\016\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3" +
    "\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110" +
    "\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3\115\uffd3\116\uffd3" +
    "\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3\125" +
    "\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3" +
    "\134\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3\141\uffd3\142" +
    "\uffd3\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147\uffd3\150\uffd3" +
    "\151\uffd3\152\uffd3\153\uffd3\154\uffd3\155\uffd3\156\uffd3\157" +
    "\uffd3\160\uffd3\161\uffd3\162\uffd3\163\uffd3\164\uffd3\165\uffd3" +
    "\166\uffd3\167\uffd3\170\uffd3\171\uffd3\173\uffd3\174\uffd3\175" +
    "\uffd3\176\uffd3\177\uffd3\200\uffd3\201\uffd3\202\uffd3\203\uffd3" +
    "\204\uffd3\205\uffd3\206\uffd3\207\uffd3\210\uffd3\211\uffd3\212" +
    "\uffd3\213\uffd3\214\uffd3\215\uffd3\216\uffd3\217\uffd3\220\uffd3" +
    "\221\uffd3\222\uffd3\223\uffd3\224\uffd3\225\uffd3\226\uffd3\227" +
    "\uffd3\232\uffd3\233\uffd3\235\uffd3\237\uffd3\246\uffd3\263\uffd3" +
    "\266\uffd3\270\uffd3\272\uffd3\273\uffd3\274\uffd3\001\002\000" +
    "\004\250\u0119\001\002\000\004\250\uff9b\001\002\000\014" +
    "\242\uffb5\243\uffb5\244\uffb5\250\uff9c\270\364\001\002\000" +
    "\010\242\350\243\352\244\351\001\002\000\014\242\uffb6" +
    "\243\uffb6\244\uffb6\250\uff9d\267\363\001\002\000\010\240" +
    "\344\267\355\270\356\001\002\000\004\250\uff9a\001\002" +
    "\000\012\242\350\243\352\244\351\250\353\001\002\000" +
    "\004\250\uff99\001\002\000\010\240\uffbb\267\uffbb\270\uffbb" +
    "\001\002\000\010\240\uffb9\267\uffb9\270\uffb9\001\002\000" +
    "\010\240\uffba\267\uffba\270\uffba\001\002\000\u0118\016\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105" +
    "\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0" +
    "\114\uffd0\115\uffd0\116\uffd0\117\uffd0\120\uffd0\121\uffd0\122" +
    "\uffd0\123\uffd0\124\uffd0\125\uffd0\126\uffd0\127\uffd0\130\uffd0" +
    "\131\uffd0\132\uffd0\133\uffd0\134\uffd0\135\uffd0\136\uffd0\137" +
    "\uffd0\140\uffd0\141\uffd0\142\uffd0\143\uffd0\144\uffd0\145\uffd0" +
    "\146\uffd0\147\uffd0\150\uffd0\151\uffd0\152\uffd0\153\uffd0\154" +
    "\uffd0\155\uffd0\156\uffd0\157\uffd0\160\uffd0\161\uffd0\162\uffd0" +
    "\163\uffd0\164\uffd0\165\uffd0\166\uffd0\167\uffd0\170\uffd0\171" +
    "\uffd0\173\uffd0\174\uffd0\175\uffd0\176\uffd0\177\uffd0\200\uffd0" +
    "\201\uffd0\202\uffd0\203\uffd0\204\uffd0\205\uffd0\206\uffd0\207" +
    "\uffd0\210\uffd0\211\uffd0\212\uffd0\213\uffd0\214\uffd0\215\uffd0" +
    "\216\uffd0\217\uffd0\220\uffd0\221\uffd0\222\uffd0\223\uffd0\224" +
    "\uffd0\225\uffd0\226\uffd0\227\uffd0\232\uffd0\233\uffd0\235\uffd0" +
    "\237\uffd0\246\uffd0\263\uffd0\266\uffd0\270\uffd0\272\uffd0\273" +
    "\uffd0\274\uffd0\001\002\000\010\240\344\267\355\270\356" +
    "\001\002\000\022\240\uffb5\241\uffb5\242\uffb5\243\uffb5\244" +
    "\uffb5\247\uffb5\250\uffb5\270\364\001\002\000\022\240\uffb6" +
    "\241\uffb6\242\uffb6\243\uffb6\244\uffb6\247\uffb6\250\uffb6\267" +
    "\363\001\002\000\004\250\362\001\002\000\004\250\361" +
    "\001\002\000\u0118\016\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf" +
    "\111\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\116\uffcf\117" +
    "\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf\125\uffcf" +
    "\126\uffcf\127\uffcf\130\uffcf\131\uffcf\132\uffcf\133\uffcf\134" +
    "\uffcf\135\uffcf\136\uffcf\137\uffcf\140\uffcf\141\uffcf\142\uffcf" +
    "\143\uffcf\144\uffcf\145\uffcf\146\uffcf\147\uffcf\150\uffcf\151" +
    "\uffcf\152\uffcf\153\uffcf\154\uffcf\155\uffcf\156\uffcf\157\uffcf" +
    "\160\uffcf\161\uffcf\162\uffcf\163\uffcf\164\uffcf\165\uffcf\166" +
    "\uffcf\167\uffcf\170\uffcf\171\uffcf\173\uffcf\174\uffcf\175\uffcf" +
    "\176\uffcf\177\uffcf\200\uffcf\201\uffcf\202\uffcf\203\uffcf\204" +
    "\uffcf\205\uffcf\206\uffcf\207\uffcf\210\uffcf\211\uffcf\212\uffcf" +
    "\213\uffcf\214\uffcf\215\uffcf\216\uffcf\217\uffcf\220\uffcf\221" +
    "\uffcf\222\uffcf\223\uffcf\224\uffcf\225\uffcf\226\uffcf\227\uffcf" +
    "\232\uffcf\233\uffcf\235\uffcf\237\uffcf\246\uffcf\263\uffcf\266" +
    "\uffcf\270\uffcf\272\uffcf\273\uffcf\274\uffcf\001\002\000\u0118" +
    "\016\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067" +
    "\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce" +
    "\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104" +
    "\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce" +
    "\113\uffce\114\uffce\115\uffce\116\uffce\117\uffce\120\uffce\121" +
    "\uffce\122\uffce\123\uffce\124\uffce\125\uffce\126\uffce\127\uffce" +
    "\130\uffce\131\uffce\132\uffce\133\uffce\134\uffce\135\uffce\136" +
    "\uffce\137\uffce\140\uffce\141\uffce\142\uffce\143\uffce\144\uffce" +
    "\145\uffce\146\uffce\147\uffce\150\uffce\151\uffce\152\uffce\153" +
    "\uffce\154\uffce\155\uffce\156\uffce\157\uffce\160\uffce\161\uffce" +
    "\162\uffce\163\uffce\164\uffce\165\uffce\166\uffce\167\uffce\170" +
    "\uffce\171\uffce\173\uffce\174\uffce\175\uffce\176\uffce\177\uffce" +
    "\200\uffce\201\uffce\202\uffce\203\uffce\204\uffce\205\uffce\206" +
    "\uffce\207\uffce\210\uffce\211\uffce\212\uffce\213\uffce\214\uffce" +
    "\215\uffce\216\uffce\217\uffce\220\uffce\221\uffce\222\uffce\223" +
    "\uffce\224\uffce\225\uffce\226\uffce\227\uffce\232\uffce\233\uffce" +
    "\235\uffce\237\uffce\246\uffce\263\uffce\266\uffce\270\uffce\272" +
    "\uffce\273\uffce\274\uffce\001\002\000\020\240\uffb4\241\uffb4" +
    "\242\uffb4\243\uffb4\244\uffb4\247\uffb4\250\uffb4\001\002\000" +
    "\020\240\uffb3\241\uffb3\242\uffb3\243\uffb3\244\uffb3\247\uffb3" +
    "\250\uffb3\001\002\000\012\241\u010a\242\350\243\352\244" +
    "\351\001\002\000\010\242\350\243\352\244\351\001\002" +
    "\000\010\240\344\267\355\270\356\001\002\000\014\240" +
    "\344\241\u0108\242\350\243\352\244\351\001\002\000\014" +
    "\240\344\241\374\242\350\243\352\244\351\001\002\000" +
    "\012\240\344\242\350\243\352\244\351\001\002\000\012" +
    "\241\u0101\242\350\243\352\244\351\001\002\000\016\240" +
    "\uffc9\241\uffc9\242\uffc9\243\uffc9\244\uffc9\250\uffc9\001\002" +
    "\000\012\241\uffc4\242\uffc4\243\uffc4\244\uffc4\001\002\000" +
    "\010\240\344\267\355\270\356\001\002\000\016\240\uffb8" +
    "\241\uffb8\242\uffb8\243\uffb8\244\uffb8\250\uffb8\001\002\000" +
    "\012\241\uffc5\242\uffc5\243\uffc5\244\uffc5\001\002\000\016" +
    "\240\uffc6\241\uffc6\242\uffc6\243\uffc6\244\uffc6\250\uffc6\001" +
    "\002\000\004\240\344\001\002\000\012\241\uffc2\242\uffc2" +
    "\243\uffc2\244\uffc2\001\002\000\006\267\355\270\356\001" +
    "\002\000\012\241\uffc3\242\uffc3\243\uffc3\244\uffc3\001\002" +
    "\000\016\240\uffb7\241\uffb7\242\uffb7\243\uffb7\244\uffb7\250" +
    "\uffb7\001\002\000\012\241\u0109\242\350\243\352\244\351" +
    "\001\002\000\016\240\uffc8\241\uffc8\242\uffc8\243\uffc8\244" +
    "\uffc8\250\uffc8\001\002\000\016\240\uffc7\241\uffc7\242\uffc7" +
    "\243\uffc7\244\uffc7\250\uffc7\001\002\000\016\240\uffcd\241" +
    "\uffcd\242\uffcd\243\uffcd\244\uffcd\250\uffcd\001\002\000\006" +
    "\267\355\270\356\001\002\000\012\241\u010d\242\350\243" +
    "\352\244\351\001\002\000\016\240\uffcc\241\uffcc\242\uffcc" +
    "\243\uffcc\244\uffcc\250\uffcc\001\002\000\010\240\344\267" +
    "\355\270\356\001\002\000\012\241\u0110\242\350\243\352" +
    "\244\351\001\002\000\016\240\uffcb\241\uffcb\242\uffcb\243" +
    "\uffcb\244\uffcb\250\uffcb\001\002\000\004\241\u0112\001\002" +
    "\000\016\240\uffca\241\uffca\242\uffca\243\uffca\244\uffca\250" +
    "\uffca\001\002\000\006\267\355\270\356\001\002\000\012" +
    "\242\350\243\352\244\351\250\u0115\001\002\000\u0118\016" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2" +
    "\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113" +
    "\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2\121\uffd2" +
    "\122\uffd2\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2\130" +
    "\uffd2\131\uffd2\132\uffd2\133\uffd2\134\uffd2\135\uffd2\136\uffd2" +
    "\137\uffd2\140\uffd2\141\uffd2\142\uffd2\143\uffd2\144\uffd2\145" +
    "\uffd2\146\uffd2\147\uffd2\150\uffd2\151\uffd2\152\uffd2\153\uffd2" +
    "\154\uffd2\155\uffd2\156\uffd2\157\uffd2\160\uffd2\161\uffd2\162" +
    "\uffd2\163\uffd2\164\uffd2\165\uffd2\166\uffd2\167\uffd2\170\uffd2" +
    "\171\uffd2\173\uffd2\174\uffd2\175\uffd2\176\uffd2\177\uffd2\200" +
    "\uffd2\201\uffd2\202\uffd2\203\uffd2\204\uffd2\205\uffd2\206\uffd2" +
    "\207\uffd2\210\uffd2\211\uffd2\212\uffd2\213\uffd2\214\uffd2\215" +
    "\uffd2\216\uffd2\217\uffd2\220\uffd2\221\uffd2\222\uffd2\223\uffd2" +
    "\224\uffd2\225\uffd2\226\uffd2\227\uffd2\232\uffd2\233\uffd2\235" +
    "\uffd2\237\uffd2\246\uffd2\263\uffd2\266\uffd2\270\uffd2\272\uffd2" +
    "\273\uffd2\274\uffd2\001\002\000\006\267\355\270\356\001" +
    "\002\000\012\242\350\243\352\244\351\250\u0118\001\002" +
    "\000\u0118\016\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1" +
    "\112\uffd1\113\uffd1\114\uffd1\115\uffd1\116\uffd1\117\uffd1\120" +
    "\uffd1\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\126\uffd1" +
    "\127\uffd1\130\uffd1\131\uffd1\132\uffd1\133\uffd1\134\uffd1\135" +
    "\uffd1\136\uffd1\137\uffd1\140\uffd1\141\uffd1\142\uffd1\143\uffd1" +
    "\144\uffd1\145\uffd1\146\uffd1\147\uffd1\150\uffd1\151\uffd1\152" +
    "\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1\157\uffd1\160\uffd1" +
    "\161\uffd1\162\uffd1\163\uffd1\164\uffd1\165\uffd1\166\uffd1\167" +
    "\uffd1\170\uffd1\171\uffd1\173\uffd1\174\uffd1\175\uffd1\176\uffd1" +
    "\177\uffd1\200\uffd1\201\uffd1\202\uffd1\203\uffd1\204\uffd1\205" +
    "\uffd1\206\uffd1\207\uffd1\210\uffd1\211\uffd1\212\uffd1\213\uffd1" +
    "\214\uffd1\215\uffd1\216\uffd1\217\uffd1\220\uffd1\221\uffd1\222" +
    "\uffd1\223\uffd1\224\uffd1\225\uffd1\226\uffd1\227\uffd1\232\uffd1" +
    "\233\uffd1\235\uffd1\237\uffd1\246\uffd1\263\uffd1\266\uffd1\270" +
    "\uffd1\272\uffd1\273\uffd1\274\uffd1\001\002\000\u0118\016\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105" +
    "\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8" +
    "\114\uffe8\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122" +
    "\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\130\uffe8" +
    "\131\uffe8\132\uffe8\133\uffe8\134\uffe8\135\uffe8\136\uffe8\137" +
    "\uffe8\140\uffe8\141\uffe8\142\uffe8\143\uffe8\144\uffe8\145\uffe8" +
    "\146\uffe8\147\uffe8\150\uffe8\151\uffe8\152\uffe8\153\uffe8\154" +
    "\uffe8\155\uffe8\156\uffe8\157\uffe8\160\uffe8\161\uffe8\162\uffe8" +
    "\163\uffe8\164\uffe8\165\uffe8\166\uffe8\167\uffe8\170\uffe8\171" +
    "\uffe8\173\uffe8\174\uffe8\175\uffe8\176\uffe8\177\uffe8\200\uffe8" +
    "\201\uffe8\202\uffe8\203\uffe8\204\uffe8\205\uffe8\206\uffe8\207" +
    "\uffe8\210\uffe8\211\uffe8\212\uffe8\213\uffe8\214\uffe8\215\uffe8" +
    "\216\uffe8\217\uffe8\220\uffe8\221\uffe8\222\uffe8\223\uffe8\224" +
    "\uffe8\225\uffe8\226\uffe8\227\uffe8\232\uffe8\233\uffe8\235\uffe8" +
    "\237\uffe8\246\uffe8\263\uffe8\266\uffe8\270\uffe8\272\uffe8\273" +
    "\uffe8\274\uffe8\001\002\000\004\250\u011b\001\002\000\u0118" +
    "\016\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1" +
    "\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104" +
    "\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1" +
    "\113\uffe1\114\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121" +
    "\uffe1\122\uffe1\123\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1" +
    "\130\uffe1\131\uffe1\132\uffe1\133\uffe1\134\uffe1\135\uffe1\136" +
    "\uffe1\137\uffe1\140\uffe1\141\uffe1\142\uffe1\143\uffe1\144\uffe1" +
    "\145\uffe1\146\uffe1\147\uffe1\150\uffe1\151\uffe1\152\uffe1\153" +
    "\uffe1\154\uffe1\155\uffe1\156\uffe1\157\uffe1\160\uffe1\161\uffe1" +
    "\162\uffe1\163\uffe1\164\uffe1\165\uffe1\166\uffe1\167\uffe1\170" +
    "\uffe1\171\uffe1\173\uffe1\174\uffe1\175\uffe1\176\uffe1\177\uffe1" +
    "\200\uffe1\201\uffe1\202\uffe1\203\uffe1\204\uffe1\205\uffe1\206" +
    "\uffe1\207\uffe1\210\uffe1\211\uffe1\212\uffe1\213\uffe1\214\uffe1" +
    "\215\uffe1\216\uffe1\217\uffe1\220\uffe1\221\uffe1\222\uffe1\223" +
    "\uffe1\224\uffe1\225\uffe1\226\uffe1\227\uffe1\232\uffe1\233\uffe1" +
    "\235\uffe1\237\uffe1\246\uffe1\263\uffe1\266\uffe1\270\uffe1\272" +
    "\uffe1\273\uffe1\274\uffe1\001\002\000\004\247\u011d\001\002" +
    "\000\012\004\u011e\005\u011f\006\u0122\007\u0121\001\002\000" +
    "\012\015\uffa1\241\uffa1\250\uffa1\251\uffa1\001\002\000\012" +
    "\015\uffa0\241\uffa0\250\uffa0\251\uffa0\001\002\000\006\250" +
    "\u0124\251\u0123\001\002\000\012\015\uff9e\241\uff9e\250\uff9e" +
    "\251\uff9e\001\002\000\012\015\uff9f\241\uff9f\250\uff9f\251" +
    "\uff9f\001\002\000\014\010\345\011\340\012\347\267\u0126" +
    "\270\u0125\001\002\000\u0118\016\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea" +
    "\073\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101" +
    "\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea\107\uffea" +
    "\110\uffea\111\uffea\112\uffea\113\uffea\114\uffea\115\uffea\116" +
    "\uffea\117\uffea\120\uffea\121\uffea\122\uffea\123\uffea\124\uffea" +
    "\125\uffea\126\uffea\127\uffea\130\uffea\131\uffea\132\uffea\133" +
    "\uffea\134\uffea\135\uffea\136\uffea\137\uffea\140\uffea\141\uffea" +
    "\142\uffea\143\uffea\144\uffea\145\uffea\146\uffea\147\uffea\150" +
    "\uffea\151\uffea\152\uffea\153\uffea\154\uffea\155\uffea\156\uffea" +
    "\157\uffea\160\uffea\161\uffea\162\uffea\163\uffea\164\uffea\165" +
    "\uffea\166\uffea\167\uffea\170\uffea\171\uffea\173\uffea\174\uffea" +
    "\175\uffea\176\uffea\177\uffea\200\uffea\201\uffea\202\uffea\203" +
    "\uffea\204\uffea\205\uffea\206\uffea\207\uffea\210\uffea\211\uffea" +
    "\212\uffea\213\uffea\214\uffea\215\uffea\216\uffea\217\uffea\220" +
    "\uffea\221\uffea\222\uffea\223\uffea\224\uffea\225\uffea\226\uffea" +
    "\227\uffea\232\uffea\233\uffea\235\uffea\237\uffea\246\uffea\263" +
    "\uffea\266\uffea\270\uffea\272\uffea\273\uffea\274\uffea\001\002" +
    "\000\004\250\uff9d\001\002\000\004\250\uff9c\001\002\000" +
    "\004\250\u0128\001\002\000\u0118\016\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9" +
    "\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107" +
    "\uffe9\110\uffe9\111\uffe9\112\uffe9\113\uffe9\114\uffe9\115\uffe9" +
    "\116\uffe9\117\uffe9\120\uffe9\121\uffe9\122\uffe9\123\uffe9\124" +
    "\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9\131\uffe9\132\uffe9" +
    "\133\uffe9\134\uffe9\135\uffe9\136\uffe9\137\uffe9\140\uffe9\141" +
    "\uffe9\142\uffe9\143\uffe9\144\uffe9\145\uffe9\146\uffe9\147\uffe9" +
    "\150\uffe9\151\uffe9\152\uffe9\153\uffe9\154\uffe9\155\uffe9\156" +
    "\uffe9\157\uffe9\160\uffe9\161\uffe9\162\uffe9\163\uffe9\164\uffe9" +
    "\165\uffe9\166\uffe9\167\uffe9\170\uffe9\171\uffe9\173\uffe9\174" +
    "\uffe9\175\uffe9\176\uffe9\177\uffe9\200\uffe9\201\uffe9\202\uffe9" +
    "\203\uffe9\204\uffe9\205\uffe9\206\uffe9\207\uffe9\210\uffe9\211" +
    "\uffe9\212\uffe9\213\uffe9\214\uffe9\215\uffe9\216\uffe9\217\uffe9" +
    "\220\uffe9\221\uffe9\222\uffe9\223\uffe9\224\uffe9\225\uffe9\226" +
    "\uffe9\227\uffe9\232\uffe9\233\uffe9\235\uffe9\237\uffe9\246\uffe9" +
    "\263\uffe9\266\uffe9\270\uffe9\272\uffe9\273\uffe9\274\uffe9\001" +
    "\002\000\014\232\uffeb\233\uffeb\237\uffeb\246\uffeb\273\uffeb" +
    "\001\002\000\u0118\016\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf" +
    "\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf\102" +
    "\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf\110\uffdf" +
    "\111\uffdf\112\uffdf\113\uffdf\114\uffdf\115\uffdf\116\uffdf\117" +
    "\uffdf\120\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125\uffdf" +
    "\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf\134" +
    "\uffdf\135\uffdf\136\uffdf\137\uffdf\140\uffdf\141\uffdf\142\uffdf" +
    "\143\uffdf\144\uffdf\145\uffdf\146\uffdf\147\uffdf\150\uffdf\151" +
    "\uffdf\152\uffdf\153\uffdf\154\uffdf\155\uffdf\156\uffdf\157\uffdf" +
    "\160\uffdf\161\uffdf\162\uffdf\163\uffdf\164\uffdf\165\uffdf\166" +
    "\uffdf\167\uffdf\170\uffdf\171\uffdf\173\uffdf\174\uffdf\175\uffdf" +
    "\176\uffdf\177\uffdf\200\uffdf\201\uffdf\202\uffdf\203\uffdf\204" +
    "\uffdf\205\uffdf\206\uffdf\207\uffdf\210\uffdf\211\uffdf\212\uffdf" +
    "\213\uffdf\214\uffdf\215\uffdf\216\uffdf\217\uffdf\220\uffdf\221" +
    "\uffdf\222\uffdf\223\uffdf\224\uffdf\225\uffdf\226\uffdf\227\uffdf" +
    "\232\uffdf\233\uffdf\235\uffdf\237\uffdf\246\uffdf\263\uffdf\266" +
    "\uffdf\270\uffdf\272\uffdf\273\uffdf\274\uffdf\001\002\000\130" +
    "\026\250\027\247\030\246\031\245\032\244\110\240\111" +
    "\236\112\305\113\303\114\301\115\277\116\276\117\275" +
    "\120\272\121\267\122\266\123\265\124\264\125\263\126" +
    "\262\127\261\130\260\131\257\132\256\133\255\134\254" +
    "\135\253\136\252\137\251\140\243\141\242\142\241\143" +
    "\237\144\307\145\304\146\302\147\300\150\274\151\273" +
    "\152\271\153\270\267\355\270\356\001\002\000\004\241" +
    "\u0141\001\002\000\004\241\u012e\001\002\000\004\236\u012f" +
    "\001\002\000\006\237\u0131\273\u0132\001\002\000\010\233" +
    "\u0138\237\u0139\273\u013a\001\002\000\004\247\u0136\001\002" +
    "\000\006\267\355\270\356\001\002\000\004\247\u0134\001" +
    "\002\000\u0114\016\141\026\175\027\174\030\171\031\170" +
    "\032\165\033\027\034\026\035\024\036\023\037\022\040" +
    "\162\041\203\044\157\045\156\046\155\047\152\050\151" +
    "\051\147\052\146\053\142\054\120\055\117\056\116\057" +
    "\115\060\114\061\113\062\111\063\110\064\070\065\067" +
    "\066\066\067\065\070\064\071\063\072\062\073\060\074" +
    "\045\075\044\076\043\077\042\100\040\101\037\102\034" +
    "\103\033\104\221\105\217\106\215\107\213\110\200\111" +
    "\177\112\176\113\173\114\172\115\167\116\166\117\164" +
    "\120\143\121\140\122\136\123\135\124\134\125\133\126" +
    "\131\127\127\130\107\131\106\132\105\133\104\134\103" +
    "\135\102\136\101\137\100\140\061\141\057\142\056\143" +
    "\054\144\053\145\052\146\051\147\050\150\032\151\031" +
    "\152\030\153\025\154\225\155\224\156\222\157\220\160" +
    "\216\161\214\162\212\163\211\164\126\165\125\166\124" +
    "\167\123\170\122\171\121\173\227\174\073\175\210\176" +
    "\112\177\230\200\035\201\036\202\041\203\047\204\137" +
    "\205\204\206\201\207\153\210\145\211\226\212\150\213" +
    "\144\214\223\215\071\216\072\217\074\220\075\221\076" +
    "\222\077\223\055\224\205\225\130\226\206\227\207\233" +
    "\uffbd\235\154\237\uffbd\263\163\266\160\270\202\272\046" +
    "\273\uffbd\274\132\001\002\000\010\233\uffc1\237\uffc1\273" +
    "\uffc1\001\002\000\u010e\016\141\026\175\027\174\030\171" +
    "\031\170\032\165\033\027\034\026\035\024\036\023\037" +
    "\022\040\162\041\203\044\157\045\156\046\155\047\152" +
    "\050\151\051\147\052\146\053\142\054\120\055\117\056" +
    "\116\057\115\060\114\061\113\062\111\063\110\064\070" +
    "\065\067\066\066\067\065\070\064\071\063\072\062\073" +
    "\060\074\045\075\044\076\043\077\042\100\040\101\037" +
    "\102\034\103\033\104\221\105\217\106\215\107\213\110" +
    "\200\111\177\112\176\113\173\114\172\115\167\116\166" +
    "\117\164\120\143\121\140\122\136\123\135\124\134\125" +
    "\133\126\131\127\127\130\107\131\106\132\105\133\104" +
    "\134\103\135\102\136\101\137\100\140\061\141\057\142" +
    "\056\143\054\144\053\145\052\146\051\147\050\150\032" +
    "\151\031\152\030\153\025\154\225\155\224\156\222\157" +
    "\220\160\216\161\214\162\212\163\211\164\126\165\125" +
    "\166\124\167\123\170\122\171\121\173\227\174\073\175" +
    "\210\176\112\177\230\200\035\201\036\202\041\203\047" +
    "\204\137\205\204\206\201\207\153\210\145\211\226\212" +
    "\150\213\144\214\223\215\071\216\072\217\074\220\075" +
    "\221\076\222\077\223\055\224\205\225\130\226\206\227" +
    "\207\235\154\263\163\266\160\270\202\272\046\274\132" +
    "\001\002\000\010\233\uffc0\237\uffc0\273\uffc0\001\002\000" +
    "\004\235\u0140\001\002\000\004\247\u013e\001\002\000\006" +
    "\267\355\270\356\001\002\000\004\247\u013c\001\002\000" +
    "\u0114\016\141\026\175\027\174\030\171\031\170\032\165" +
    "\033\027\034\026\035\024\036\023\037\022\040\162\041" +
    "\203\044\157\045\156\046\155\047\152\050\151\051\147" +
    "\052\146\053\142\054\120\055\117\056\116\057\115\060" +
    "\114\061\113\062\111\063\110\064\070\065\067\066\066" +
    "\067\065\070\064\071\063\072\062\073\060\074\045\075" +
    "\044\076\043\077\042\100\040\101\037\102\034\103\033" +
    "\104\221\105\217\106\215\107\213\110\200\111\177\112" +
    "\176\113\173\114\172\115\167\116\166\117\164\120\143" +
    "\121\140\122\136\123\135\124\134\125\133\126\131\127" +
    "\127\130\107\131\106\132\105\133\104\134\103\135\102" +
    "\136\101\137\100\140\061\141\057\142\056\143\054\144" +
    "\053\145\052\146\051\147\050\150\032\151\031\152\030" +
    "\153\025\154\225\155\224\156\222\157\220\160\216\161" +
    "\214\162\212\163\211\164\126\165\125\166\124\167\123" +
    "\170\122\171\121\173\227\174\073\175\210\176\112\177" +
    "\230\200\035\201\036\202\041\203\047\204\137\205\204" +
    "\206\201\207\153\210\145\211\226\212\150\213\144\214" +
    "\223\215\071\216\072\217\074\220\075\221\076\222\077" +
    "\223\055\224\205\225\130\226\206\227\207\233\uffbc\235" +
    "\154\237\uffbc\263\163\266\160\270\202\272\046\273\uffbc" +
    "\274\132\001\002\000\010\233\uffbf\237\uffbf\273\uffbf\001" +
    "\002\000\u010e\016\141\026\175\027\174\030\171\031\170" +
    "\032\165\033\027\034\026\035\024\036\023\037\022\040" +
    "\162\041\203\044\157\045\156\046\155\047\152\050\151" +
    "\051\147\052\146\053\142\054\120\055\117\056\116\057" +
    "\115\060\114\061\113\062\111\063\110\064\070\065\067" +
    "\066\066\067\065\070\064\071\063\072\062\073\060\074" +
    "\045\075\044\076\043\077\042\100\040\101\037\102\034" +
    "\103\033\104\221\105\217\106\215\107\213\110\200\111" +
    "\177\112\176\113\173\114\172\115\167\116\166\117\164" +
    "\120\143\121\140\122\136\123\135\124\134\125\133\126" +
    "\131\127\127\130\107\131\106\132\105\133\104\134\103" +
    "\135\102\136\101\137\100\140\061\141\057\142\056\143" +
    "\054\144\053\145\052\146\051\147\050\150\032\151\031" +
    "\152\030\153\025\154\225\155\224\156\222\157\220\160" +
    "\216\161\214\162\212\163\211\164\126\165\125\166\124" +
    "\167\123\170\122\171\121\173\227\174\073\175\210\176" +
    "\112\177\230\200\035\201\036\202\041\203\047\204\137" +
    "\205\204\206\201\207\153\210\145\211\226\212\150\213" +
    "\144\214\223\215\071\216\072\217\074\220\075\221\076" +
    "\222\077\223\055\224\205\225\130\226\206\227\207\235" +
    "\154\263\163\266\160\270\202\272\046\274\132\001\002" +
    "\000\010\233\uffbe\237\uffbe\273\uffbe\001\002\000\u0118\016" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7" +
    "\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7\113" +
    "\uffd7\114\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7\121\uffd7" +
    "\122\uffd7\123\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130" +
    "\uffd7\131\uffd7\132\uffd7\133\uffd7\134\uffd7\135\uffd7\136\uffd7" +
    "\137\uffd7\140\uffd7\141\uffd7\142\uffd7\143\uffd7\144\uffd7\145" +
    "\uffd7\146\uffd7\147\uffd7\150\uffd7\151\uffd7\152\uffd7\153\uffd7" +
    "\154\uffd7\155\uffd7\156\uffd7\157\uffd7\160\uffd7\161\uffd7\162" +
    "\uffd7\163\uffd7\164\uffd7\165\uffd7\166\uffd7\167\uffd7\170\uffd7" +
    "\171\uffd7\173\uffd7\174\uffd7\175\uffd7\176\uffd7\177\uffd7\200" +
    "\uffd7\201\uffd7\202\uffd7\203\uffd7\204\uffd7\205\uffd7\206\uffd7" +
    "\207\uffd7\210\uffd7\211\uffd7\212\uffd7\213\uffd7\214\uffd7\215" +
    "\uffd7\216\uffd7\217\uffd7\220\uffd7\221\uffd7\222\uffd7\223\uffd7" +
    "\224\uffd7\225\uffd7\226\uffd7\227\uffd7\232\uffd7\233\uffd7\235" +
    "\uffd7\237\uffd7\246\uffd7\263\uffd7\266\uffd7\270\uffd7\272\uffd7" +
    "\273\uffd7\274\uffd7\001\002\000\004\236\u0142\001\002\000" +
    "\006\237\u0131\273\u0132\001\002\000\010\233\u0144\237\u0139" +
    "\273\u013a\001\002\000\004\235\u0145\001\002\000\u0118\016" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8" +
    "\105\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8\112\uffd8\113" +
    "\uffd8\114\uffd8\115\uffd8\116\uffd8\117\uffd8\120\uffd8\121\uffd8" +
    "\122\uffd8\123\uffd8\124\uffd8\125\uffd8\126\uffd8\127\uffd8\130" +
    "\uffd8\131\uffd8\132\uffd8\133\uffd8\134\uffd8\135\uffd8\136\uffd8" +
    "\137\uffd8\140\uffd8\141\uffd8\142\uffd8\143\uffd8\144\uffd8\145" +
    "\uffd8\146\uffd8\147\uffd8\150\uffd8\151\uffd8\152\uffd8\153\uffd8" +
    "\154\uffd8\155\uffd8\156\uffd8\157\uffd8\160\uffd8\161\uffd8\162" +
    "\uffd8\163\uffd8\164\uffd8\165\uffd8\166\uffd8\167\uffd8\170\uffd8" +
    "\171\uffd8\173\uffd8\174\uffd8\175\uffd8\176\uffd8\177\uffd8\200" +
    "\uffd8\201\uffd8\202\uffd8\203\uffd8\204\uffd8\205\uffd8\206\uffd8" +
    "\207\uffd8\210\uffd8\211\uffd8\212\uffd8\213\uffd8\214\uffd8\215" +
    "\uffd8\216\uffd8\217\uffd8\220\uffd8\221\uffd8\222\uffd8\223\uffd8" +
    "\224\uffd8\225\uffd8\226\uffd8\227\uffd8\232\uffd8\233\uffd8\235" +
    "\uffd8\237\uffd8\246\uffd8\263\uffd8\266\uffd8\270\uffd8\272\uffd8" +
    "\273\uffd8\274\uffd8\001\002\000\004\267\u0147\001\002\000" +
    "\004\241\u0148\001\002\000\004\250\u0149\001\002\000\u0118" +
    "\016\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4" +
    "\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104" +
    "\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4" +
    "\113\uffe4\114\uffe4\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121" +
    "\uffe4\122\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4" +
    "\130\uffe4\131\uffe4\132\uffe4\133\uffe4\134\uffe4\135\uffe4\136" +
    "\uffe4\137\uffe4\140\uffe4\141\uffe4\142\uffe4\143\uffe4\144\uffe4" +
    "\145\uffe4\146\uffe4\147\uffe4\150\uffe4\151\uffe4\152\uffe4\153" +
    "\uffe4\154\uffe4\155\uffe4\156\uffe4\157\uffe4\160\uffe4\161\uffe4" +
    "\162\uffe4\163\uffe4\164\uffe4\165\uffe4\166\uffe4\167\uffe4\170" +
    "\uffe4\171\uffe4\173\uffe4\174\uffe4\175\uffe4\176\uffe4\177\uffe4" +
    "\200\uffe4\201\uffe4\202\uffe4\203\uffe4\204\uffe4\205\uffe4\206" +
    "\uffe4\207\uffe4\210\uffe4\211\uffe4\212\uffe4\213\uffe4\214\uffe4" +
    "\215\uffe4\216\uffe4\217\uffe4\220\uffe4\221\uffe4\222\uffe4\223" +
    "\uffe4\224\uffe4\225\uffe4\226\uffe4\227\uffe4\232\uffe4\233\uffe4" +
    "\235\uffe4\237\uffe4\246\uffe4\263\uffe4\266\uffe4\270\uffe4\272" +
    "\uffe4\273\uffe4\274\uffe4\001\002\000\134\026\250\027\247" +
    "\030\246\031\245\032\244\042\u014c\043\u014e\110\240\111" +
    "\236\112\305\113\303\114\301\115\277\116\276\117\275" +
    "\120\272\121\267\122\266\123\265\124\264\125\263\126" +
    "\262\127\261\130\260\131\257\132\256\133\255\134\254" +
    "\135\253\136\252\137\251\140\243\141\242\142\241\143" +
    "\237\144\307\145\304\146\302\147\300\150\274\151\273" +
    "\152\271\153\270\267\u014b\270\u014f\001\002\000\026\241" +
    "\uffb5\252\uffb1\254\uffb1\255\uffb1\256\uffb1\257\uffb1\260\uffb1" +
    "\261\uffb1\262\uffb1\270\364\001\002\000\004\275\u016e\001" +
    "\002\000\004\241\u0169\001\002\000\004\276\u0168\001\002" +
    "\000\026\241\uffb6\252\uffb2\254\uffb2\255\uffb2\256\uffb2\257" +
    "\uffb2\260\uffb2\261\uffb2\262\uffb2\267\363\001\002\000\004" +
    "\241\u0163\001\002\000\022\252\u0157\254\u0158\255\u0155\256" +
    "\u0156\257\u0154\260\u0153\261\u015b\262\u015a\001\002\000\024" +
    "\241\uffb0\252\uffb0\254\uffb0\255\uffb0\256\uffb0\257\uffb0\260" +
    "\uffb0\261\uffb0\262\uffb0\001\002\000\134\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\042\uffa2\043\uffa2\110\uffa2\111" +
    "\uffa2\112\uffa2\113\uffa2\114\uffa2\115\uffa2\116\uffa2\117\uffa2" +
    "\120\uffa2\121\uffa2\122\uffa2\123\uffa2\124\uffa2\125\uffa2\126" +
    "\uffa2\127\uffa2\130\uffa2\131\uffa2\132\uffa2\133\uffa2\134\uffa2" +
    "\135\uffa2\136\uffa2\137\uffa2\140\uffa2\141\uffa2\142\uffa2\143" +
    "\uffa2\144\uffa2\145\uffa2\146\uffa2\147\uffa2\150\uffa2\151\uffa2" +
    "\152\uffa2\153\uffa2\267\uffa2\270\uffa2\001\002\000\134\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\042\uffa7\043\uffa7" +
    "\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7\116" +
    "\uffa7\117\uffa7\120\uffa7\121\uffa7\122\uffa7\123\uffa7\124\uffa7" +
    "\125\uffa7\126\uffa7\127\uffa7\130\uffa7\131\uffa7\132\uffa7\133" +
    "\uffa7\134\uffa7\135\uffa7\136\uffa7\137\uffa7\140\uffa7\141\uffa7" +
    "\142\uffa7\143\uffa7\144\uffa7\145\uffa7\146\uffa7\147\uffa7\150" +
    "\uffa7\151\uffa7\152\uffa7\153\uffa7\267\uffa7\270\uffa7\001\002" +
    "\000\134\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\042" +
    "\uffa8\043\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8" +
    "\115\uffa8\116\uffa8\117\uffa8\120\uffa8\121\uffa8\122\uffa8\123" +
    "\uffa8\124\uffa8\125\uffa8\126\uffa8\127\uffa8\130\uffa8\131\uffa8" +
    "\132\uffa8\133\uffa8\134\uffa8\135\uffa8\136\uffa8\137\uffa8\140" +
    "\uffa8\141\uffa8\142\uffa8\143\uffa8\144\uffa8\145\uffa8\146\uffa8" +
    "\147\uffa8\150\uffa8\151\uffa8\152\uffa8\153\uffa8\267\uffa8\270" +
    "\uffa8\001\002\000\134\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\042\uffa6\043\uffa6\110\uffa6\111\uffa6\112\uffa6\113" +
    "\uffa6\114\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6\121\uffa6" +
    "\122\uffa6\123\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6\130" +
    "\uffa6\131\uffa6\132\uffa6\133\uffa6\134\uffa6\135\uffa6\136\uffa6" +
    "\137\uffa6\140\uffa6\141\uffa6\142\uffa6\143\uffa6\144\uffa6\145" +
    "\uffa6\146\uffa6\147\uffa6\150\uffa6\151\uffa6\152\uffa6\153\uffa6" +
    "\267\uffa6\270\uffa6\001\002\000\134\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\042\uffa5\043\uffa5\110\uffa5\111\uffa5" +
    "\112\uffa5\113\uffa5\114\uffa5\115\uffa5\116\uffa5\117\uffa5\120" +
    "\uffa5\121\uffa5\122\uffa5\123\uffa5\124\uffa5\125\uffa5\126\uffa5" +
    "\127\uffa5\130\uffa5\131\uffa5\132\uffa5\133\uffa5\134\uffa5\135" +
    "\uffa5\136\uffa5\137\uffa5\140\uffa5\141\uffa5\142\uffa5\143\uffa5" +
    "\144\uffa5\145\uffa5\146\uffa5\147\uffa5\150\uffa5\151\uffa5\152" +
    "\uffa5\153\uffa5\267\uffa5\270\uffa5\001\002\000\134\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\042\uffa9\043\uffa9\110" +
    "\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\115\uffa9\116\uffa9" +
    "\117\uffa9\120\uffa9\121\uffa9\122\uffa9\123\uffa9\124\uffa9\125" +
    "\uffa9\126\uffa9\127\uffa9\130\uffa9\131\uffa9\132\uffa9\133\uffa9" +
    "\134\uffa9\135\uffa9\136\uffa9\137\uffa9\140\uffa9\141\uffa9\142" +
    "\uffa9\143\uffa9\144\uffa9\145\uffa9\146\uffa9\147\uffa9\150\uffa9" +
    "\151\uffa9\152\uffa9\153\uffa9\267\uffa9\270\uffa9\001\002\000" +
    "\134\026\250\027\247\030\246\031\245\032\244\042\u014c" +
    "\043\u014e\110\240\111\236\112\305\113\303\114\301\115" +
    "\277\116\276\117\275\120\272\121\267\122\266\123\265" +
    "\124\264\125\263\126\262\127\261\130\260\131\257\132" +
    "\256\133\255\134\254\135\253\136\252\137\251\140\243" +
    "\141\242\142\241\143\237\144\307\145\304\146\302\147" +
    "\300\150\274\151\273\152\271\153\270\267\u015c\270\u015d" +
    "\001\002\000\134\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\042\uffa4\043\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4" +
    "\114\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\122" +
    "\uffa4\123\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4\130\uffa4" +
    "\131\uffa4\132\uffa4\133\uffa4\134\uffa4\135\uffa4\136\uffa4\137" +
    "\uffa4\140\uffa4\141\uffa4\142\uffa4\143\uffa4\144\uffa4\145\uffa4" +
    "\146\uffa4\147\uffa4\150\uffa4\151\uffa4\152\uffa4\153\uffa4\267" +
    "\uffa4\270\uffa4\001\002\000\134\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\042\uffa3\043\uffa3\110\uffa3\111\uffa3\112" +
    "\uffa3\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\120\uffa3" +
    "\121\uffa3\122\uffa3\123\uffa3\124\uffa3\125\uffa3\126\uffa3\127" +
    "\uffa3\130\uffa3\131\uffa3\132\uffa3\133\uffa3\134\uffa3\135\uffa3" +
    "\136\uffa3\137\uffa3\140\uffa3\141\uffa3\142\uffa3\143\uffa3\144" +
    "\uffa3\145\uffa3\146\uffa3\147\uffa3\150\uffa3\151\uffa3\152\uffa3" +
    "\153\uffa3\267\uffa3\270\uffa3\001\002\000\024\241\uffb1\252" +
    "\uffb1\254\uffb1\255\uffb1\256\uffb1\257\uffb1\260\uffb1\261\uffb1" +
    "\262\uffb1\001\002\000\024\241\uffb2\252\uffb2\254\uffb2\255" +
    "\uffb2\256\uffb2\257\uffb2\260\uffb2\261\uffb2\262\uffb2\001\002" +
    "\000\024\241\uffad\252\u0157\254\u0158\255\u0155\256\u0156\257" +
    "\u0154\260\u0153\261\u015b\262\u015a\001\002\000\004\241\uffac" +
    "\001\002\000\134\026\250\027\247\030\246\031\245\032" +
    "\244\042\u014c\043\u014e\110\240\111\236\112\305\113\303" +
    "\114\301\115\277\116\276\117\275\120\272\121\267\122" +
    "\266\123\265\124\264\125\263\126\262\127\261\130\260" +
    "\131\257\132\256\133\255\134\254\135\253\136\252\137" +
    "\251\140\243\141\242\142\241\143\237\144\307\145\304" +
    "\146\302\147\300\150\274\151\273\152\271\153\270\267" +
    "\u015c\270\u015d\001\002\000\024\241\uffab\252\u0157\254\u0158" +
    "\255\u0155\256\u0156\257\u0154\260\u0153\261\u015b\262\u015a\001" +
    "\002\000\004\241\uffaa\001\002\000\004\234\u0164\001\002" +
    "\000\u010e\016\141\026\175\027\174\030\171\031\170\032" +
    "\165\033\027\034\026\035\024\036\023\037\022\040\162" +
    "\041\203\044\157\045\156\046\155\047\152\050\151\051" +
    "\147\052\146\053\142\054\120\055\117\056\116\057\115" +
    "\060\114\061\113\062\111\063\110\064\070\065\067\066" +
    "\066\067\065\070\064\071\063\072\062\073\060\074\045" +
    "\075\044\076\043\077\042\100\040\101\037\102\034\103" +
    "\033\104\221\105\217\106\215\107\213\110\200\111\177" +
    "\112\176\113\173\114\172\115\167\116\166\117\164\120" +
    "\143\121\140\122\136\123\135\124\134\125\133\126\131" +
    "\127\127\130\107\131\106\132\105\133\104\134\103\135" +
    "\102\136\101\137\100\140\061\141\057\142\056\143\054" +
    "\144\053\145\052\146\051\147\050\150\032\151\031\152" +
    "\030\153\025\154\225\155\224\156\222\157\220\160\216" +
    "\161\214\162\212\163\211\164\126\165\125\166\124\167" +
    "\123\170\122\171\121\173\227\174\073\175\210\176\112" +
    "\177\230\200\035\201\036\202\041\203\047\204\137\205" +
    "\204\206\201\207\153\210\145\211\226\212\150\213\144" +
    "\214\223\215\071\216\072\217\074\220\075\221\076\222" +
    "\077\223\055\224\205\225\130\226\206\227\207\235\154" +
    "\263\163\266\160\270\202\272\046\274\132\001\002\000" +
    "\004\233\u0166\001\002\000\004\274\u0167\001\002\000\u0118" +
    "\016\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5" +
    "\113\uffd5\114\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121" +
    "\uffd5\122\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5" +
    "\130\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\135\uffd5\136" +
    "\uffd5\137\uffd5\140\uffd5\141\uffd5\142\uffd5\143\uffd5\144\uffd5" +
    "\145\uffd5\146\uffd5\147\uffd5\150\uffd5\151\uffd5\152\uffd5\153" +
    "\uffd5\154\uffd5\155\uffd5\156\uffd5\157\uffd5\160\uffd5\161\uffd5" +
    "\162\uffd5\163\uffd5\164\uffd5\165\uffd5\166\uffd5\167\uffd5\170" +
    "\uffd5\171\uffd5\173\uffd5\174\uffd5\175\uffd5\176\uffd5\177\uffd5" +
    "\200\uffd5\201\uffd5\202\uffd5\203\uffd5\204\uffd5\205\uffd5\206" +
    "\uffd5\207\uffd5\210\uffd5\211\uffd5\212\uffd5\213\uffd5\214\uffd5" +
    "\215\uffd5\216\uffd5\217\uffd5\220\uffd5\221\uffd5\222\uffd5\223" +
    "\uffd5\224\uffd5\225\uffd5\226\uffd5\227\uffd5\232\uffd5\233\uffd5" +
    "\235\uffd5\237\uffd5\246\uffd5\263\uffd5\266\uffd5\270\uffd5\272" +
    "\uffd5\273\uffd5\274\uffd5\001\002\000\024\241\uffae\252\uffae" +
    "\254\uffae\255\uffae\256\uffae\257\uffae\260\uffae\261\uffae\262" +
    "\uffae\001\002\000\004\234\u016a\001\002\000\u010e\016\141" +
    "\026\175\027\174\030\171\031\170\032\165\033\027\034" +
    "\026\035\024\036\023\037\022\040\162\041\203\044\157" +
    "\045\156\046\155\047\152\050\151\051\147\052\146\053" +
    "\142\054\120\055\117\056\116\057\115\060\114\061\113" +
    "\062\111\063\110\064\070\065\067\066\066\067\065\070" +
    "\064\071\063\072\062\073\060\074\045\075\044\076\043" +
    "\077\042\100\040\101\037\102\034\103\033\104\221\105" +
    "\217\106\215\107\213\110\200\111\177\112\176\113\173" +
    "\114\172\115\167\116\166\117\164\120\143\121\140\122" +
    "\136\123\135\124\134\125\133\126\131\127\127\130\107" +
    "\131\106\132\105\133\104\134\103\135\102\136\101\137" +
    "\100\140\061\141\057\142\056\143\054\144\053\145\052" +
    "\146\051\147\050\150\032\151\031\152\030\153\025\154" +
    "\225\155\224\156\222\157\220\160\216\161\214\162\212" +
    "\163\211\164\126\165\125\166\124\167\123\170\122\171" +
    "\121\173\227\174\073\175\210\176\112\177\230\200\035" +
    "\201\036\202\041\203\047\204\137\205\204\206\201\207" +
    "\153\210\145\211\226\212\150\213\144\214\223\215\071" +
    "\216\072\217\074\220\075\221\076\222\077\223\055\224" +
    "\205\225\130\226\206\227\207\235\154\263\163\266\160" +
    "\270\202\272\046\274\132\001\002\000\004\233\u016c\001" +
    "\002\000\004\274\u016d\001\002\000\u0118\016\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106" +
    "\uffd6\107\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6" +
    "\115\uffd6\116\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123" +
    "\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6" +
    "\132\uffd6\133\uffd6\134\uffd6\135\uffd6\136\uffd6\137\uffd6\140" +
    "\uffd6\141\uffd6\142\uffd6\143\uffd6\144\uffd6\145\uffd6\146\uffd6" +
    "\147\uffd6\150\uffd6\151\uffd6\152\uffd6\153\uffd6\154\uffd6\155" +
    "\uffd6\156\uffd6\157\uffd6\160\uffd6\161\uffd6\162\uffd6\163\uffd6" +
    "\164\uffd6\165\uffd6\166\uffd6\167\uffd6\170\uffd6\171\uffd6\173" +
    "\uffd6\174\uffd6\175\uffd6\176\uffd6\177\uffd6\200\uffd6\201\uffd6" +
    "\202\uffd6\203\uffd6\204\uffd6\205\uffd6\206\uffd6\207\uffd6\210" +
    "\uffd6\211\uffd6\212\uffd6\213\uffd6\214\uffd6\215\uffd6\216\uffd6" +
    "\217\uffd6\220\uffd6\221\uffd6\222\uffd6\223\uffd6\224\uffd6\225" +
    "\uffd6\226\uffd6\227\uffd6\232\uffd6\233\uffd6\235\uffd6\237\uffd6" +
    "\246\uffd6\263\uffd6\266\uffd6\270\uffd6\272\uffd6\273\uffd6\274" +
    "\uffd6\001\002\000\024\241\uffaf\252\uffaf\254\uffaf\255\uffaf" +
    "\256\uffaf\257\uffaf\260\uffaf\261\uffaf\262\uffaf\001\002\000" +
    "\134\026\250\027\247\030\246\031\245\032\244\042\u014c" +
    "\043\u014e\110\240\111\236\112\305\113\303\114\301\115" +
    "\277\116\276\117\275\120\272\121\267\122\266\123\265" +
    "\124\264\125\263\126\262\127\261\130\260\131\257\132" +
    "\256\133\255\134\254\135\253\136\252\137\251\140\243" +
    "\141\242\142\241\143\237\144\307\145\304\146\302\147" +
    "\300\150\274\151\273\152\271\153\270\267\u015c\270\u015d" +
    "\001\002\000\004\241\u017a\001\002\000\024\241\u0172\252" +
    "\uffb0\254\uffb0\255\uffb0\256\uffb0\257\uffb0\260\uffb0\261\uffb0" +
    "\262\uffb0\001\002\000\004\231\u0173\001\002\000\u010e\016" +
    "\141\026\175\027\174\030\171\031\170\032\165\033\027" +
    "\034\026\035\024\036\023\037\022\040\162\041\203\044" +
    "\157\045\156\046\155\047\152\050\151\051\147\052\146" +
    "\053\142\054\120\055\117\056\116\057\115\060\114\061" +
    "\113\062\111\063\110\064\070\065\067\066\066\067\065" +
    "\070\064\071\063\072\062\073\060\074\045\075\044\076" +
    "\043\077\042\100\040\101\037\102\034\103\033\104\221" +
    "\105\217\106\215\107\213\110\200\111\177\112\176\113" +
    "\173\114\172\115\167\116\166\117\164\120\143\121\140" +
    "\122\136\123\135\124\134\125\133\126\131\127\127\130" +
    "\107\131\106\132\105\133\104\134\103\135\102\136\101" +
    "\137\100\140\061\141\057\142\056\143\054\144\053\145" +
    "\052\146\051\147\050\150\032\151\031\152\030\153\025" +
    "\154\225\155\224\156\222\157\220\160\216\161\214\162" +
    "\212\163\211\164\126\165\125\166\124\167\123\170\122" +
    "\171\121\173\227\174\073\175\210\176\112\177\230\200" +
    "\035\201\036\202\041\203\047\204\137\205\204\206\201" +
    "\207\153\210\145\211\226\212\150\213\144\214\223\215" +
    "\071\216\072\217\074\220\075\221\076\222\077\223\055" +
    "\224\205\225\130\226\206\227\207\235\154\263\163\266" +
    "\160\270\202\272\046\274\132\001\002\000\006\232\uffda" +
    "\233\u0176\001\002\000\004\232\u0177\001\002\000\u0118\016" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076" +
    "\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd" +
    "\105\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113" +
    "\uffdd\114\uffdd\115\uffdd\116\uffdd\117\uffdd\120\uffdd\121\uffdd" +
    "\122\uffdd\123\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130" +
    "\uffdd\131\uffdd\132\uffdd\133\uffdd\134\uffdd\135\uffdd\136\uffdd" +
    "\137\uffdd\140\uffdd\141\uffdd\142\uffdd\143\uffdd\144\uffdd\145" +
    "\uffdd\146\uffdd\147\uffdd\150\uffdd\151\uffdd\152\uffdd\153\uffdd" +
    "\154\uffdd\155\uffdd\156\uffdd\157\uffdd\160\uffdd\161\uffdd\162" +
    "\uffdd\163\uffdd\164\uffdd\165\uffdd\166\uffdd\167\uffdd\170\uffdd" +
    "\171\uffdd\173\uffdd\174\uffdd\175\uffdd\176\uffdd\177\uffdd\200" +
    "\uffdd\201\uffdd\202\uffdd\203\uffdd\204\uffdd\205\uffdd\206\uffdd" +
    "\207\uffdd\210\uffdd\211\uffdd\212\uffdd\213\uffdd\214\uffdd\215" +
    "\uffdd\216\uffdd\217\uffdd\220\uffdd\221\uffdd\222\uffdd\223\uffdd" +
    "\224\uffdd\225\uffdd\226\uffdd\227\uffdd\232\uffdd\233\uffdd\235" +
    "\uffdd\237\uffdd\246\uffdd\263\uffdd\266\uffdd\270\uffdd\272\uffdd" +
    "\273\uffdd\274\uffdd\001\002\000\u010e\016\141\026\175\027" +
    "\174\030\171\031\170\032\165\033\027\034\026\035\024" +
    "\036\023\037\022\040\162\041\203\044\157\045\156\046" +
    "\155\047\152\050\151\051\147\052\146\053\142\054\120" +
    "\055\117\056\116\057\115\060\114\061\113\062\111\063" +
    "\110\064\070\065\067\066\066\067\065\070\064\071\063" +
    "\072\062\073\060\074\045\075\044\076\043\077\042\100" +
    "\040\101\037\102\034\103\033\104\221\105\217\106\215" +
    "\107\213\110\200\111\177\112\176\113\173\114\172\115" +
    "\167\116\166\117\164\120\143\121\140\122\136\123\135" +
    "\124\134\125\133\126\131\127\127\130\107\131\106\132" +
    "\105\133\104\134\103\135\102\136\101\137\100\140\061" +
    "\141\057\142\056\143\054\144\053\145\052\146\051\147" +
    "\050\150\032\151\031\152\030\153\025\154\225\155\224" +
    "\156\222\157\220\160\216\161\214\162\212\163\211\164" +
    "\126\165\125\166\124\167\123\170\122\171\121\173\227" +
    "\174\073\175\210\176\112\177\230\200\035\201\036\202" +
    "\041\203\047\204\137\205\204\206\201\207\153\210\145" +
    "\211\226\212\150\213\144\214\223\215\071\216\072\217" +
    "\074\220\075\221\076\222\077\223\055\224\205\225\130" +
    "\226\206\227\207\235\154\263\163\266\160\270\202\272" +
    "\046\274\132\001\002\000\004\233\u0179\001\002\000\u0118" +
    "\016\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9" +
    "\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9\104" +
    "\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\112\uffd9" +
    "\113\uffd9\114\uffd9\115\uffd9\116\uffd9\117\uffd9\120\uffd9\121" +
    "\uffd9\122\uffd9\123\uffd9\124\uffd9\125\uffd9\126\uffd9\127\uffd9" +
    "\130\uffd9\131\uffd9\132\uffd9\133\uffd9\134\uffd9\135\uffd9\136" +
    "\uffd9\137\uffd9\140\uffd9\141\uffd9\142\uffd9\143\uffd9\144\uffd9" +
    "\145\uffd9\146\uffd9\147\uffd9\150\uffd9\151\uffd9\152\uffd9\153" +
    "\uffd9\154\uffd9\155\uffd9\156\uffd9\157\uffd9\160\uffd9\161\uffd9" +
    "\162\uffd9\163\uffd9\164\uffd9\165\uffd9\166\uffd9\167\uffd9\170" +
    "\uffd9\171\uffd9\173\uffd9\174\uffd9\175\uffd9\176\uffd9\177\uffd9" +
    "\200\uffd9\201\uffd9\202\uffd9\203\uffd9\204\uffd9\205\uffd9\206" +
    "\uffd9\207\uffd9\210\uffd9\211\uffd9\212\uffd9\213\uffd9\214\uffd9" +
    "\215\uffd9\216\uffd9\217\uffd9\220\uffd9\221\uffd9\222\uffd9\223" +
    "\uffd9\224\uffd9\225\uffd9\226\uffd9\227\uffd9\232\uffd9\233\uffd9" +
    "\235\uffd9\237\uffd9\246\uffd9\263\uffd9\266\uffd9\270\uffd9\272" +
    "\uffd9\273\uffd9\274\uffd9\001\002\000\004\231\u017b\001\002" +
    "\000\u010e\016\141\026\175\027\174\030\171\031\170\032" +
    "\165\033\027\034\026\035\024\036\023\037\022\040\162" +
    "\041\203\044\157\045\156\046\155\047\152\050\151\051" +
    "\147\052\146\053\142\054\120\055\117\056\116\057\115" +
    "\060\114\061\113\062\111\063\110\064\070\065\067\066" +
    "\066\067\065\070\064\071\063\072\062\073\060\074\045" +
    "\075\044\076\043\077\042\100\040\101\037\102\034\103" +
    "\033\104\221\105\217\106\215\107\213\110\200\111\177" +
    "\112\176\113\173\114\172\115\167\116\166\117\164\120" +
    "\143\121\140\122\136\123\135\124\134\125\133\126\131" +
    "\127\127\130\107\131\106\132\105\133\104\134\103\135" +
    "\102\136\101\137\100\140\061\141\057\142\056\143\054" +
    "\144\053\145\052\146\051\147\050\150\032\151\031\152" +
    "\030\153\025\154\225\155\224\156\222\157\220\160\216" +
    "\161\214\162\212\163\211\164\126\165\125\166\124\167" +
    "\123\170\122\171\121\173\227\174\073\175\210\176\112" +
    "\177\230\200\035\201\036\202\041\203\047\204\137\205" +
    "\204\206\201\207\153\210\145\211\226\212\150\213\144" +
    "\214\223\215\071\216\072\217\074\220\075\221\076\222" +
    "\077\223\055\224\205\225\130\226\206\227\207\235\154" +
    "\263\163\266\160\270\202\272\046\274\132\001\002\000" +
    "\006\232\uffdc\233\u017e\001\002\000\004\232\u017f\001\002" +
    "\000\u0118\016\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde" +
    "\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103" +
    "\uffde\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde" +
    "\112\uffde\113\uffde\114\uffde\115\uffde\116\uffde\117\uffde\120" +
    "\uffde\121\uffde\122\uffde\123\uffde\124\uffde\125\uffde\126\uffde" +
    "\127\uffde\130\uffde\131\uffde\132\uffde\133\uffde\134\uffde\135" +
    "\uffde\136\uffde\137\uffde\140\uffde\141\uffde\142\uffde\143\uffde" +
    "\144\uffde\145\uffde\146\uffde\147\uffde\150\uffde\151\uffde\152" +
    "\uffde\153\uffde\154\uffde\155\uffde\156\uffde\157\uffde\160\uffde" +
    "\161\uffde\162\uffde\163\uffde\164\uffde\165\uffde\166\uffde\167" +
    "\uffde\170\uffde\171\uffde\173\uffde\174\uffde\175\uffde\176\uffde" +
    "\177\uffde\200\uffde\201\uffde\202\uffde\203\uffde\204\uffde\205" +
    "\uffde\206\uffde\207\uffde\210\uffde\211\uffde\212\uffde\213\uffde" +
    "\214\uffde\215\uffde\216\uffde\217\uffde\220\uffde\221\uffde\222" +
    "\uffde\223\uffde\224\uffde\225\uffde\226\uffde\227\uffde\232\uffde" +
    "\233\uffde\235\uffde\237\uffde\246\uffde\263\uffde\266\uffde\270" +
    "\uffde\272\uffde\273\uffde\274\uffde\001\002\000\u010e\016\141" +
    "\026\175\027\174\030\171\031\170\032\165\033\027\034" +
    "\026\035\024\036\023\037\022\040\162\041\203\044\157" +
    "\045\156\046\155\047\152\050\151\051\147\052\146\053" +
    "\142\054\120\055\117\056\116\057\115\060\114\061\113" +
    "\062\111\063\110\064\070\065\067\066\066\067\065\070" +
    "\064\071\063\072\062\073\060\074\045\075\044\076\043" +
    "\077\042\100\040\101\037\102\034\103\033\104\221\105" +
    "\217\106\215\107\213\110\200\111\177\112\176\113\173" +
    "\114\172\115\167\116\166\117\164\120\143\121\140\122" +
    "\136\123\135\124\134\125\133\126\131\127\127\130\107" +
    "\131\106\132\105\133\104\134\103\135\102\136\101\137" +
    "\100\140\061\141\057\142\056\143\054\144\053\145\052" +
    "\146\051\147\050\150\032\151\031\152\030\153\025\154" +
    "\225\155\224\156\222\157\220\160\216\161\214\162\212" +
    "\163\211\164\126\165\125\166\124\167\123\170\122\171" +
    "\121\173\227\174\073\175\210\176\112\177\230\200\035" +
    "\201\036\202\041\203\047\204\137\205\204\206\201\207" +
    "\153\210\145\211\226\212\150\213\144\214\223\215\071" +
    "\216\072\217\074\220\075\221\076\222\077\223\055\224" +
    "\205\225\130\226\206\227\207\235\154\263\163\266\160" +
    "\270\202\272\046\274\132\001\002\000\004\233\u0181\001" +
    "\002\000\u0118\016\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb" +
    "\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb\111" +
    "\uffdb\112\uffdb\113\uffdb\114\uffdb\115\uffdb\116\uffdb\117\uffdb" +
    "\120\uffdb\121\uffdb\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126" +
    "\uffdb\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133\uffdb\134\uffdb" +
    "\135\uffdb\136\uffdb\137\uffdb\140\uffdb\141\uffdb\142\uffdb\143" +
    "\uffdb\144\uffdb\145\uffdb\146\uffdb\147\uffdb\150\uffdb\151\uffdb" +
    "\152\uffdb\153\uffdb\154\uffdb\155\uffdb\156\uffdb\157\uffdb\160" +
    "\uffdb\161\uffdb\162\uffdb\163\uffdb\164\uffdb\165\uffdb\166\uffdb" +
    "\167\uffdb\170\uffdb\171\uffdb\173\uffdb\174\uffdb\175\uffdb\176" +
    "\uffdb\177\uffdb\200\uffdb\201\uffdb\202\uffdb\203\uffdb\204\uffdb" +
    "\205\uffdb\206\uffdb\207\uffdb\210\uffdb\211\uffdb\212\uffdb\213" +
    "\uffdb\214\uffdb\215\uffdb\216\uffdb\217\uffdb\220\uffdb\221\uffdb" +
    "\222\uffdb\223\uffdb\224\uffdb\225\uffdb\226\uffdb\227\uffdb\232" +
    "\uffdb\233\uffdb\235\uffdb\237\uffdb\246\uffdb\263\uffdb\266\uffdb" +
    "\270\uffdb\272\uffdb\273\uffdb\274\uffdb\001\002\000\u010e\016" +
    "\141\026\175\027\174\030\171\031\170\032\165\033\027" +
    "\034\026\035\024\036\023\037\022\040\162\041\203\044" +
    "\157\045\156\046\155\047\152\050\151\051\147\052\146" +
    "\053\142\054\120\055\117\056\116\057\115\060\114\061" +
    "\113\062\111\063\110\064\070\065\067\066\066\067\065" +
    "\070\064\071\063\072\062\073\060\074\045\075\044\076" +
    "\043\077\042\100\040\101\037\102\034\103\033\104\221" +
    "\105\217\106\215\107\213\110\200\111\177\112\176\113" +
    "\173\114\172\115\167\116\166\117\164\120\143\121\140" +
    "\122\136\123\135\124\134\125\133\126\131\127\127\130" +
    "\107\131\106\132\105\133\104\134\103\135\102\136\101" +
    "\137\100\140\061\141\057\142\056\143\054\144\053\145" +
    "\052\146\051\147\050\150\032\151\031\152\030\153\025" +
    "\154\225\155\224\156\222\157\220\160\216\161\214\162" +
    "\212\163\211\164\126\165\125\166\124\167\123\170\122" +
    "\171\121\173\227\174\073\175\210\176\112\177\230\200" +
    "\035\201\036\202\041\203\047\204\137\205\204\206\201" +
    "\207\153\210\145\211\226\212\150\213\144\214\223\215" +
    "\071\216\072\217\074\220\075\221\076\222\077\223\055" +
    "\224\205\225\130\226\206\227\207\235\154\263\163\266" +
    "\160\270\202\272\046\274\132\001\002\000\004\246\u0184" +
    "\001\002\000\006\020\ufff2\230\ufff2\001\002\000\012\004" +
    "\u011e\005\u011f\006\u0122\007\u0121\001\002\000\006\015\u0187" +
    "\241\uffee\001\002\000\004\270\015\001\002\000\004\241" +
    "\uffed\001\002\000\006\024\u0196\025\u0197\001\002\000\004" +
    "\270\u018b\001\002\000\004\240\u018c\001\002\000\006\241" +
    "\u018d\270\015\001\002\000\004\245\u0193\001\002\000\004" +
    "\241\u018f\001\002\000\004\245\u0190\001\002\000\u010e\016" +
    "\141\026\175\027\174\030\171\031\170\032\165\033\027" +
    "\034\026\035\024\036\023\037\022\040\162\041\203\044" +
    "\157\045\156\046\155\047\152\050\151\051\147\052\146" +
    "\053\142\054\120\055\117\056\116\057\115\060\114\061" +
    "\113\062\111\063\110\064\070\065\067\066\066\067\065" +
    "\070\064\071\063\072\062\073\060\074\045\075\044\076" +
    "\043\077\042\100\040\101\037\102\034\103\033\104\221" +
    "\105\217\106\215\107\213\110\200\111\177\112\176\113" +
    "\173\114\172\115\167\116\166\117\164\120\143\121\140" +
    "\122\136\123\135\124\134\125\133\126\131\127\127\130" +
    "\107\131\106\132\105\133\104\134\103\135\102\136\101" +
    "\137\100\140\061\141\057\142\056\143\054\144\053\145" +
    "\052\146\051\147\050\150\032\151\031\152\030\153\025" +
    "\154\225\155\224\156\222\157\220\160\216\161\214\162" +
    "\212\163\211\164\126\165\125\166\124\167\123\170\122" +
    "\171\121\173\227\174\073\175\210\176\112\177\230\200" +
    "\035\201\036\202\041\203\047\204\137\205\204\206\201" +
    "\207\153\210\145\211\226\212\150\213\144\214\223\215" +
    "\071\216\072\217\074\220\075\221\076\222\077\223\055" +
    "\224\205\225\130\226\206\227\207\235\154\263\163\266" +
    "\160\270\202\272\046\274\132\001\002\000\004\246\u0192" +
    "\001\002\000\006\020\uffef\230\uffef\001\002\000\u010e\016" +
    "\141\026\175\027\174\030\171\031\170\032\165\033\027" +
    "\034\026\035\024\036\023\037\022\040\162\041\203\044" +
    "\157\045\156\046\155\047\152\050\151\051\147\052\146" +
    "\053\142\054\120\055\117\056\116\057\115\060\114\061" +
    "\113\062\111\063\110\064\070\065\067\066\066\067\065" +
    "\070\064\071\063\072\062\073\060\074\045\075\044\076" +
    "\043\077\042\100\040\101\037\102\034\103\033\104\221" +
    "\105\217\106\215\107\213\110\200\111\177\112\176\113" +
    "\173\114\172\115\167\116\166\117\164\120\143\121\140" +
    "\122\136\123\135\124\134\125\133\126\131\127\127\130" +
    "\107\131\106\132\105\133\104\134\103\135\102\136\101" +
    "\137\100\140\061\141\057\142\056\143\054\144\053\145" +
    "\052\146\051\147\050\150\032\151\031\152\030\153\025" +
    "\154\225\155\224\156\222\157\220\160\216\161\214\162" +
    "\212\163\211\164\126\165\125\166\124\167\123\170\122" +
    "\171\121\173\227\174\073\175\210\176\112\177\230\200" +
    "\035\201\036\202\041\203\047\204\137\205\204\206\201" +
    "\207\153\210\145\211\226\212\150\213\144\214\223\215" +
    "\071\216\072\217\074\220\075\221\076\222\077\223\055" +
    "\224\205\225\130\226\206\227\207\235\154\263\163\266" +
    "\160\270\202\272\046\274\132\001\002\000\004\246\u0195" +
    "\001\002\000\006\020\ufff1\230\ufff1\001\002\000\004\240" +
    "\u019c\001\002\000\004\245\u0199\001\002\000\004\017\ufffd" +
    "\001\002\000\u010e\016\141\026\175\027\174\030\171\031" +
    "\170\032\165\033\027\034\026\035\024\036\023\037\022" +
    "\040\162\041\203\044\157\045\156\046\155\047\152\050" +
    "\151\051\147\052\146\053\142\054\120\055\117\056\116" +
    "\057\115\060\114\061\113\062\111\063\110\064\070\065" +
    "\067\066\066\067\065\070\064\071\063\072\062\073\060" +
    "\074\045\075\044\076\043\077\042\100\040\101\037\102" +
    "\034\103\033\104\221\105\217\106\215\107\213\110\200" +
    "\111\177\112\176\113\173\114\172\115\167\116\166\117" +
    "\164\120\143\121\140\122\136\123\135\124\134\125\133" +
    "\126\131\127\127\130\107\131\106\132\105\133\104\134" +
    "\103\135\102\136\101\137\100\140\061\141\057\142\056" +
    "\143\054\144\053\145\052\146\051\147\050\150\032\151" +
    "\031\152\030\153\025\154\225\155\224\156\222\157\220" +
    "\160\216\161\214\162\212\163\211\164\126\165\125\166" +
    "\124\167\123\170\122\171\121\173\227\174\073\175\210" +
    "\176\112\177\230\200\035\201\036\202\041\203\047\204" +
    "\137\205\204\206\201\207\153\210\145\211\226\212\150" +
    "\213\144\214\223\215\071\216\072\217\074\220\075\221" +
    "\076\222\077\223\055\224\205\225\130\226\206\227\207" +
    "\235\154\263\163\266\160\270\202\272\046\274\132\001" +
    "\002\000\004\246\u019b\001\002\000\004\017\ufff5\001\002" +
    "\000\004\241\u019d\001\002\000\004\250\u019e\001\002\000" +
    "\004\025\u0197\001\002\000\004\017\ufffc\001\002\000\004" +
    "\002\001\001\002\000\004\245\u01a2\001\002\000\u0110\016" +
    "\141\026\175\027\174\030\171\031\170\032\165\033\027" +
    "\034\026\035\024\036\023\037\022\040\162\041\203\044" +
    "\157\045\156\046\155\047\152\050\151\051\147\052\146" +
    "\053\142\054\120\055\117\056\116\057\115\060\114\061" +
    "\113\062\111\063\110\064\070\065\067\066\066\067\065" +
    "\070\064\071\063\072\062\073\060\074\045\075\044\076" +
    "\043\077\042\100\040\101\037\102\034\103\033\104\221" +
    "\105\217\106\215\107\213\110\200\111\177\112\176\113" +
    "\173\114\172\115\167\116\166\117\164\120\143\121\140" +
    "\122\136\123\135\124\134\125\133\126\131\127\127\130" +
    "\107\131\106\132\105\133\104\134\103\135\102\136\101" +
    "\137\100\140\061\141\057\142\056\143\054\144\053\145" +
    "\052\146\051\147\050\150\032\151\031\152\030\153\025" +
    "\154\225\155\224\156\222\157\220\160\216\161\214\162" +
    "\212\163\211\164\126\165\125\166\124\167\123\170\122" +
    "\171\121\173\227\174\073\175\210\176\112\177\230\200" +
    "\035\201\036\202\041\203\047\204\137\205\204\206\201" +
    "\207\153\210\145\211\226\212\150\213\144\214\223\215" +
    "\071\216\072\217\074\220\075\221\076\222\077\223\055" +
    "\224\205\225\130\226\206\227\207\235\154\246\u01a3\263" +
    "\163\266\160\270\202\272\046\274\132\001\002\000\004" +
    "\002\ufff3\001\002\000\004\246\u01a5\001\002\000\004\002" +
    "\ufff4\001\002\000\004\240\u01a8\001\002\000\004\017\uffff" +
    "\001\002\000\004\241\u01a9\001\002\000\004\250\u01aa\001" +
    "\002\000\004\025\u0197\001\002\000\004\017\ufffe\001\002" +
    "\000\u0100\026\175\027\174\030\171\031\170\032\165\033" +
    "\027\034\026\035\024\036\023\037\022\040\162\041\203" +
    "\044\157\045\156\046\155\047\152\050\151\051\147\052" +
    "\146\053\142\054\120\055\117\056\116\057\115\060\114" +
    "\061\113\062\111\063\110\064\070\065\067\066\066\067" +
    "\065\070\064\071\063\072\062\073\060\074\045\075\044" +
    "\076\043\077\042\100\040\101\037\102\034\103\033\104" +
    "\221\105\217\106\215\107\213\110\200\111\177\112\176" +
    "\113\173\114\172\115\167\116\166\117\164\120\143\121" +
    "\140\122\136\123\135\124\134\125\133\126\131\127\127" +
    "\130\107\131\106\132\105\133\104\134\103\135\102\136" +
    "\101\137\100\140\061\141\057\142\056\143\054\144\053" +
    "\145\052\146\051\147\050\150\032\151\031\152\030\153" +
    "\025\154\225\155\224\156\222\157\220\160\216\161\214" +
    "\162\212\163\211\164\126\165\125\166\124\167\123\170" +
    "\122\171\121\173\227\174\073\175\210\176\112\177\230" +
    "\200\035\201\036\202\041\203\047\204\137\205\204\206" +
    "\201\207\153\210\145\211\226\212\150\213\144\214\223" +
    "\215\071\216\072\217\074\220\075\221\076\222\077\223" +
    "\055\224\205\225\130\226\206\227\207\001\002\000\u0110" +
    "\016\141\026\175\027\174\030\171\031\170\032\165\033" +
    "\027\034\026\035\024\036\023\037\022\040\162\041\203" +
    "\044\157\045\156\046\155\047\152\050\151\051\147\052" +
    "\146\053\142\054\120\055\117\056\116\057\115\060\114" +
    "\061\113\062\111\063\110\064\070\065\067\066\066\067" +
    "\065\070\064\071\063\072\062\073\060\074\045\075\044" +
    "\076\043\077\042\100\040\101\037\102\034\103\033\104" +
    "\221\105\217\106\215\107\213\110\200\111\177\112\176" +
    "\113\173\114\172\115\167\116\166\117\164\120\143\121" +
    "\140\122\136\123\135\124\134\125\133\126\131\127\127" +
    "\130\107\131\106\132\105\133\104\134\103\135\102\136" +
    "\101\137\100\140\061\141\057\142\056\143\054\144\053" +
    "\145\052\146\051\147\050\150\032\151\031\152\030\153" +
    "\025\154\225\155\224\156\222\157\220\160\216\161\214" +
    "\162\212\163\211\164\126\165\125\166\124\167\123\170" +
    "\122\171\121\173\227\174\073\175\210\176\112\177\230" +
    "\200\035\201\036\202\041\203\047\204\137\205\204\206" +
    "\201\207\153\210\145\211\226\212\150\213\144\214\223" +
    "\215\071\216\072\217\074\220\075\221\076\222\077\223" +
    "\055\224\205\225\130\226\206\227\207\235\154\246\u01b4" +
    "\263\163\266\160\270\202\272\046\274\132\001\002\000" +
    "\004\251\u01af\001\002\000\006\022\u01b2\023\u01b0\001\002" +
    "\000\004\250\ufff6\001\002\000\004\250\u01b3\001\002\000" +
    "\004\250\ufff7\001\002\000\u0110\016\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\044\ufff9\045\ufff9\046\ufff9" +
=======
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\000\u019a\000\004\023\005\001\002\000\004\002\u019c\001" +
    "\002\000\006\022\006\232\012\001\002\000\004\246\u018d" +
    "\001\002\000\006\026\u0187\027\u0178\001\002\000\004\021" +
    "\u0182\001\002\000\006\022\006\232\u016b\001\002\000\004" +
    "\271\013\001\002\000\004\242\014\001\002\000\006\243" +
    "\016\271\015\001\002\000\004\250\u0166\001\002\000\004" +
    "\246\u0163\001\002\000\004\243\020\001\002\000\004\246" +
    "\021\001\002\000\u0112\016\142\017\163\020\066\030\200" +
    "\031\175\032\174\033\171\034\170\035\027\036\025\037" +
    "\024\040\023\041\022\042\164\043\205\046\160\047\157" +
    "\050\156\051\155\052\151\053\150\054\146\055\145\056" +
    "\121\057\120\060\117\061\116\062\115\063\114\064\113" +
    "\065\110\066\071\067\070\070\067\071\065\072\064\073" +
    "\063\074\062\075\061\076\045\077\044\100\043\101\042" +
    "\102\041\103\036\104\035\105\032\106\223\107\221\110" +
    "\217\111\214\112\202\113\201\114\177\115\176\116\173" +
    "\117\172\120\167\121\166\122\144\123\141\124\140\125" +
    "\136\126\135\127\133\130\132\131\130\132\111\133\107" +
    "\134\106\135\105\136\104\137\103\140\102\141\101\142" +
    "\060\143\057\144\056\145\054\146\053\147\052\150\051" +
    "\151\050\152\033\153\031\154\030\155\026\156\230\157" +
    "\225\160\224\161\222\162\220\163\216\164\215\165\212" +
    "\166\127\167\126\170\125\171\124\172\123\173\122\175" +
    "\231\176\074\177\213\200\112\201\232\202\034\203\037" +
    "\204\040\205\047\206\137\207\206\210\203\211\153\212" +
    "\147\213\227\214\152\215\143\216\226\217\072\220\073" +
    "\221\075\222\076\223\077\224\100\225\055\226\207\227" +
    "\131\230\210\231\211\237\154\264\165\267\161\271\204" +
    "\273\046\275\134\001\002\000\006\252\uffa0\254\uffa0\001" +
    "\002\000\006\252\uffa1\254\uffa1\001\002\000\006\252\uffa2" +
    "\254\uffa2\001\002\000\006\252\uffa3\254\uffa3\001\002\000" +
    "\006\252\uff55\254\uff55\001\002\000\006\252\uffa4\254\uffa4" +
    "\001\002\000\006\252\uff56\254\uff56\001\002\000\006\252" +
    "\uff57\254\uff57\001\002\000\006\252\uff7d\254\uff7d\001\002" +
    "\000\006\252\uff58\254\uff58\001\002\000\006\252\uff39\254" +
    "\uff39\001\002\000\006\252\uff7e\254\uff7e\001\002\000\006" +
    "\252\uff7f\254\uff7f\001\002\000\006\252\uff38\254\uff38\001" +
    "\002\000\006\252\uff37\254\uff37\001\002\000\006\252\uff80" +
    "\254\uff80\001\002\000\006\252\uff81\254\uff81\001\002\000" +
    "\006\252\uff82\254\uff82\001\002\000\006\252\uff83\254\uff83" +
    "\001\002\000\006\252\uff84\254\uff84\001\002\000\004\242" +
    "\u0150\001\002\000\006\252\uff36\254\uff36\001\002\000\006" +
    "\252\uff59\254\uff59\001\002\000\006\252\uff5a\254\uff5a\001" +
    "\002\000\006\252\uff5b\254\uff5b\001\002\000\006\252\uff5c" +
    "\254\uff5c\001\002\000\006\252\uff5d\254\uff5d\001\002\000" +
    "\006\252\uff2f\254\uff2f\001\002\000\006\252\uff5e\254\uff5e" +
    "\001\002\000\006\252\uff5f\254\uff5f\001\002\000\006\252" +
    "\uff60\254\uff60\001\002\000\006\252\uff85\254\uff85\001\002" +
    "\000\006\252\uff86\254\uff86\001\002\000\006\252\uff87\254" +
    "\uff87\001\002\000\006\252\uff88\254\uff88\001\002\000\006" +
    "\252\uff89\254\uff89\001\002\000\004\252\u014d\001\002\000" +
    "\006\252\uff8a\254\uff8a\001\002\000\006\252\uff8b\254\uff8b" +
    "\001\002\000\006\252\uff8c\254\uff8c\001\002\000\006\252" +
    "\uff35\254\uff35\001\002\000\006\252\uff34\254\uff34\001\002" +
    "\000\006\252\uff3d\254\uff3d\001\002\000\006\252\uff33\254" +
    "\uff33\001\002\000\006\252\uff32\254\uff32\001\002\000\006" +
    "\252\uff31\254\uff31\001\002\000\006\252\uff30\254\uff30\001" +
    "\002\000\006\252\uff61\254\uff61\001\002\000\006\252\uff62" +
    "\254\uff62\001\002\000\006\252\uff63\254\uff63\001\002\000" +
    "\006\252\uff64\254\uff64\001\002\000\006\252\uff65\254\uff65" +
    "\001\002\000\006\252\uff66\254\uff66\001\002\000\006\252" +
    "\uff67\254\uff67\001\002\000\006\252\uff8d\254\uff8d\001\002" +
    "\000\006\252\uff68\254\uff68\001\002\000\006\252\uff3b\254" +
    "\uff3b\001\002\000\006\252\uff8e\254\uff8e\001\002\000\006" +
    "\252\uff8f\254\uff8f\001\002\000\006\252\uff90\254\uff90\001" +
    "\002\000\006\252\uff91\254\uff91\001\002\000\006\252\uff92" +
    "\254\uff92\001\002\000\006\252\uff93\254\uff93\001\002\000" +
    "\006\252\uff94\254\uff94\001\002\000\006\252\uff47\254\uff47" +
    "\001\002\000\006\252\uff48\254\uff48\001\002\000\006\252" +
    "\uff49\254\uff49\001\002\000\006\252\uff4a\254\uff4a\001\002" +
    "\000\006\252\uff4b\254\uff4b\001\002\000\006\252\uff4c\254" +
    "\uff4c\001\002\000\006\252\uff69\254\uff69\001\002\000\006" +
    "\252\uff2d\254\uff2d\001\002\000\006\252\uff6a\254\uff6a\001" +
    "\002\000\006\252\uff6b\254\uff6b\001\002\000\004\242\u0128" +
    "\001\002\000\006\252\uff6c\254\uff6c\001\002\000\006\252" +
    "\uff6d\254\uff6d\001\002\000\006\252\uff9d\254\uff9d\001\002" +
    "\000\006\252\uff6e\254\uff6e\001\002\000\006\252\uff6f\254" +
    "\uff6f\001\002\000\004\242\u0124\001\002\000\006\252\uff40" +
    "\254\uff40\001\002\000\006\252\uff70\254\uff70\001\002\000" +
    "\006\252\uff95\254\uff95\001\002\000\006\252\uff96\254\uff96" +
    "\001\002\000\006\252\uff43\254\uff43\001\002\000\006\252" +
    "\uff97\254\uff97\001\002\000\006\252\uff98\254\uff98\001\002" +
    "\000\006\252\uff41\254\uff41\001\002\000\006\252\uff44\254" +
    "\uff44\001\002\000\004\242\u0109\001\002\000\006\252\uff99" +
    "\254\uff99\001\002\000\006\252\uff9a\254\uff9a\001\002\000" +
    "\006\252\uff9b\254\uff9b\001\002\000\006\252\uff9c\254\uff9c" +
    "\001\002\000\004\251\u0108\001\002\000\u011c\016\142\017" +
    "\163\020\066\030\200\031\175\032\174\033\171\034\170" +
    "\035\027\036\025\037\024\040\023\041\022\042\164\043" +
    "\205\046\160\047\157\050\156\051\155\052\151\053\150" +
    "\054\146\055\145\056\121\057\120\060\117\061\116\062" +
    "\115\063\114\064\113\065\110\066\071\067\070\070\067" +
    "\071\065\072\064\073\063\074\062\075\061\076\045\077" +
    "\044\100\043\101\042\102\041\103\036\104\035\105\032" +
    "\106\223\107\221\110\217\111\214\112\202\113\201\114" +
    "\177\115\176\116\173\117\172\120\167\121\166\122\144" +
    "\123\141\124\140\125\136\126\135\127\133\130\132\131" +
    "\130\132\111\133\107\134\106\135\105\136\104\137\103" +
    "\140\102\141\101\142\060\143\057\144\056\145\054\146" +
    "\053\147\052\150\051\151\050\152\033\153\031\154\030" +
    "\155\026\156\230\157\225\160\224\161\222\162\220\163" +
    "\216\164\215\165\212\166\127\167\126\170\125\171\124" +
    "\172\123\173\122\175\231\176\074\177\213\200\112\201" +
    "\232\202\034\203\037\204\040\205\047\206\137\207\206" +
    "\210\203\211\153\212\147\213\227\214\152\215\143\216" +
    "\226\217\072\220\073\221\075\222\076\223\077\224\100" +
    "\225\055\226\207\227\131\230\210\231\211\234\uffec\235" +
    "\uffec\237\154\241\uffec\247\uffec\264\165\267\161\271\204" +
    "\273\046\274\uffec\275\134\001\002\000\004\246\u0103\001" +
    "\002\000\006\252\uff9f\254\uff9f\001\002\000\004\271\366" +
    "\001\002\000\006\252\uff71\254\uff71\001\002\000\006\252" +
    "\uff72\254\uff72\001\002\000\006\252\uffa5\254\uffa5\001\002" +
    "\000\006\252\uffa6\254\uffa6\001\002\000\006\252\uff73\254" +
    "\uff73\001\002\000\006\252\uff74\254\uff74\001\002\000\006" +
    "\252\uffa7\254\uffa7\001\002\000\006\252\uffa8\254\uffa8\001" +
    "\002\000\006\252\uff75\254\uff75\001\002\000\006\252\uff76" +
    "\254\uff76\001\002\000\006\252\uffa9\254\uffa9\001\002\000" +
    "\006\252\uff77\254\uff77\001\002\000\006\252\uff78\254\uff78" +
    "\001\002\000\006\252\uff45\254\uff45\001\002\000\012\242" +
    "\324\252\321\265\322\266\323\001\002\000\006\252\uff9e" +
    "\254\uff9e\001\002\000\006\252\uff46\254\uff46\001\002\000" +
    "\006\252\uff2e\254\uff2e\001\002\000\006\252\uff2c\254\uff2c" +
    "\001\002\000\006\252\uff2b\254\uff2b\001\002\000\006\252" +
    "\uff4d\254\uff4d\001\002\000\006\252\uff3c\254\uff3c\001\002" +
    "\000\006\252\uff79\254\uff79\001\002\000\006\252\uff4e\254" +
    "\uff4e\001\002\000\006\252\uff4f\254\uff4f\001\002\000\006" +
    "\252\uff7a\254\uff7a\001\002\000\006\252\uff50\254\uff50\001" +
    "\002\000\006\252\uff7b\254\uff7b\001\002\000\006\252\uff51" +
    "\254\uff51\001\002\000\006\252\uff7c\254\uff7c\001\002\000" +
    "\006\252\uff52\254\uff52\001\002\000\006\252\uff53\254\uff53" +
    "\001\002\000\006\252\uff3f\254\uff3f\001\002\000\006\252" +
    "\uff42\254\uff42\001\002\000\006\252\uff54\254\uff54\001\002" +
    "\000\006\252\uff3e\254\uff3e\001\002\000\006\252\uff3a\254" +
    "\uff3a\001\002\000\006\252\236\254\237\001\002\000\004" +
    "\247\235\001\002\000\006\022\ufff0\232\ufff0\001\002\000" +
    "\126\030\252\031\251\032\250\033\247\034\246\112\242" +
    "\113\240\114\310\115\305\116\303\117\301\120\300\121" +
    "\277\122\273\123\271\124\270\125\267\126\266\127\265" +
    "\130\264\131\263\132\262\133\261\134\260\135\257\136" +
    "\256\137\255\140\254\141\253\142\245\143\244\144\243" +
    "\145\241\146\311\147\306\150\304\151\302\152\276\153" +
    "\275\154\274\155\272\270\313\001\002\000\124\030\252" +
    "\031\251\032\250\033\247\034\246\112\242\113\240\114" +
    "\310\115\305\116\303\117\301\120\300\121\277\122\273" +
    "\123\271\124\270\125\267\126\266\127\265\130\264\131" +
    "\263\132\262\133\261\134\260\135\257\136\256\137\255" +
    "\140\254\141\253\142\245\143\244\144\243\145\241\146" +
    "\311\147\306\150\304\151\302\152\276\153\275\154\274" +
    "\155\272\001\002\000\030\243\uff24\244\uff24\251\uff24\253" +
    "\uff24\255\uff24\256\uff24\257\uff24\260\uff24\261\uff24\262\uff24" +
    "\263\uff24\001\002\000\030\243\uff0a\244\uff0a\251\uff0a\253" +
    "\uff0a\255\uff0a\256\uff0a\257\uff0a\260\uff0a\261\uff0a\262\uff0a" +
    "\263\uff0a\001\002\000\030\243\uff25\244\uff25\251\uff25\253" +
    "\uff25\255\uff25\256\uff25\257\uff25\260\uff25\261\uff25\262\uff25" +
    "\263\uff25\001\002\000\030\243\uff0b\244\uff0b\251\uff0b\253" +
    "\uff0b\255\uff0b\256\uff0b\257\uff0b\260\uff0b\261\uff0b\262\uff0b" +
    "\263\uff0b\001\002\000\030\243\uff0c\244\uff0c\251\uff0c\253" +
    "\uff0c\255\uff0c\256\uff0c\257\uff0c\260\uff0c\261\uff0c\262\uff0c" +
    "\263\uff0c\001\002\000\030\243\uff0d\244\uff0d\251\uff0d\253" +
    "\uff0d\255\uff0d\256\uff0d\257\uff0d\260\uff0d\261\uff0d\262\uff0d" +
    "\263\uff0d\001\002\000\030\243\uff26\244\uff26\251\uff26\253" +
    "\uff26\255\uff26\256\uff26\257\uff26\260\uff26\261\uff26\262\uff26" +
    "\263\uff26\001\002\000\030\243\uff27\244\uff27\251\uff27\253" +
    "\uff27\255\uff27\256\uff27\257\uff27\260\uff27\261\uff27\262\uff27" +
    "\263\uff27\001\002\000\030\243\uff28\244\uff28\251\uff28\253" +
    "\uff28\255\uff28\256\uff28\257\uff28\260\uff28\261\uff28\262\uff28" +
    "\263\uff28\001\002\000\030\243\uff29\244\uff29\251\uff29\253" +
    "\uff29\255\uff29\256\uff29\257\uff29\260\uff29\261\uff29\262\uff29" +
    "\263\uff29\001\002\000\030\243\uff2a\244\uff2a\251\uff2a\253" +
    "\uff2a\255\uff2a\256\uff2a\257\uff2a\260\uff2a\261\uff2a\262\uff2a" +
    "\263\uff2a\001\002\000\030\243\uff0e\244\uff0e\251\uff0e\253" +
    "\uff0e\255\uff0e\256\uff0e\257\uff0e\260\uff0e\261\uff0e\262\uff0e" +
    "\263\uff0e\001\002\000\030\243\uff0f\244\uff0f\251\uff0f\253" +
    "\uff0f\255\uff0f\256\uff0f\257\uff0f\260\uff0f\261\uff0f\262\uff0f" +
    "\263\uff0f\001\002\000\030\243\uff10\244\uff10\251\uff10\253" +
    "\uff10\255\uff10\256\uff10\257\uff10\260\uff10\261\uff10\262\uff10" +
    "\263\uff10\001\002\000\030\243\uff11\244\uff11\251\uff11\253" +
    "\uff11\255\uff11\256\uff11\257\uff11\260\uff11\261\uff11\262\uff11" +
    "\263\uff11\001\002\000\030\243\uff12\244\uff12\251\uff12\253" +
    "\uff12\255\uff12\256\uff12\257\uff12\260\uff12\261\uff12\262\uff12" +
    "\263\uff12\001\002\000\030\243\uff13\244\uff13\251\uff13\253" +
    "\uff13\255\uff13\256\uff13\257\uff13\260\uff13\261\uff13\262\uff13" +
    "\263\uff13\001\002\000\030\243\uff14\244\uff14\251\uff14\253" +
    "\uff14\255\uff14\256\uff14\257\uff14\260\uff14\261\uff14\262\uff14" +
    "\263\uff14\001\002\000\030\243\uff15\244\uff15\251\uff15\253" +
    "\uff15\255\uff15\256\uff15\257\uff15\260\uff15\261\uff15\262\uff15" +
    "\263\uff15\001\002\000\030\243\uff16\244\uff16\251\uff16\253" +
    "\uff16\255\uff16\256\uff16\257\uff16\260\uff16\261\uff16\262\uff16" +
    "\263\uff16\001\002\000\030\243\uff17\244\uff17\251\uff17\253" +
    "\uff17\255\uff17\256\uff17\257\uff17\260\uff17\261\uff17\262\uff17" +
    "\263\uff17\001\002\000\030\243\uff18\244\uff18\251\uff18\253" +
    "\uff18\255\uff18\256\uff18\257\uff18\260\uff18\261\uff18\262\uff18" +
    "\263\uff18\001\002\000\030\243\uff19\244\uff19\251\uff19\253" +
    "\uff19\255\uff19\256\uff19\257\uff19\260\uff19\261\uff19\262\uff19" +
    "\263\uff19\001\002\000\030\243\uff1a\244\uff1a\251\uff1a\253" +
    "\uff1a\255\uff1a\256\uff1a\257\uff1a\260\uff1a\261\uff1a\262\uff1a" +
    "\263\uff1a\001\002\000\030\243\uff1b\244\uff1b\251\uff1b\253" +
    "\uff1b\255\uff1b\256\uff1b\257\uff1b\260\uff1b\261\uff1b\262\uff1b" +
    "\263\uff1b\001\002\000\030\243\uff1c\244\uff1c\251\uff1c\253" +
    "\uff1c\255\uff1c\256\uff1c\257\uff1c\260\uff1c\261\uff1c\262\uff1c" +
    "\263\uff1c\001\002\000\030\243\uff02\244\uff02\251\uff02\253" +
    "\uff02\255\uff02\256\uff02\257\uff02\260\uff02\261\uff02\262\uff02" +
    "\263\uff02\001\002\000\030\243\uff1d\244\uff1d\251\uff1d\253" +
    "\uff1d\255\uff1d\256\uff1d\257\uff1d\260\uff1d\261\uff1d\262\uff1d" +
    "\263\uff1d\001\002\000\030\243\uff03\244\uff03\251\uff03\253" +
    "\uff03\255\uff03\256\uff03\257\uff03\260\uff03\261\uff03\262\uff03" +
    "\263\uff03\001\002\000\030\243\uff04\244\uff04\251\uff04\253" +
    "\uff04\255\uff04\256\uff04\257\uff04\260\uff04\261\uff04\262\uff04" +
    "\263\uff04\001\002\000\030\243\uff05\244\uff05\251\uff05\253" +
    "\uff05\255\uff05\256\uff05\257\uff05\260\uff05\261\uff05\262\uff05" +
    "\263\uff05\001\002\000\030\243\uff1e\244\uff1e\251\uff1e\253" +
    "\uff1e\255\uff1e\256\uff1e\257\uff1e\260\uff1e\261\uff1e\262\uff1e" +
    "\263\uff1e\001\002\000\030\243\uff1f\244\uff1f\251\uff1f\253" +
    "\uff1f\255\uff1f\256\uff1f\257\uff1f\260\uff1f\261\uff1f\262\uff1f" +
    "\263\uff1f\001\002\000\030\243\uff20\244\uff20\251\uff20\253" +
    "\uff20\255\uff20\256\uff20\257\uff20\260\uff20\261\uff20\262\uff20" +
    "\263\uff20\001\002\000\030\243\uff06\244\uff06\251\uff06\253" +
    "\uff06\255\uff06\256\uff06\257\uff06\260\uff06\261\uff06\262\uff06" +
    "\263\uff06\001\002\000\030\243\uff21\244\uff21\251\uff21\253" +
    "\uff21\255\uff21\256\uff21\257\uff21\260\uff21\261\uff21\262\uff21" +
    "\263\uff21\001\002\000\030\243\uff07\244\uff07\251\uff07\253" +
    "\uff07\255\uff07\256\uff07\257\uff07\260\uff07\261\uff07\262\uff07" +
    "\263\uff07\001\002\000\030\243\uff22\244\uff22\251\uff22\253" +
    "\uff22\255\uff22\256\uff22\257\uff22\260\uff22\261\uff22\262\uff22" +
    "\263\uff22\001\002\000\030\243\uff08\244\uff08\251\uff08\253" +
    "\uff08\255\uff08\256\uff08\257\uff08\260\uff08\261\uff08\262\uff08" +
    "\263\uff08\001\002\000\004\251\312\001\002\000\030\243" +
    "\uff23\244\uff23\251\uff23\253\uff23\255\uff23\256\uff23\257\uff23" +
    "\260\uff23\261\uff23\262\uff23\263\uff23\001\002\000\030\243" +
    "\uff09\244\uff09\251\uff09\253\uff09\255\uff09\256\uff09\257\uff09" +
    "\260\uff09\261\uff09\262\uff09\263\uff09\001\002\000\u011c\016" +
    "\uffe7\017\uffe7\020\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076" +
    "\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7" +
    "\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7\113" +
    "\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7" +
    "\122\uffe7\123\uffe7\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130" +
    "\uffe7\131\uffe7\132\uffe7\133\uffe7\134\uffe7\135\uffe7\136\uffe7" +
    "\137\uffe7\140\uffe7\141\uffe7\142\uffe7\143\uffe7\144\uffe7\145" +
    "\uffe7\146\uffe7\147\uffe7\150\uffe7\151\uffe7\152\uffe7\153\uffe7" +
    "\154\uffe7\155\uffe7\156\uffe7\157\uffe7\160\uffe7\161\uffe7\162" +
    "\uffe7\163\uffe7\164\uffe7\165\uffe7\166\uffe7\167\uffe7\170\uffe7" +
    "\171\uffe7\172\uffe7\173\uffe7\175\uffe7\176\uffe7\177\uffe7\200" +
    "\uffe7\201\uffe7\202\uffe7\203\uffe7\204\uffe7\205\uffe7\206\uffe7" +
    "\207\uffe7\210\uffe7\211\uffe7\212\uffe7\213\uffe7\214\uffe7\215" +
    "\uffe7\216\uffe7\217\uffe7\220\uffe7\221\uffe7\222\uffe7\223\uffe7" +
    "\224\uffe7\225\uffe7\226\uffe7\227\uffe7\230\uffe7\231\uffe7\234" +
    "\uffe7\235\uffe7\237\uffe7\241\uffe7\247\uffe7\264\uffe7\267\uffe7" +
    "\271\uffe7\273\uffe7\274\uffe7\275\uffe7\001\002\000\004\251" +
    "\320\001\002\000\004\244\315\001\002\000\004\270\316" +
    "\001\002\000\004\251\317\001\002\000\u011c\016\uffe2\017" +
    "\uffe2\020\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2\113\uffe2\114" +
    "\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122\uffe2" +
    "\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131" +
    "\uffe2\132\uffe2\133\uffe2\134\uffe2\135\uffe2\136\uffe2\137\uffe2" +
    "\140\uffe2\141\uffe2\142\uffe2\143\uffe2\144\uffe2\145\uffe2\146" +
    "\uffe2\147\uffe2\150\uffe2\151\uffe2\152\uffe2\153\uffe2\154\uffe2" +
    "\155\uffe2\156\uffe2\157\uffe2\160\uffe2\161\uffe2\162\uffe2\163" +
    "\uffe2\164\uffe2\165\uffe2\166\uffe2\167\uffe2\170\uffe2\171\uffe2" +
    "\172\uffe2\173\uffe2\175\uffe2\176\uffe2\177\uffe2\200\uffe2\201" +
    "\uffe2\202\uffe2\203\uffe2\204\uffe2\205\uffe2\206\uffe2\207\uffe2" +
    "\210\uffe2\211\uffe2\212\uffe2\213\uffe2\214\uffe2\215\uffe2\216" +
    "\uffe2\217\uffe2\220\uffe2\221\uffe2\222\uffe2\223\uffe2\224\uffe2" +
    "\225\uffe2\226\uffe2\227\uffe2\230\uffe2\231\uffe2\234\uffe2\235" +
    "\uffe2\237\uffe2\241\uffe2\247\uffe2\264\uffe2\267\uffe2\271\uffe2" +
    "\273\uffe2\274\uffe2\275\uffe2\001\002\000\u011c\016\uffe6\017" +
    "\uffe6\020\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077" +
    "\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6" +
    "\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6\113\uffe6\114" +
    "\uffe6\115\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6\122\uffe6" +
    "\123\uffe6\124\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131" +
    "\uffe6\132\uffe6\133\uffe6\134\uffe6\135\uffe6\136\uffe6\137\uffe6" +
    "\140\uffe6\141\uffe6\142\uffe6\143\uffe6\144\uffe6\145\uffe6\146" +
    "\uffe6\147\uffe6\150\uffe6\151\uffe6\152\uffe6\153\uffe6\154\uffe6" +
    "\155\uffe6\156\uffe6\157\uffe6\160\uffe6\161\uffe6\162\uffe6\163" +
    "\uffe6\164\uffe6\165\uffe6\166\uffe6\167\uffe6\170\uffe6\171\uffe6" +
    "\172\uffe6\173\uffe6\175\uffe6\176\uffe6\177\uffe6\200\uffe6\201" +
    "\uffe6\202\uffe6\203\uffe6\204\uffe6\205\uffe6\206\uffe6\207\uffe6" +
    "\210\uffe6\211\uffe6\212\uffe6\213\uffe6\214\uffe6\215\uffe6\216" +
    "\uffe6\217\uffe6\220\uffe6\221\uffe6\222\uffe6\223\uffe6\224\uffe6" +
    "\225\uffe6\226\uffe6\227\uffe6\230\uffe6\231\uffe6\234\uffe6\235" +
    "\uffe6\237\uffe6\241\uffe6\247\uffe6\264\uffe6\267\uffe6\271\uffe6" +
    "\273\uffe6\274\uffe6\275\uffe6\001\002\000\014\010\336\011" +
    "\337\012\335\270\333\271\334\001\002\000\004\270\331" +
    "\001\002\000\004\270\327\001\002\000\004\243\325\001" +
    "\002\000\004\251\326\001\002\000\u011c\016\uffe5\017\uffe5" +
    "\020\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106" +
    "\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\113\uffe5\114\uffe5" +
    "\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5\122\uffe5\123" +
    "\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5" +
    "\132\uffe5\133\uffe5\134\uffe5\135\uffe5\136\uffe5\137\uffe5\140" +
    "\uffe5\141\uffe5\142\uffe5\143\uffe5\144\uffe5\145\uffe5\146\uffe5" +
    "\147\uffe5\150\uffe5\151\uffe5\152\uffe5\153\uffe5\154\uffe5\155" +
    "\uffe5\156\uffe5\157\uffe5\160\uffe5\161\uffe5\162\uffe5\163\uffe5" +
    "\164\uffe5\165\uffe5\166\uffe5\167\uffe5\170\uffe5\171\uffe5\172" +
    "\uffe5\173\uffe5\175\uffe5\176\uffe5\177\uffe5\200\uffe5\201\uffe5" +
    "\202\uffe5\203\uffe5\204\uffe5\205\uffe5\206\uffe5\207\uffe5\210" +
    "\uffe5\211\uffe5\212\uffe5\213\uffe5\214\uffe5\215\uffe5\216\uffe5" +
    "\217\uffe5\220\uffe5\221\uffe5\222\uffe5\223\uffe5\224\uffe5\225" +
    "\uffe5\226\uffe5\227\uffe5\230\uffe5\231\uffe5\234\uffe5\235\uffe5" +
    "\237\uffe5\241\uffe5\247\uffe5\264\uffe5\267\uffe5\271\uffe5\273" +
    "\uffe5\274\uffe5\275\uffe5\001\002\000\004\251\330\001\002" +
    "\000\u011c\016\uffd5\017\uffd5\020\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103" +
    "\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5" +
    "\112\uffd5\113\uffd5\114\uffd5\115\uffd5\116\uffd5\117\uffd5\120" +
    "\uffd5\121\uffd5\122\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5" +
    "\127\uffd5\130\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\135" +
    "\uffd5\136\uffd5\137\uffd5\140\uffd5\141\uffd5\142\uffd5\143\uffd5" +
    "\144\uffd5\145\uffd5\146\uffd5\147\uffd5\150\uffd5\151\uffd5\152" +
    "\uffd5\153\uffd5\154\uffd5\155\uffd5\156\uffd5\157\uffd5\160\uffd5" +
    "\161\uffd5\162\uffd5\163\uffd5\164\uffd5\165\uffd5\166\uffd5\167" +
    "\uffd5\170\uffd5\171\uffd5\172\uffd5\173\uffd5\175\uffd5\176\uffd5" +
    "\177\uffd5\200\uffd5\201\uffd5\202\uffd5\203\uffd5\204\uffd5\205" +
    "\uffd5\206\uffd5\207\uffd5\210\uffd5\211\uffd5\212\uffd5\213\uffd5" +
    "\214\uffd5\215\uffd5\216\uffd5\217\uffd5\220\uffd5\221\uffd5\222" +
    "\uffd5\223\uffd5\224\uffd5\225\uffd5\226\uffd5\227\uffd5\230\uffd5" +
    "\231\uffd5\234\uffd5\235\uffd5\237\uffd5\241\uffd5\247\uffd5\264" +
    "\uffd5\267\uffd5\271\uffd5\273\uffd5\274\uffd5\275\uffd5\001\002" +
    "\000\004\251\332\001\002\000\u011c\016\uffd4\017\uffd4\020" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4" +
    "\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\114\uffd4\115" +
    "\uffd4\116\uffd4\117\uffd4\120\uffd4\121\uffd4\122\uffd4\123\uffd4" +
    "\124\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4\132" +
    "\uffd4\133\uffd4\134\uffd4\135\uffd4\136\uffd4\137\uffd4\140\uffd4" +
    "\141\uffd4\142\uffd4\143\uffd4\144\uffd4\145\uffd4\146\uffd4\147" +
    "\uffd4\150\uffd4\151\uffd4\152\uffd4\153\uffd4\154\uffd4\155\uffd4" +
    "\156\uffd4\157\uffd4\160\uffd4\161\uffd4\162\uffd4\163\uffd4\164" +
    "\uffd4\165\uffd4\166\uffd4\167\uffd4\170\uffd4\171\uffd4\172\uffd4" +
    "\173\uffd4\175\uffd4\176\uffd4\177\uffd4\200\uffd4\201\uffd4\202" +
    "\uffd4\203\uffd4\204\uffd4\205\uffd4\206\uffd4\207\uffd4\210\uffd4" +
    "\211\uffd4\212\uffd4\213\uffd4\214\uffd4\215\uffd4\216\uffd4\217" +
    "\uffd4\220\uffd4\221\uffd4\222\uffd4\223\uffd4\224\uffd4\225\uffd4" +
    "\226\uffd4\227\uffd4\230\uffd4\231\uffd4\234\uffd4\235\uffd4\237" +
    "\uffd4\241\uffd4\247\uffd4\264\uffd4\267\uffd4\271\uffd4\273\uffd4" +
    "\274\uffd4\275\uffd4\001\002\000\010\244\uffc4\245\uffc4\251" +
    "\uffad\001\002\000\014\244\uffc5\245\uffc5\251\uffae\265\360" +
    "\266\361\001\002\000\004\251\uffaa\001\002\000\004\251" +
    "\uffab\001\002\000\004\251\uffac\001\002\000\006\244\343" +
    "\245\344\001\002\000\004\251\342\001\002\000\u011c\016" +
    "\uffe8\017\uffe8\020\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076" +
    "\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8" +
    "\105\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113" +
    "\uffe8\114\uffe8\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8" +
    "\122\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\130" +
    "\uffe8\131\uffe8\132\uffe8\133\uffe8\134\uffe8\135\uffe8\136\uffe8" +
    "\137\uffe8\140\uffe8\141\uffe8\142\uffe8\143\uffe8\144\uffe8\145" +
    "\uffe8\146\uffe8\147\uffe8\150\uffe8\151\uffe8\152\uffe8\153\uffe8" +
    "\154\uffe8\155\uffe8\156\uffe8\157\uffe8\160\uffe8\161\uffe8\162" +
    "\uffe8\163\uffe8\164\uffe8\165\uffe8\166\uffe8\167\uffe8\170\uffe8" +
    "\171\uffe8\172\uffe8\173\uffe8\175\uffe8\176\uffe8\177\uffe8\200" +
    "\uffe8\201\uffe8\202\uffe8\203\uffe8\204\uffe8\205\uffe8\206\uffe8" +
    "\207\uffe8\210\uffe8\211\uffe8\212\uffe8\213\uffe8\214\uffe8\215" +
    "\uffe8\216\uffe8\217\uffe8\220\uffe8\221\uffe8\222\uffe8\223\uffe8" +
    "\224\uffe8\225\uffe8\226\uffe8\227\uffe8\230\uffe8\231\uffe8\234" +
    "\uffe8\235\uffe8\237\uffe8\241\uffe8\247\uffe8\264\uffe8\267\uffe8" +
    "\271\uffe8\273\uffe8\274\uffe8\275\uffe8\001\002\000\006\270" +
    "\uffc9\271\uffc9\001\002\000\006\270\uffc8\271\uffc8\001\002" +
    "\000\006\270\346\271\347\001\002\000\014\243\uffc4\244" +
    "\uffc4\245\uffc4\250\uffc4\251\uffc4\001\002\000\014\243\uffc5" +
    "\244\uffc5\245\uffc5\250\uffc5\251\uffc5\001\002\000\010\244" +
    "\343\245\344\251\353\001\002\000\006\270\346\271\347" +
    "\001\002\000\010\244\343\245\344\251\354\001\002\000" +
    "\u011c\016\uffd1\017\uffd1\020\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075" +
    "\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112" +
    "\uffd1\113\uffd1\114\uffd1\115\uffd1\116\uffd1\117\uffd1\120\uffd1" +
    "\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\126\uffd1\127" +
    "\uffd1\130\uffd1\131\uffd1\132\uffd1\133\uffd1\134\uffd1\135\uffd1" +
    "\136\uffd1\137\uffd1\140\uffd1\141\uffd1\142\uffd1\143\uffd1\144" +
    "\uffd1\145\uffd1\146\uffd1\147\uffd1\150\uffd1\151\uffd1\152\uffd1" +
    "\153\uffd1\154\uffd1\155\uffd1\156\uffd1\157\uffd1\160\uffd1\161" +
    "\uffd1\162\uffd1\163\uffd1\164\uffd1\165\uffd1\166\uffd1\167\uffd1" +
    "\170\uffd1\171\uffd1\172\uffd1\173\uffd1\175\uffd1\176\uffd1\177" +
    "\uffd1\200\uffd1\201\uffd1\202\uffd1\203\uffd1\204\uffd1\205\uffd1" +
    "\206\uffd1\207\uffd1\210\uffd1\211\uffd1\212\uffd1\213\uffd1\214" +
    "\uffd1\215\uffd1\216\uffd1\217\uffd1\220\uffd1\221\uffd1\222\uffd1" +
    "\223\uffd1\224\uffd1\225\uffd1\226\uffd1\227\uffd1\230\uffd1\231" +
    "\uffd1\234\uffd1\235\uffd1\237\uffd1\241\uffd1\247\uffd1\264\uffd1" +
    "\267\uffd1\271\uffd1\273\uffd1\274\uffd1\275\uffd1\001\002\000" +
    "\u011c\016\uffd0\017\uffd0\020\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\114\uffd0\115\uffd0\116\uffd0\117\uffd0\120\uffd0" +
    "\121\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0\126\uffd0\127" +
    "\uffd0\130\uffd0\131\uffd0\132\uffd0\133\uffd0\134\uffd0\135\uffd0" +
    "\136\uffd0\137\uffd0\140\uffd0\141\uffd0\142\uffd0\143\uffd0\144" +
    "\uffd0\145\uffd0\146\uffd0\147\uffd0\150\uffd0\151\uffd0\152\uffd0" +
    "\153\uffd0\154\uffd0\155\uffd0\156\uffd0\157\uffd0\160\uffd0\161" +
    "\uffd0\162\uffd0\163\uffd0\164\uffd0\165\uffd0\166\uffd0\167\uffd0" +
    "\170\uffd0\171\uffd0\172\uffd0\173\uffd0\175\uffd0\176\uffd0\177" +
    "\uffd0\200\uffd0\201\uffd0\202\uffd0\203\uffd0\204\uffd0\205\uffd0" +
    "\206\uffd0\207\uffd0\210\uffd0\211\uffd0\212\uffd0\213\uffd0\214" +
    "\uffd0\215\uffd0\216\uffd0\217\uffd0\220\uffd0\221\uffd0\222\uffd0" +
    "\223\uffd0\224\uffd0\225\uffd0\226\uffd0\227\uffd0\230\uffd0\231" +
    "\uffd0\234\uffd0\235\uffd0\237\uffd0\241\uffd0\247\uffd0\264\uffd0" +
    "\267\uffd0\271\uffd0\273\uffd0\274\uffd0\275\uffd0\001\002\000" +
    "\006\270\346\271\347\001\002\000\010\244\uffc6\245\uffc6" +
    "\251\uffc6\001\002\000\010\244\uffc7\245\uffc7\251\uffc7\001" +
    "\002\000\004\270\364\001\002\000\004\270\362\001\002" +
    "\000\004\251\363\001\002\000\u011c\016\uffd3\017\uffd3\020" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3" +
    "\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100" +
    "\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3" +
    "\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3\115" +
    "\uffd3\116\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3" +
    "\124\uffd3\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132" +
    "\uffd3\133\uffd3\134\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3" +
    "\141\uffd3\142\uffd3\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147" +
    "\uffd3\150\uffd3\151\uffd3\152\uffd3\153\uffd3\154\uffd3\155\uffd3" +
    "\156\uffd3\157\uffd3\160\uffd3\161\uffd3\162\uffd3\163\uffd3\164" +
    "\uffd3\165\uffd3\166\uffd3\167\uffd3\170\uffd3\171\uffd3\172\uffd3" +
    "\173\uffd3\175\uffd3\176\uffd3\177\uffd3\200\uffd3\201\uffd3\202" +
    "\uffd3\203\uffd3\204\uffd3\205\uffd3\206\uffd3\207\uffd3\210\uffd3" +
    "\211\uffd3\212\uffd3\213\uffd3\214\uffd3\215\uffd3\216\uffd3\217" +
    "\uffd3\220\uffd3\221\uffd3\222\uffd3\223\uffd3\224\uffd3\225\uffd3" +
    "\226\uffd3\227\uffd3\230\uffd3\231\uffd3\234\uffd3\235\uffd3\237" +
    "\uffd3\241\uffd3\247\uffd3\264\uffd3\267\uffd3\271\uffd3\273\uffd3" +
    "\274\uffd3\275\uffd3\001\002\000\004\251\365\001\002\000" +
    "\u011c\016\uffd2\017\uffd2\020\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075" +
    "\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2" +
    "\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112" +
    "\uffd2\113\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2" +
    "\121\uffd2\122\uffd2\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127" +
    "\uffd2\130\uffd2\131\uffd2\132\uffd2\133\uffd2\134\uffd2\135\uffd2" +
    "\136\uffd2\137\uffd2\140\uffd2\141\uffd2\142\uffd2\143\uffd2\144" +
    "\uffd2\145\uffd2\146\uffd2\147\uffd2\150\uffd2\151\uffd2\152\uffd2" +
    "\153\uffd2\154\uffd2\155\uffd2\156\uffd2\157\uffd2\160\uffd2\161" +
    "\uffd2\162\uffd2\163\uffd2\164\uffd2\165\uffd2\166\uffd2\167\uffd2" +
    "\170\uffd2\171\uffd2\172\uffd2\173\uffd2\175\uffd2\176\uffd2\177" +
    "\uffd2\200\uffd2\201\uffd2\202\uffd2\203\uffd2\204\uffd2\205\uffd2" +
    "\206\uffd2\207\uffd2\210\uffd2\211\uffd2\212\uffd2\213\uffd2\214" +
    "\uffd2\215\uffd2\216\uffd2\217\uffd2\220\uffd2\221\uffd2\222\uffd2" +
    "\223\uffd2\224\uffd2\225\uffd2\226\uffd2\227\uffd2\230\uffd2\231" +
    "\uffd2\234\uffd2\235\uffd2\237\uffd2\241\uffd2\247\uffd2\264\uffd2" +
    "\267\uffd2\271\uffd2\273\uffd2\274\uffd2\275\uffd2\001\002\000" +
    "\004\250\367\001\002\000\012\004\370\005\371\006\373" +
    "\007\374\001\002\000\012\015\uffb2\243\uffb2\251\uffb2\252" +
    "\uffb2\001\002\000\012\015\uffb1\243\uffb1\251\uffb1\252\uffb1" +
    "\001\002\000\006\251\376\252\375\001\002\000\012\015" +
    "\uffb0\243\uffb0\251\uffb0\252\uffb0\001\002\000\012\015\uffaf" +
    "\243\uffaf\251\uffaf\252\uffaf\001\002\000\014\010\336\011" +
    "\337\012\335\270\u0100\271\377\001\002\000\u011c\016\uffea" +
    "\017\uffea\020\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea" +
    "\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070" +
    "\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea" +
    "\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\113\uffea" +
    "\114\uffea\115\uffea\116\uffea\117\uffea\120\uffea\121\uffea\122" +
    "\uffea\123\uffea\124\uffea\125\uffea\126\uffea\127\uffea\130\uffea" +
    "\131\uffea\132\uffea\133\uffea\134\uffea\135\uffea\136\uffea\137" +
    "\uffea\140\uffea\141\uffea\142\uffea\143\uffea\144\uffea\145\uffea" +
    "\146\uffea\147\uffea\150\uffea\151\uffea\152\uffea\153\uffea\154" +
    "\uffea\155\uffea\156\uffea\157\uffea\160\uffea\161\uffea\162\uffea" +
    "\163\uffea\164\uffea\165\uffea\166\uffea\167\uffea\170\uffea\171" +
    "\uffea\172\uffea\173\uffea\175\uffea\176\uffea\177\uffea\200\uffea" +
    "\201\uffea\202\uffea\203\uffea\204\uffea\205\uffea\206\uffea\207" +
    "\uffea\210\uffea\211\uffea\212\uffea\213\uffea\214\uffea\215\uffea" +
    "\216\uffea\217\uffea\220\uffea\221\uffea\222\uffea\223\uffea\224" +
    "\uffea\225\uffea\226\uffea\227\uffea\230\uffea\231\uffea\234\uffea" +
    "\235\uffea\237\uffea\241\uffea\247\uffea\264\uffea\267\uffea\271" +
    "\uffea\273\uffea\274\uffea\275\uffea\001\002\000\004\251\uffae" +
    "\001\002\000\004\251\uffad\001\002\000\004\251\u0102\001" +
    "\002\000\u011c\016\uffe9\017\uffe9\020\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9" +
    "\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9\111" +
    "\uffe9\112\uffe9\113\uffe9\114\uffe9\115\uffe9\116\uffe9\117\uffe9" +
    "\120\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125\uffe9\126" +
    "\uffe9\127\uffe9\130\uffe9\131\uffe9\132\uffe9\133\uffe9\134\uffe9" +
    "\135\uffe9\136\uffe9\137\uffe9\140\uffe9\141\uffe9\142\uffe9\143" +
    "\uffe9\144\uffe9\145\uffe9\146\uffe9\147\uffe9\150\uffe9\151\uffe9" +
    "\152\uffe9\153\uffe9\154\uffe9\155\uffe9\156\uffe9\157\uffe9\160" +
    "\uffe9\161\uffe9\162\uffe9\163\uffe9\164\uffe9\165\uffe9\166\uffe9" +
    "\167\uffe9\170\uffe9\171\uffe9\172\uffe9\173\uffe9\175\uffe9\176" +
    "\uffe9\177\uffe9\200\uffe9\201\uffe9\202\uffe9\203\uffe9\204\uffe9" +
    "\205\uffe9\206\uffe9\207\uffe9\210\uffe9\211\uffe9\212\uffe9\213" +
    "\uffe9\214\uffe9\215\uffe9\216\uffe9\217\uffe9\220\uffe9\221\uffe9" +
    "\222\uffe9\223\uffe9\224\uffe9\225\uffe9\226\uffe9\227\uffe9\230" +
    "\uffe9\231\uffe9\234\uffe9\235\uffe9\237\uffe9\241\uffe9\247\uffe9" +
    "\264\uffe9\267\uffe9\271\uffe9\273\uffe9\274\uffe9\275\uffe9\001" +
    "\002\000\004\270\u0104\001\002\000\004\247\u0105\001\002" +
    "\000\004\251\u0106\001\002\000\u011c\016\uffe3\017\uffe3\020" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3" +
    "\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100" +
    "\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3" +
    "\107\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3\114\uffe3\115" +
    "\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3\122\uffe3\123\uffe3" +
    "\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132" +
    "\uffe3\133\uffe3\134\uffe3\135\uffe3\136\uffe3\137\uffe3\140\uffe3" +
    "\141\uffe3\142\uffe3\143\uffe3\144\uffe3\145\uffe3\146\uffe3\147" +
    "\uffe3\150\uffe3\151\uffe3\152\uffe3\153\uffe3\154\uffe3\155\uffe3" +
    "\156\uffe3\157\uffe3\160\uffe3\161\uffe3\162\uffe3\163\uffe3\164" +
    "\uffe3\165\uffe3\166\uffe3\167\uffe3\170\uffe3\171\uffe3\172\uffe3" +
    "\173\uffe3\175\uffe3\176\uffe3\177\uffe3\200\uffe3\201\uffe3\202" +
    "\uffe3\203\uffe3\204\uffe3\205\uffe3\206\uffe3\207\uffe3\210\uffe3" +
    "\211\uffe3\212\uffe3\213\uffe3\214\uffe3\215\uffe3\216\uffe3\217" +
    "\uffe3\220\uffe3\221\uffe3\222\uffe3\223\uffe3\224\uffe3\225\uffe3" +
    "\226\uffe3\227\uffe3\230\uffe3\231\uffe3\234\uffe3\235\uffe3\237" +
    "\uffe3\241\uffe3\247\uffe3\264\uffe3\267\uffe3\271\uffe3\273\uffe3" +
    "\274\uffe3\275\uffe3\001\002\000\014\234\uffeb\235\uffeb\241" +
    "\uffeb\247\uffeb\274\uffeb\001\002\000\u011c\016\uffe1\017\uffe1" +
    "\020\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071" +
    "\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106" +
    "\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\114\uffe1" +
    "\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123" +
    "\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1" +
    "\132\uffe1\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1\140" +
    "\uffe1\141\uffe1\142\uffe1\143\uffe1\144\uffe1\145\uffe1\146\uffe1" +
    "\147\uffe1\150\uffe1\151\uffe1\152\uffe1\153\uffe1\154\uffe1\155" +
    "\uffe1\156\uffe1\157\uffe1\160\uffe1\161\uffe1\162\uffe1\163\uffe1" +
    "\164\uffe1\165\uffe1\166\uffe1\167\uffe1\170\uffe1\171\uffe1\172" +
    "\uffe1\173\uffe1\175\uffe1\176\uffe1\177\uffe1\200\uffe1\201\uffe1" +
    "\202\uffe1\203\uffe1\204\uffe1\205\uffe1\206\uffe1\207\uffe1\210" +
    "\uffe1\211\uffe1\212\uffe1\213\uffe1\214\uffe1\215\uffe1\216\uffe1" +
    "\217\uffe1\220\uffe1\221\uffe1\222\uffe1\223\uffe1\224\uffe1\225" +
    "\uffe1\226\uffe1\227\uffe1\230\uffe1\231\uffe1\234\uffe1\235\uffe1" +
    "\237\uffe1\241\uffe1\247\uffe1\264\uffe1\267\uffe1\271\uffe1\273" +
    "\uffe1\274\uffe1\275\uffe1\001\002\000\130\030\252\031\251" +
    "\032\250\033\247\034\246\112\242\113\240\114\310\115" +
    "\305\116\303\117\301\120\300\121\277\122\273\123\271" +
    "\124\270\125\267\126\266\127\265\130\264\131\263\132" +
    "\262\133\261\134\260\135\257\136\256\137\255\140\254" +
    "\141\253\142\245\143\244\144\243\145\241\146\311\147" +
    "\306\150\304\151\302\152\276\153\275\154\274\155\272" +
    "\270\346\271\347\001\002\000\004\243\u011f\001\002\000" +
    "\004\243\u010c\001\002\000\004\240\u010d\001\002\000\006" +
    "\241\u010f\274\u0110\001\002\000\010\235\u0116\241\u0117\274" +
    "\u0118\001\002\000\004\250\u0114\001\002\000\006\270\346" +
    "\271\347\001\002\000\004\250\u0112\001\002\000\u0118\016" +
    "\142\017\163\020\066\030\200\031\175\032\174\033\171" +
    "\034\170\035\027\036\025\037\024\040\023\041\022\042" +
    "\164\043\205\046\160\047\157\050\156\051\155\052\151" +
    "\053\150\054\146\055\145\056\121\057\120\060\117\061" +
    "\116\062\115\063\114\064\113\065\110\066\071\067\070" +
    "\070\067\071\065\072\064\073\063\074\062\075\061\076" +
    "\045\077\044\100\043\101\042\102\041\103\036\104\035" +
    "\105\032\106\223\107\221\110\217\111\214\112\202\113" +
    "\201\114\177\115\176\116\173\117\172\120\167\121\166" +
    "\122\144\123\141\124\140\125\136\126\135\127\133\130" +
    "\132\131\130\132\111\133\107\134\106\135\105\136\104" +
    "\137\103\140\102\141\101\142\060\143\057\144\056\145" +
    "\054\146\053\147\052\150\051\151\050\152\033\153\031" +
    "\154\030\155\026\156\230\157\225\160\224\161\222\162" +
    "\220\163\216\164\215\165\212\166\127\167\126\170\125" +
    "\171\124\172\123\173\122\175\231\176\074\177\213\200" +
    "\112\201\232\202\034\203\037\204\040\205\047\206\137" +
    "\207\206\210\203\211\153\212\147\213\227\214\152\215" +
    "\143\216\226\217\072\220\073\221\075\222\076\223\077" +
    "\224\100\225\055\226\207\227\131\230\210\231\211\235" +
    "\uffcb\237\154\241\uffcb\264\165\267\161\271\204\273\046" +
    "\274\uffcb\275\134\001\002\000\010\235\uffcf\241\uffcf\274" +
    "\uffcf\001\002\000\u0112\016\142\017\163\020\066\030\200" +
    "\031\175\032\174\033\171\034\170\035\027\036\025\037" +
    "\024\040\023\041\022\042\164\043\205\046\160\047\157" +
    "\050\156\051\155\052\151\053\150\054\146\055\145\056" +
    "\121\057\120\060\117\061\116\062\115\063\114\064\113" +
    "\065\110\066\071\067\070\070\067\071\065\072\064\073" +
    "\063\074\062\075\061\076\045\077\044\100\043\101\042" +
    "\102\041\103\036\104\035\105\032\106\223\107\221\110" +
    "\217\111\214\112\202\113\201\114\177\115\176\116\173" +
    "\117\172\120\167\121\166\122\144\123\141\124\140\125" +
    "\136\126\135\127\133\130\132\131\130\132\111\133\107" +
    "\134\106\135\105\136\104\137\103\140\102\141\101\142" +
    "\060\143\057\144\056\145\054\146\053\147\052\150\051" +
    "\151\050\152\033\153\031\154\030\155\026\156\230\157" +
    "\225\160\224\161\222\162\220\163\216\164\215\165\212" +
    "\166\127\167\126\170\125\171\124\172\123\173\122\175" +
    "\231\176\074\177\213\200\112\201\232\202\034\203\037" +
    "\204\040\205\047\206\137\207\206\210\203\211\153\212" +
    "\147\213\227\214\152\215\143\216\226\217\072\220\073" +
    "\221\075\222\076\223\077\224\100\225\055\226\207\227" +
    "\131\230\210\231\211\237\154\264\165\267\161\271\204" +
    "\273\046\275\134\001\002\000\010\235\uffce\241\uffce\274" +
    "\uffce\001\002\000\004\237\u011e\001\002\000\004\250\u011c" +
    "\001\002\000\006\270\346\271\347\001\002\000\004\250" +
    "\u011a\001\002\000\u0118\016\142\017\163\020\066\030\200" +
    "\031\175\032\174\033\171\034\170\035\027\036\025\037" +
    "\024\040\023\041\022\042\164\043\205\046\160\047\157" +
    "\050\156\051\155\052\151\053\150\054\146\055\145\056" +
    "\121\057\120\060\117\061\116\062\115\063\114\064\113" +
    "\065\110\066\071\067\070\070\067\071\065\072\064\073" +
    "\063\074\062\075\061\076\045\077\044\100\043\101\042" +
    "\102\041\103\036\104\035\105\032\106\223\107\221\110" +
    "\217\111\214\112\202\113\201\114\177\115\176\116\173" +
    "\117\172\120\167\121\166\122\144\123\141\124\140\125" +
    "\136\126\135\127\133\130\132\131\130\132\111\133\107" +
    "\134\106\135\105\136\104\137\103\140\102\141\101\142" +
    "\060\143\057\144\056\145\054\146\053\147\052\150\051" +
    "\151\050\152\033\153\031\154\030\155\026\156\230\157" +
    "\225\160\224\161\222\162\220\163\216\164\215\165\212" +
    "\166\127\167\126\170\125\171\124\172\123\173\122\175" +
    "\231\176\074\177\213\200\112\201\232\202\034\203\037" +
    "\204\040\205\047\206\137\207\206\210\203\211\153\212" +
    "\147\213\227\214\152\215\143\216\226\217\072\220\073" +
    "\221\075\222\076\223\077\224\100\225\055\226\207\227" +
    "\131\230\210\231\211\235\uffca\237\154\241\uffca\264\165" +
    "\267\161\271\204\273\046\274\uffca\275\134\001\002\000" +
    "\010\235\uffcd\241\uffcd\274\uffcd\001\002\000\u0112\016\142" +
    "\017\163\020\066\030\200\031\175\032\174\033\171\034" +
    "\170\035\027\036\025\037\024\040\023\041\022\042\164" +
    "\043\205\046\160\047\157\050\156\051\155\052\151\053" +
    "\150\054\146\055\145\056\121\057\120\060\117\061\116" +
    "\062\115\063\114\064\113\065\110\066\071\067\070\070" +
    "\067\071\065\072\064\073\063\074\062\075\061\076\045" +
    "\077\044\100\043\101\042\102\041\103\036\104\035\105" +
    "\032\106\223\107\221\110\217\111\214\112\202\113\201" +
    "\114\177\115\176\116\173\117\172\120\167\121\166\122" +
    "\144\123\141\124\140\125\136\126\135\127\133\130\132" +
    "\131\130\132\111\133\107\134\106\135\105\136\104\137" +
    "\103\140\102\141\101\142\060\143\057\144\056\145\054" +
    "\146\053\147\052\150\051\151\050\152\033\153\031\154" +
    "\030\155\026\156\230\157\225\160\224\161\222\162\220" +
    "\163\216\164\215\165\212\166\127\167\126\170\125\171" +
    "\124\172\123\173\122\175\231\176\074\177\213\200\112" +
    "\201\232\202\034\203\037\204\040\205\047\206\137\207" +
    "\206\210\203\211\153\212\147\213\227\214\152\215\143" +
    "\216\226\217\072\220\073\221\075\222\076\223\077\224" +
    "\100\225\055\226\207\227\131\230\210\231\211\237\154" +
    "\264\165\267\161\271\204\273\046\275\134\001\002\000" +
    "\010\235\uffcc\241\uffcc\274\uffcc\001\002\000\u011c\016\uffd8" +
    "\017\uffd8\020\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8" +
    "\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105" +
    "\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8" +
    "\114\uffd8\115\uffd8\116\uffd8\117\uffd8\120\uffd8\121\uffd8\122" +
    "\uffd8\123\uffd8\124\uffd8\125\uffd8\126\uffd8\127\uffd8\130\uffd8" +
    "\131\uffd8\132\uffd8\133\uffd8\134\uffd8\135\uffd8\136\uffd8\137" +
    "\uffd8\140\uffd8\141\uffd8\142\uffd8\143\uffd8\144\uffd8\145\uffd8" +
    "\146\uffd8\147\uffd8\150\uffd8\151\uffd8\152\uffd8\153\uffd8\154" +
    "\uffd8\155\uffd8\156\uffd8\157\uffd8\160\uffd8\161\uffd8\162\uffd8" +
    "\163\uffd8\164\uffd8\165\uffd8\166\uffd8\167\uffd8\170\uffd8\171" +
    "\uffd8\172\uffd8\173\uffd8\175\uffd8\176\uffd8\177\uffd8\200\uffd8" +
    "\201\uffd8\202\uffd8\203\uffd8\204\uffd8\205\uffd8\206\uffd8\207" +
    "\uffd8\210\uffd8\211\uffd8\212\uffd8\213\uffd8\214\uffd8\215\uffd8" +
    "\216\uffd8\217\uffd8\220\uffd8\221\uffd8\222\uffd8\223\uffd8\224" +
    "\uffd8\225\uffd8\226\uffd8\227\uffd8\230\uffd8\231\uffd8\234\uffd8" +
    "\235\uffd8\237\uffd8\241\uffd8\247\uffd8\264\uffd8\267\uffd8\271" +
    "\uffd8\273\uffd8\274\uffd8\275\uffd8\001\002\000\004\240\u0120" +
    "\001\002\000\006\241\u010f\274\u0110\001\002\000\010\235" +
    "\u0122\241\u0117\274\u0118\001\002\000\004\237\u0123\001\002" +
    "\000\u011c\016\uffd9\017\uffd9\020\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103" +
    "\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9" +
    "\112\uffd9\113\uffd9\114\uffd9\115\uffd9\116\uffd9\117\uffd9\120" +
    "\uffd9\121\uffd9\122\uffd9\123\uffd9\124\uffd9\125\uffd9\126\uffd9" +
    "\127\uffd9\130\uffd9\131\uffd9\132\uffd9\133\uffd9\134\uffd9\135" +
    "\uffd9\136\uffd9\137\uffd9\140\uffd9\141\uffd9\142\uffd9\143\uffd9" +
    "\144\uffd9\145\uffd9\146\uffd9\147\uffd9\150\uffd9\151\uffd9\152" +
    "\uffd9\153\uffd9\154\uffd9\155\uffd9\156\uffd9\157\uffd9\160\uffd9" +
    "\161\uffd9\162\uffd9\163\uffd9\164\uffd9\165\uffd9\166\uffd9\167" +
    "\uffd9\170\uffd9\171\uffd9\172\uffd9\173\uffd9\175\uffd9\176\uffd9" +
    "\177\uffd9\200\uffd9\201\uffd9\202\uffd9\203\uffd9\204\uffd9\205" +
    "\uffd9\206\uffd9\207\uffd9\210\uffd9\211\uffd9\212\uffd9\213\uffd9" +
    "\214\uffd9\215\uffd9\216\uffd9\217\uffd9\220\uffd9\221\uffd9\222" +
    "\uffd9\223\uffd9\224\uffd9\225\uffd9\226\uffd9\227\uffd9\230\uffd9" +
    "\231\uffd9\234\uffd9\235\uffd9\237\uffd9\241\uffd9\247\uffd9\264" +
    "\uffd9\267\uffd9\271\uffd9\273\uffd9\274\uffd9\275\uffd9\001\002" +
    "\000\004\270\u0125\001\002\000\004\243\u0126\001\002\000" +
    "\004\251\u0127\001\002\000\u011c\016\uffe4\017\uffe4\020\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072" +
    "\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4" +
    "\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107" +
    "\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\114\uffe4\115\uffe4" +
    "\116\uffe4\117\uffe4\120\uffe4\121\uffe4\122\uffe4\123\uffe4\124" +
    "\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132\uffe4" +
    "\133\uffe4\134\uffe4\135\uffe4\136\uffe4\137\uffe4\140\uffe4\141" +
    "\uffe4\142\uffe4\143\uffe4\144\uffe4\145\uffe4\146\uffe4\147\uffe4" +
    "\150\uffe4\151\uffe4\152\uffe4\153\uffe4\154\uffe4\155\uffe4\156" +
    "\uffe4\157\uffe4\160\uffe4\161\uffe4\162\uffe4\163\uffe4\164\uffe4" +
    "\165\uffe4\166\uffe4\167\uffe4\170\uffe4\171\uffe4\172\uffe4\173" +
    "\uffe4\175\uffe4\176\uffe4\177\uffe4\200\uffe4\201\uffe4\202\uffe4" +
    "\203\uffe4\204\uffe4\205\uffe4\206\uffe4\207\uffe4\210\uffe4\211" +
    "\uffe4\212\uffe4\213\uffe4\214\uffe4\215\uffe4\216\uffe4\217\uffe4" +
    "\220\uffe4\221\uffe4\222\uffe4\223\uffe4\224\uffe4\225\uffe4\226" +
    "\uffe4\227\uffe4\230\uffe4\231\uffe4\234\uffe4\235\uffe4\237\uffe4" +
    "\241\uffe4\247\uffe4\264\uffe4\267\uffe4\271\uffe4\273\uffe4\274" +
    "\uffe4\275\uffe4\001\002\000\134\030\252\031\251\032\250" +
    "\033\247\034\246\044\u012a\045\u012c\112\242\113\240\114" +
    "\310\115\305\116\303\117\301\120\300\121\277\122\273" +
    "\123\271\124\270\125\267\126\266\127\265\130\264\131" +
    "\263\132\262\133\261\134\260\135\257\136\256\137\255" +
    "\140\254\141\253\142\245\143\244\144\243\145\241\146" +
    "\311\147\306\150\304\151\302\152\276\153\275\154\274" +
    "\155\272\270\u0129\271\u012d\001\002\000\024\243\uffc4\253" +
    "\uffc2\255\uffc2\256\uffc2\257\uffc2\260\uffc2\261\uffc2\262\uffc2" +
    "\263\uffc2\001\002\000\004\276\u014c\001\002\000\004\243" +
    "\u0147\001\002\000\004\277\u0146\001\002\000\024\243\uffc5" +
    "\253\uffc3\255\uffc3\256\uffc3\257\uffc3\260\uffc3\261\uffc3\262" +
    "\uffc3\263\uffc3\001\002\000\004\243\u0141\001\002\000\022" +
    "\253\u0136\255\u0135\256\u0133\257\u0134\260\u0132\261\u0131\262" +
    "\u0139\263\u0138\001\002\000\024\243\uffc1\253\uffc1\255\uffc1" +
    "\256\uffc1\257\uffc1\260\uffc1\261\uffc1\262\uffc1\263\uffc1\001" +
    "\002\000\134\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\044\uffb3\045\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116" +
    "\uffb3\117\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3" +
    "\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\133" +
    "\uffb3\134\uffb3\135\uffb3\136\uffb3\137\uffb3\140\uffb3\141\uffb3" +
    "\142\uffb3\143\uffb3\144\uffb3\145\uffb3\146\uffb3\147\uffb3\150" +
    "\uffb3\151\uffb3\152\uffb3\153\uffb3\154\uffb3\155\uffb3\270\uffb3" +
    "\271\uffb3\001\002\000\134\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\044\uffb8\045\uffb8\112\uffb8\113\uffb8\114\uffb8" +
    "\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8\122\uffb8\123" +
    "\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8" +
    "\132\uffb8\133\uffb8\134\uffb8\135\uffb8\136\uffb8\137\uffb8\140" +
    "\uffb8\141\uffb8\142\uffb8\143\uffb8\144\uffb8\145\uffb8\146\uffb8" +
    "\147\uffb8\150\uffb8\151\uffb8\152\uffb8\153\uffb8\154\uffb8\155" +
    "\uffb8\270\uffb8\271\uffb8\001\002\000\134\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\044\uffb9\045\uffb9\112\uffb9\113" +
    "\uffb9\114\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9" +
    "\122\uffb9\123\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9\130" +
    "\uffb9\131\uffb9\132\uffb9\133\uffb9\134\uffb9\135\uffb9\136\uffb9" +
    "\137\uffb9\140\uffb9\141\uffb9\142\uffb9\143\uffb9\144\uffb9\145" +
    "\uffb9\146\uffb9\147\uffb9\150\uffb9\151\uffb9\152\uffb9\153\uffb9" +
    "\154\uffb9\155\uffb9\270\uffb9\271\uffb9\001\002\000\134\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\044\uffb7\045\uffb7" +
    "\112\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7\120" +
    "\uffb7\121\uffb7\122\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7" +
    "\127\uffb7\130\uffb7\131\uffb7\132\uffb7\133\uffb7\134\uffb7\135" +
    "\uffb7\136\uffb7\137\uffb7\140\uffb7\141\uffb7\142\uffb7\143\uffb7" +
    "\144\uffb7\145\uffb7\146\uffb7\147\uffb7\150\uffb7\151\uffb7\152" +
    "\uffb7\153\uffb7\154\uffb7\155\uffb7\270\uffb7\271\uffb7\001\002" +
    "\000\134\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\044" +
    "\uffba\045\uffba\112\uffba\113\uffba\114\uffba\115\uffba\116\uffba" +
    "\117\uffba\120\uffba\121\uffba\122\uffba\123\uffba\124\uffba\125" +
    "\uffba\126\uffba\127\uffba\130\uffba\131\uffba\132\uffba\133\uffba" +
    "\134\uffba\135\uffba\136\uffba\137\uffba\140\uffba\141\uffba\142" +
    "\uffba\143\uffba\144\uffba\145\uffba\146\uffba\147\uffba\150\uffba" +
    "\151\uffba\152\uffba\153\uffba\154\uffba\155\uffba\270\uffba\271" +
    "\uffba\001\002\000\134\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\044\uffb6\045\uffb6\112\uffb6\113\uffb6\114\uffb6\115" +
    "\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6\123\uffb6" +
    "\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6\132" +
    "\uffb6\133\uffb6\134\uffb6\135\uffb6\136\uffb6\137\uffb6\140\uffb6" +
    "\141\uffb6\142\uffb6\143\uffb6\144\uffb6\145\uffb6\146\uffb6\147" +
    "\uffb6\150\uffb6\151\uffb6\152\uffb6\153\uffb6\154\uffb6\155\uffb6" +
    "\270\uffb6\271\uffb6\001\002\000\134\030\252\031\251\032" +
    "\250\033\247\034\246\044\u012a\045\u012c\112\242\113\240" +
    "\114\310\115\305\116\303\117\301\120\300\121\277\122" +
    "\273\123\271\124\270\125\267\126\266\127\265\130\264" +
    "\131\263\132\262\133\261\134\260\135\257\136\256\137" +
    "\255\140\254\141\253\142\245\143\244\144\243\145\241" +
    "\146\311\147\306\150\304\151\302\152\276\153\275\154" +
    "\274\155\272\270\u013a\271\u013b\001\002\000\134\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\044\uffb5\045\uffb5\112" +
    "\uffb5\113\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5" +
    "\121\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127" +
    "\uffb5\130\uffb5\131\uffb5\132\uffb5\133\uffb5\134\uffb5\135\uffb5" +
    "\136\uffb5\137\uffb5\140\uffb5\141\uffb5\142\uffb5\143\uffb5\144" +
    "\uffb5\145\uffb5\146\uffb5\147\uffb5\150\uffb5\151\uffb5\152\uffb5" +
    "\153\uffb5\154\uffb5\155\uffb5\270\uffb5\271\uffb5\001\002\000" +
    "\134\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\044\uffb4" +
    "\045\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117" +
    "\uffb4\120\uffb4\121\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4" +
    "\126\uffb4\127\uffb4\130\uffb4\131\uffb4\132\uffb4\133\uffb4\134" +
    "\uffb4\135\uffb4\136\uffb4\137\uffb4\140\uffb4\141\uffb4\142\uffb4" +
    "\143\uffb4\144\uffb4\145\uffb4\146\uffb4\147\uffb4\150\uffb4\151" +
    "\uffb4\152\uffb4\153\uffb4\154\uffb4\155\uffb4\270\uffb4\271\uffb4" +
    "\001\002\000\024\243\uffc2\253\uffc2\255\uffc2\256\uffc2\257" +
    "\uffc2\260\uffc2\261\uffc2\262\uffc2\263\uffc2\001\002\000\024" +
    "\243\uffc3\253\uffc3\255\uffc3\256\uffc3\257\uffc3\260\uffc3\261" +
    "\uffc3\262\uffc3\263\uffc3\001\002\000\024\243\uffbe\253\u0136" +
    "\255\u0135\256\u0133\257\u0134\260\u0132\261\u0131\262\u0139\263" +
    "\u0138\001\002\000\004\243\uffbd\001\002\000\134\030\252" +
    "\031\251\032\250\033\247\034\246\044\u012a\045\u012c\112" +
    "\242\113\240\114\310\115\305\116\303\117\301\120\300" +
    "\121\277\122\273\123\271\124\270\125\267\126\266\127" +
    "\265\130\264\131\263\132\262\133\261\134\260\135\257" +
    "\136\256\137\255\140\254\141\253\142\245\143\244\144" +
    "\243\145\241\146\311\147\306\150\304\151\302\152\276" +
    "\153\275\154\274\155\272\270\u013a\271\u013b\001\002\000" +
    "\024\243\uffbc\253\u0136\255\u0135\256\u0133\257\u0134\260\u0132" +
    "\261\u0131\262\u0139\263\u0138\001\002\000\004\243\uffbb\001" +
    "\002\000\004\236\u0142\001\002\000\u0112\016\142\017\163" +
    "\020\066\030\200\031\175\032\174\033\171\034\170\035" +
    "\027\036\025\037\024\040\023\041\022\042\164\043\205" +
    "\046\160\047\157\050\156\051\155\052\151\053\150\054" +
    "\146\055\145\056\121\057\120\060\117\061\116\062\115" +
    "\063\114\064\113\065\110\066\071\067\070\070\067\071" +
    "\065\072\064\073\063\074\062\075\061\076\045\077\044" +
    "\100\043\101\042\102\041\103\036\104\035\105\032\106" +
    "\223\107\221\110\217\111\214\112\202\113\201\114\177" +
    "\115\176\116\173\117\172\120\167\121\166\122\144\123" +
    "\141\124\140\125\136\126\135\127\133\130\132\131\130" +
    "\132\111\133\107\134\106\135\105\136\104\137\103\140" +
    "\102\141\101\142\060\143\057\144\056\145\054\146\053" +
    "\147\052\150\051\151\050\152\033\153\031\154\030\155" +
    "\026\156\230\157\225\160\224\161\222\162\220\163\216" +
    "\164\215\165\212\166\127\167\126\170\125\171\124\172" +
    "\123\173\122\175\231\176\074\177\213\200\112\201\232" +
    "\202\034\203\037\204\040\205\047\206\137\207\206\210" +
    "\203\211\153\212\147\213\227\214\152\215\143\216\226" +
    "\217\072\220\073\221\075\222\076\223\077\224\100\225" +
    "\055\226\207\227\131\230\210\231\211\237\154\264\165" +
    "\267\161\271\204\273\046\275\134\001\002\000\004\235" +
    "\u0144\001\002\000\004\275\u0145\001\002\000\u011c\016\uffd6" +
    "\017\uffd6\020\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6" +
    "\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105" +
    "\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6" +
    "\114\uffd6\115\uffd6\116\uffd6\117\uffd6\120\uffd6\121\uffd6\122" +
    "\uffd6\123\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6" +
    "\131\uffd6\132\uffd6\133\uffd6\134\uffd6\135\uffd6\136\uffd6\137" +
    "\uffd6\140\uffd6\141\uffd6\142\uffd6\143\uffd6\144\uffd6\145\uffd6" +
    "\146\uffd6\147\uffd6\150\uffd6\151\uffd6\152\uffd6\153\uffd6\154" +
    "\uffd6\155\uffd6\156\uffd6\157\uffd6\160\uffd6\161\uffd6\162\uffd6" +
    "\163\uffd6\164\uffd6\165\uffd6\166\uffd6\167\uffd6\170\uffd6\171" +
    "\uffd6\172\uffd6\173\uffd6\175\uffd6\176\uffd6\177\uffd6\200\uffd6" +
    "\201\uffd6\202\uffd6\203\uffd6\204\uffd6\205\uffd6\206\uffd6\207" +
    "\uffd6\210\uffd6\211\uffd6\212\uffd6\213\uffd6\214\uffd6\215\uffd6" +
    "\216\uffd6\217\uffd6\220\uffd6\221\uffd6\222\uffd6\223\uffd6\224" +
    "\uffd6\225\uffd6\226\uffd6\227\uffd6\230\uffd6\231\uffd6\234\uffd6" +
    "\235\uffd6\237\uffd6\241\uffd6\247\uffd6\264\uffd6\267\uffd6\271" +
    "\uffd6\273\uffd6\274\uffd6\275\uffd6\001\002\000\024\243\uffbf" +
    "\253\uffbf\255\uffbf\256\uffbf\257\uffbf\260\uffbf\261\uffbf\262" +
    "\uffbf\263\uffbf\001\002\000\004\236\u0148\001\002\000\u0112" +
    "\016\142\017\163\020\066\030\200\031\175\032\174\033" +
    "\171\034\170\035\027\036\025\037\024\040\023\041\022" +
    "\042\164\043\205\046\160\047\157\050\156\051\155\052" +
    "\151\053\150\054\146\055\145\056\121\057\120\060\117" +
    "\061\116\062\115\063\114\064\113\065\110\066\071\067" +
    "\070\070\067\071\065\072\064\073\063\074\062\075\061" +
    "\076\045\077\044\100\043\101\042\102\041\103\036\104" +
    "\035\105\032\106\223\107\221\110\217\111\214\112\202" +
    "\113\201\114\177\115\176\116\173\117\172\120\167\121" +
    "\166\122\144\123\141\124\140\125\136\126\135\127\133" +
    "\130\132\131\130\132\111\133\107\134\106\135\105\136" +
    "\104\137\103\140\102\141\101\142\060\143\057\144\056" +
    "\145\054\146\053\147\052\150\051\151\050\152\033\153" +
    "\031\154\030\155\026\156\230\157\225\160\224\161\222" +
    "\162\220\163\216\164\215\165\212\166\127\167\126\170" +
    "\125\171\124\172\123\173\122\175\231\176\074\177\213" +
    "\200\112\201\232\202\034\203\037\204\040\205\047\206" +
    "\137\207\206\210\203\211\153\212\147\213\227\214\152" +
    "\215\143\216\226\217\072\220\073\221\075\222\076\223" +
    "\077\224\100\225\055\226\207\227\131\230\210\231\211" +
    "\237\154\264\165\267\161\271\204\273\046\275\134\001" +
    "\002\000\004\235\u014a\001\002\000\004\275\u014b\001\002" +
    "\000\u011c\016\uffd7\017\uffd7\020\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103" +
    "\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7" +
    "\112\uffd7\113\uffd7\114\uffd7\115\uffd7\116\uffd7\117\uffd7\120" +
    "\uffd7\121\uffd7\122\uffd7\123\uffd7\124\uffd7\125\uffd7\126\uffd7" +
    "\127\uffd7\130\uffd7\131\uffd7\132\uffd7\133\uffd7\134\uffd7\135" +
    "\uffd7\136\uffd7\137\uffd7\140\uffd7\141\uffd7\142\uffd7\143\uffd7" +
    "\144\uffd7\145\uffd7\146\uffd7\147\uffd7\150\uffd7\151\uffd7\152" +
    "\uffd7\153\uffd7\154\uffd7\155\uffd7\156\uffd7\157\uffd7\160\uffd7" +
    "\161\uffd7\162\uffd7\163\uffd7\164\uffd7\165\uffd7\166\uffd7\167" +
    "\uffd7\170\uffd7\171\uffd7\172\uffd7\173\uffd7\175\uffd7\176\uffd7" +
    "\177\uffd7\200\uffd7\201\uffd7\202\uffd7\203\uffd7\204\uffd7\205" +
    "\uffd7\206\uffd7\207\uffd7\210\uffd7\211\uffd7\212\uffd7\213\uffd7" +
    "\214\uffd7\215\uffd7\216\uffd7\217\uffd7\220\uffd7\221\uffd7\222" +
    "\uffd7\223\uffd7\224\uffd7\225\uffd7\226\uffd7\227\uffd7\230\uffd7" +
    "\231\uffd7\234\uffd7\235\uffd7\237\uffd7\241\uffd7\247\uffd7\264" +
    "\uffd7\267\uffd7\271\uffd7\273\uffd7\274\uffd7\275\uffd7\001\002" +
    "\000\024\243\uffc0\253\uffc0\255\uffc0\256\uffc0\257\uffc0\260" +
    "\uffc0\261\uffc0\262\uffc0\263\uffc0\001\002\000\004\045\u014e" +
    "\001\002\000\004\277\u014f\001\002\000\u011c\016\uffe0\017" +
    "\uffe0\020\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077" +
    "\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0" +
    "\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0\114" +
    "\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121\uffe0\122\uffe0" +
    "\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131" +
    "\uffe0\132\uffe0\133\uffe0\134\uffe0\135\uffe0\136\uffe0\137\uffe0" +
    "\140\uffe0\141\uffe0\142\uffe0\143\uffe0\144\uffe0\145\uffe0\146" +
    "\uffe0\147\uffe0\150\uffe0\151\uffe0\152\uffe0\153\uffe0\154\uffe0" +
    "\155\uffe0\156\uffe0\157\uffe0\160\uffe0\161\uffe0\162\uffe0\163" +
    "\uffe0\164\uffe0\165\uffe0\166\uffe0\167\uffe0\170\uffe0\171\uffe0" +
    "\172\uffe0\173\uffe0\175\uffe0\176\uffe0\177\uffe0\200\uffe0\201" +
    "\uffe0\202\uffe0\203\uffe0\204\uffe0\205\uffe0\206\uffe0\207\uffe0" +
    "\210\uffe0\211\uffe0\212\uffe0\213\uffe0\214\uffe0\215\uffe0\216" +
    "\uffe0\217\uffe0\220\uffe0\221\uffe0\222\uffe0\223\uffe0\224\uffe0" +
    "\225\uffe0\226\uffe0\227\uffe0\230\uffe0\231\uffe0\234\uffe0\235" +
    "\uffe0\237\uffe0\241\uffe0\247\uffe0\264\uffe0\267\uffe0\271\uffe0" +
    "\273\uffe0\274\uffe0\275\uffe0\001\002\000\134\030\252\031" +
    "\251\032\250\033\247\034\246\044\u012a\045\u012c\112\242" +
    "\113\240\114\310\115\305\116\303\117\301\120\300\121" +
    "\277\122\273\123\271\124\270\125\267\126\266\127\265" +
    "\130\264\131\263\132\262\133\261\134\260\135\257\136" +
    "\256\137\255\140\254\141\253\142\245\143\244\144\243" +
    "\145\241\146\311\147\306\150\304\151\302\152\276\153" +
    "\275\154\274\155\272\270\u013a\271\u013b\001\002\000\004" +
    "\243\u015b\001\002\000\024\243\u0153\253\uffc1\255\uffc1\256" +
    "\uffc1\257\uffc1\260\uffc1\261\uffc1\262\uffc1\263\uffc1\001\002" +
    "\000\004\233\u0154\001\002\000\u0112\016\142\017\163\020" +
    "\066\030\200\031\175\032\174\033\171\034\170\035\027" +
    "\036\025\037\024\040\023\041\022\042\164\043\205\046" +
    "\160\047\157\050\156\051\155\052\151\053\150\054\146" +
    "\055\145\056\121\057\120\060\117\061\116\062\115\063" +
    "\114\064\113\065\110\066\071\067\070\070\067\071\065" +
    "\072\064\073\063\074\062\075\061\076\045\077\044\100" +
    "\043\101\042\102\041\103\036\104\035\105\032\106\223" +
    "\107\221\110\217\111\214\112\202\113\201\114\177\115" +
    "\176\116\173\117\172\120\167\121\166\122\144\123\141" +
    "\124\140\125\136\126\135\127\133\130\132\131\130\132" +
    "\111\133\107\134\106\135\105\136\104\137\103\140\102" +
    "\141\101\142\060\143\057\144\056\145\054\146\053\147" +
    "\052\150\051\151\050\152\033\153\031\154\030\155\026" +
    "\156\230\157\225\160\224\161\222\162\220\163\216\164" +
    "\215\165\212\166\127\167\126\170\125\171\124\172\123" +
    "\173\122\175\231\176\074\177\213\200\112\201\232\202" +
    "\034\203\037\204\040\205\047\206\137\207\206\210\203" +
    "\211\153\212\147\213\227\214\152\215\143\216\226\217" +
    "\072\220\073\221\075\222\076\223\077\224\100\225\055" +
    "\226\207\227\131\230\210\231\211\237\154\264\165\267" +
    "\161\271\204\273\046\275\134\001\002\000\006\234\uffdb" +
    "\235\u0157\001\002\000\004\234\u0158\001\002\000\u011c\016" +
    "\uffde\017\uffde\020\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde" +
    "\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076" +
    "\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde" +
    "\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde\112\uffde\113" +
    "\uffde\114\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde" +
    "\122\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130" +
    "\uffde\131\uffde\132\uffde\133\uffde\134\uffde\135\uffde\136\uffde" +
    "\137\uffde\140\uffde\141\uffde\142\uffde\143\uffde\144\uffde\145" +
    "\uffde\146\uffde\147\uffde\150\uffde\151\uffde\152\uffde\153\uffde" +
    "\154\uffde\155\uffde\156\uffde\157\uffde\160\uffde\161\uffde\162" +
    "\uffde\163\uffde\164\uffde\165\uffde\166\uffde\167\uffde\170\uffde" +
    "\171\uffde\172\uffde\173\uffde\175\uffde\176\uffde\177\uffde\200" +
    "\uffde\201\uffde\202\uffde\203\uffde\204\uffde\205\uffde\206\uffde" +
    "\207\uffde\210\uffde\211\uffde\212\uffde\213\uffde\214\uffde\215" +
    "\uffde\216\uffde\217\uffde\220\uffde\221\uffde\222\uffde\223\uffde" +
    "\224\uffde\225\uffde\226\uffde\227\uffde\230\uffde\231\uffde\234" +
    "\uffde\235\uffde\237\uffde\241\uffde\247\uffde\264\uffde\267\uffde" +
    "\271\uffde\273\uffde\274\uffde\275\uffde\001\002\000\u0112\016" +
    "\142\017\163\020\066\030\200\031\175\032\174\033\171" +
    "\034\170\035\027\036\025\037\024\040\023\041\022\042" +
    "\164\043\205\046\160\047\157\050\156\051\155\052\151" +
    "\053\150\054\146\055\145\056\121\057\120\060\117\061" +
    "\116\062\115\063\114\064\113\065\110\066\071\067\070" +
    "\070\067\071\065\072\064\073\063\074\062\075\061\076" +
    "\045\077\044\100\043\101\042\102\041\103\036\104\035" +
    "\105\032\106\223\107\221\110\217\111\214\112\202\113" +
    "\201\114\177\115\176\116\173\117\172\120\167\121\166" +
    "\122\144\123\141\124\140\125\136\126\135\127\133\130" +
    "\132\131\130\132\111\133\107\134\106\135\105\136\104" +
    "\137\103\140\102\141\101\142\060\143\057\144\056\145" +
    "\054\146\053\147\052\150\051\151\050\152\033\153\031" +
    "\154\030\155\026\156\230\157\225\160\224\161\222\162" +
    "\220\163\216\164\215\165\212\166\127\167\126\170\125" +
    "\171\124\172\123\173\122\175\231\176\074\177\213\200" +
    "\112\201\232\202\034\203\037\204\040\205\047\206\137" +
    "\207\206\210\203\211\153\212\147\213\227\214\152\215" +
    "\143\216\226\217\072\220\073\221\075\222\076\223\077" +
    "\224\100\225\055\226\207\227\131\230\210\231\211\237" +
    "\154\264\165\267\161\271\204\273\046\275\134\001\002" +
    "\000\004\235\u015a\001\002\000\u011c\016\uffda\017\uffda\020" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda" +
    "\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100" +
    "\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda" +
    "\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\114\uffda\115" +
    "\uffda\116\uffda\117\uffda\120\uffda\121\uffda\122\uffda\123\uffda" +
    "\124\uffda\125\uffda\126\uffda\127\uffda\130\uffda\131\uffda\132" +
    "\uffda\133\uffda\134\uffda\135\uffda\136\uffda\137\uffda\140\uffda" +
    "\141\uffda\142\uffda\143\uffda\144\uffda\145\uffda\146\uffda\147" +
    "\uffda\150\uffda\151\uffda\152\uffda\153\uffda\154\uffda\155\uffda" +
    "\156\uffda\157\uffda\160\uffda\161\uffda\162\uffda\163\uffda\164" +
    "\uffda\165\uffda\166\uffda\167\uffda\170\uffda\171\uffda\172\uffda" +
    "\173\uffda\175\uffda\176\uffda\177\uffda\200\uffda\201\uffda\202" +
    "\uffda\203\uffda\204\uffda\205\uffda\206\uffda\207\uffda\210\uffda" +
    "\211\uffda\212\uffda\213\uffda\214\uffda\215\uffda\216\uffda\217" +
    "\uffda\220\uffda\221\uffda\222\uffda\223\uffda\224\uffda\225\uffda" +
    "\226\uffda\227\uffda\230\uffda\231\uffda\234\uffda\235\uffda\237" +
    "\uffda\241\uffda\247\uffda\264\uffda\267\uffda\271\uffda\273\uffda" +
    "\274\uffda\275\uffda\001\002\000\004\233\u015c\001\002\000" +
    "\u0112\016\142\017\163\020\066\030\200\031\175\032\174" +
    "\033\171\034\170\035\027\036\025\037\024\040\023\041" +
    "\022\042\164\043\205\046\160\047\157\050\156\051\155" +
    "\052\151\053\150\054\146\055\145\056\121\057\120\060" +
    "\117\061\116\062\115\063\114\064\113\065\110\066\071" +
    "\067\070\070\067\071\065\072\064\073\063\074\062\075" +
    "\061\076\045\077\044\100\043\101\042\102\041\103\036" +
    "\104\035\105\032\106\223\107\221\110\217\111\214\112" +
    "\202\113\201\114\177\115\176\116\173\117\172\120\167" +
    "\121\166\122\144\123\141\124\140\125\136\126\135\127" +
    "\133\130\132\131\130\132\111\133\107\134\106\135\105" +
    "\136\104\137\103\140\102\141\101\142\060\143\057\144" +
    "\056\145\054\146\053\147\052\150\051\151\050\152\033" +
    "\153\031\154\030\155\026\156\230\157\225\160\224\161" +
    "\222\162\220\163\216\164\215\165\212\166\127\167\126" +
    "\170\125\171\124\172\123\173\122\175\231\176\074\177" +
    "\213\200\112\201\232\202\034\203\037\204\040\205\047" +
    "\206\137\207\206\210\203\211\153\212\147\213\227\214" +
    "\152\215\143\216\226\217\072\220\073\221\075\222\076" +
    "\223\077\224\100\225\055\226\207\227\131\230\210\231" +
    "\211\237\154\264\165\267\161\271\204\273\046\275\134" +
    "\001\002\000\006\234\uffdd\235\u015f\001\002\000\004\234" +
    "\u0160\001\002\000\u011c\016\uffdf\017\uffdf\020\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073" +
    "\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf\110" +
    "\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf\115\uffdf\116\uffdf" +
    "\117\uffdf\120\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125" +
    "\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf" +
    "\134\uffdf\135\uffdf\136\uffdf\137\uffdf\140\uffdf\141\uffdf\142" +
    "\uffdf\143\uffdf\144\uffdf\145\uffdf\146\uffdf\147\uffdf\150\uffdf" +
    "\151\uffdf\152\uffdf\153\uffdf\154\uffdf\155\uffdf\156\uffdf\157" +
    "\uffdf\160\uffdf\161\uffdf\162\uffdf\163\uffdf\164\uffdf\165\uffdf" +
    "\166\uffdf\167\uffdf\170\uffdf\171\uffdf\172\uffdf\173\uffdf\175" +
    "\uffdf\176\uffdf\177\uffdf\200\uffdf\201\uffdf\202\uffdf\203\uffdf" +
    "\204\uffdf\205\uffdf\206\uffdf\207\uffdf\210\uffdf\211\uffdf\212" +
    "\uffdf\213\uffdf\214\uffdf\215\uffdf\216\uffdf\217\uffdf\220\uffdf" +
    "\221\uffdf\222\uffdf\223\uffdf\224\uffdf\225\uffdf\226\uffdf\227" +
    "\uffdf\230\uffdf\231\uffdf\234\uffdf\235\uffdf\237\uffdf\241\uffdf" +
    "\247\uffdf\264\uffdf\267\uffdf\271\uffdf\273\uffdf\274\uffdf\275" +
    "\uffdf\001\002\000\u0112\016\142\017\163\020\066\030\200" +
    "\031\175\032\174\033\171\034\170\035\027\036\025\037" +
    "\024\040\023\041\022\042\164\043\205\046\160\047\157" +
    "\050\156\051\155\052\151\053\150\054\146\055\145\056" +
    "\121\057\120\060\117\061\116\062\115\063\114\064\113" +
    "\065\110\066\071\067\070\070\067\071\065\072\064\073" +
    "\063\074\062\075\061\076\045\077\044\100\043\101\042" +
    "\102\041\103\036\104\035\105\032\106\223\107\221\110" +
    "\217\111\214\112\202\113\201\114\177\115\176\116\173" +
    "\117\172\120\167\121\166\122\144\123\141\124\140\125" +
    "\136\126\135\127\133\130\132\131\130\132\111\133\107" +
    "\134\106\135\105\136\104\137\103\140\102\141\101\142" +
    "\060\143\057\144\056\145\054\146\053\147\052\150\051" +
    "\151\050\152\033\153\031\154\030\155\026\156\230\157" +
    "\225\160\224\161\222\162\220\163\216\164\215\165\212" +
    "\166\127\167\126\170\125\171\124\172\123\173\122\175" +
    "\231\176\074\177\213\200\112\201\232\202\034\203\037" +
    "\204\040\205\047\206\137\207\206\210\203\211\153\212" +
    "\147\213\227\214\152\215\143\216\226\217\072\220\073" +
    "\221\075\222\076\223\077\224\100\225\055\226\207\227" +
    "\131\230\210\231\211\237\154\264\165\267\161\271\204" +
    "\273\046\275\134\001\002\000\004\235\u0162\001\002\000" +
    "\u011c\016\uffdc\017\uffdc\020\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\113\uffdc\114\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc" +
    "\121\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127" +
    "\uffdc\130\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc\135\uffdc" +
    "\136\uffdc\137\uffdc\140\uffdc\141\uffdc\142\uffdc\143\uffdc\144" +
    "\uffdc\145\uffdc\146\uffdc\147\uffdc\150\uffdc\151\uffdc\152\uffdc" +
    "\153\uffdc\154\uffdc\155\uffdc\156\uffdc\157\uffdc\160\uffdc\161" +
    "\uffdc\162\uffdc\163\uffdc\164\uffdc\165\uffdc\166\uffdc\167\uffdc" +
    "\170\uffdc\171\uffdc\172\uffdc\173\uffdc\175\uffdc\176\uffdc\177" +
    "\uffdc\200\uffdc\201\uffdc\202\uffdc\203\uffdc\204\uffdc\205\uffdc" +
    "\206\uffdc\207\uffdc\210\uffdc\211\uffdc\212\uffdc\213\uffdc\214" +
    "\uffdc\215\uffdc\216\uffdc\217\uffdc\220\uffdc\221\uffdc\222\uffdc" +
    "\223\uffdc\224\uffdc\225\uffdc\226\uffdc\227\uffdc\230\uffdc\231" +
    "\uffdc\234\uffdc\235\uffdc\237\uffdc\241\uffdc\247\uffdc\264\uffdc" +
    "\267\uffdc\271\uffdc\273\uffdc\274\uffdc\275\uffdc\001\002\000" +
    "\u0112\016\142\017\163\020\066\030\200\031\175\032\174" +
    "\033\171\034\170\035\027\036\025\037\024\040\023\041" +
    "\022\042\164\043\205\046\160\047\157\050\156\051\155" +
    "\052\151\053\150\054\146\055\145\056\121\057\120\060" +
    "\117\061\116\062\115\063\114\064\113\065\110\066\071" +
    "\067\070\070\067\071\065\072\064\073\063\074\062\075" +
    "\061\076\045\077\044\100\043\101\042\102\041\103\036" +
    "\104\035\105\032\106\223\107\221\110\217\111\214\112" +
    "\202\113\201\114\177\115\176\116\173\117\172\120\167" +
    "\121\166\122\144\123\141\124\140\125\136\126\135\127" +
    "\133\130\132\131\130\132\111\133\107\134\106\135\105" +
    "\136\104\137\103\140\102\141\101\142\060\143\057\144" +
    "\056\145\054\146\053\147\052\150\051\151\050\152\033" +
    "\153\031\154\030\155\026\156\230\157\225\160\224\161" +
    "\222\162\220\163\216\164\215\165\212\166\127\167\126" +
    "\170\125\171\124\172\123\173\122\175\231\176\074\177" +
    "\213\200\112\201\232\202\034\203\037\204\040\205\047" +
    "\206\137\207\206\210\203\211\153\212\147\213\227\214" +
    "\152\215\143\216\226\217\072\220\073\221\075\222\076" +
    "\223\077\224\100\225\055\226\207\227\131\230\210\231" +
    "\211\237\154\264\165\267\161\271\204\273\046\275\134" +
    "\001\002\000\004\247\u0165\001\002\000\006\022\ufff2\232" +
    "\ufff2\001\002\000\012\004\370\005\371\006\373\007\374" +
    "\001\002\000\006\015\u0168\243\uffee\001\002\000\004\271" +
    "\015\001\002\000\004\243\uffed\001\002\000\006\026\u0177" +
    "\027\u0178\001\002\000\004\271\u016c\001\002\000\004\242" +
    "\u016d\001\002\000\006\243\u016e\271\015\001\002\000\004" +
    "\246\u0174\001\002\000\004\243\u0170\001\002\000\004\246" +
    "\u0171\001\002\000\u0112\016\142\017\163\020\066\030\200" +
    "\031\175\032\174\033\171\034\170\035\027\036\025\037" +
    "\024\040\023\041\022\042\164\043\205\046\160\047\157" +
    "\050\156\051\155\052\151\053\150\054\146\055\145\056" +
    "\121\057\120\060\117\061\116\062\115\063\114\064\113" +
    "\065\110\066\071\067\070\070\067\071\065\072\064\073" +
    "\063\074\062\075\061\076\045\077\044\100\043\101\042" +
    "\102\041\103\036\104\035\105\032\106\223\107\221\110" +
    "\217\111\214\112\202\113\201\114\177\115\176\116\173" +
    "\117\172\120\167\121\166\122\144\123\141\124\140\125" +
    "\136\126\135\127\133\130\132\131\130\132\111\133\107" +
    "\134\106\135\105\136\104\137\103\140\102\141\101\142" +
    "\060\143\057\144\056\145\054\146\053\147\052\150\051" +
    "\151\050\152\033\153\031\154\030\155\026\156\230\157" +
    "\225\160\224\161\222\162\220\163\216\164\215\165\212" +
    "\166\127\167\126\170\125\171\124\172\123\173\122\175" +
    "\231\176\074\177\213\200\112\201\232\202\034\203\037" +
    "\204\040\205\047\206\137\207\206\210\203\211\153\212" +
    "\147\213\227\214\152\215\143\216\226\217\072\220\073" +
    "\221\075\222\076\223\077\224\100\225\055\226\207\227" +
    "\131\230\210\231\211\237\154\264\165\267\161\271\204" +
    "\273\046\275\134\001\002\000\004\247\u0173\001\002\000" +
    "\006\022\uffef\232\uffef\001\002\000\u0112\016\142\017\163" +
    "\020\066\030\200\031\175\032\174\033\171\034\170\035" +
    "\027\036\025\037\024\040\023\041\022\042\164\043\205" +
    "\046\160\047\157\050\156\051\155\052\151\053\150\054" +
    "\146\055\145\056\121\057\120\060\117\061\116\062\115" +
    "\063\114\064\113\065\110\066\071\067\070\070\067\071" +
    "\065\072\064\073\063\074\062\075\061\076\045\077\044" +
    "\100\043\101\042\102\041\103\036\104\035\105\032\106" +
    "\223\107\221\110\217\111\214\112\202\113\201\114\177" +
    "\115\176\116\173\117\172\120\167\121\166\122\144\123" +
    "\141\124\140\125\136\126\135\127\133\130\132\131\130" +
    "\132\111\133\107\134\106\135\105\136\104\137\103\140" +
    "\102\141\101\142\060\143\057\144\056\145\054\146\053" +
    "\147\052\150\051\151\050\152\033\153\031\154\030\155" +
    "\026\156\230\157\225\160\224\161\222\162\220\163\216" +
    "\164\215\165\212\166\127\167\126\170\125\171\124\172" +
    "\123\173\122\175\231\176\074\177\213\200\112\201\232" +
    "\202\034\203\037\204\040\205\047\206\137\207\206\210" +
    "\203\211\153\212\147\213\227\214\152\215\143\216\226" +
    "\217\072\220\073\221\075\222\076\223\077\224\100\225" +
    "\055\226\207\227\131\230\210\231\211\237\154\264\165" +
    "\267\161\271\204\273\046\275\134\001\002\000\004\247" +
    "\u0176\001\002\000\006\022\ufff1\232\ufff1\001\002\000\004" +
    "\242\u017d\001\002\000\004\246\u017a\001\002\000\004\021" +
    "\ufffd\001\002\000\u0112\016\142\017\163\020\066\030\200" +
    "\031\175\032\174\033\171\034\170\035\027\036\025\037" +
    "\024\040\023\041\022\042\164\043\205\046\160\047\157" +
    "\050\156\051\155\052\151\053\150\054\146\055\145\056" +
    "\121\057\120\060\117\061\116\062\115\063\114\064\113" +
    "\065\110\066\071\067\070\070\067\071\065\072\064\073" +
    "\063\074\062\075\061\076\045\077\044\100\043\101\042" +
    "\102\041\103\036\104\035\105\032\106\223\107\221\110" +
    "\217\111\214\112\202\113\201\114\177\115\176\116\173" +
    "\117\172\120\167\121\166\122\144\123\141\124\140\125" +
    "\136\126\135\127\133\130\132\131\130\132\111\133\107" +
    "\134\106\135\105\136\104\137\103\140\102\141\101\142" +
    "\060\143\057\144\056\145\054\146\053\147\052\150\051" +
    "\151\050\152\033\153\031\154\030\155\026\156\230\157" +
    "\225\160\224\161\222\162\220\163\216\164\215\165\212" +
    "\166\127\167\126\170\125\171\124\172\123\173\122\175" +
    "\231\176\074\177\213\200\112\201\232\202\034\203\037" +
    "\204\040\205\047\206\137\207\206\210\203\211\153\212" +
    "\147\213\227\214\152\215\143\216\226\217\072\220\073" +
    "\221\075\222\076\223\077\224\100\225\055\226\207\227" +
    "\131\230\210\231\211\237\154\264\165\267\161\271\204" +
    "\273\046\275\134\001\002\000\004\247\u017c\001\002\000" +
    "\004\021\ufff5\001\002\000\004\243\u017e\001\002\000\004" +
    "\251\u017f\001\002\000\004\027\u0178\001\002\000\004\021" +
    "\ufffc\001\002\000\004\002\001\001\002\000\004\246\u0183" +
    "\001\002\000\u0114\016\142\017\163\020\066\030\200\031" +
    "\175\032\174\033\171\034\170\035\027\036\025\037\024" +
    "\040\023\041\022\042\164\043\205\046\160\047\157\050" +
    "\156\051\155\052\151\053\150\054\146\055\145\056\121" +
    "\057\120\060\117\061\116\062\115\063\114\064\113\065" +
    "\110\066\071\067\070\070\067\071\065\072\064\073\063" +
    "\074\062\075\061\076\045\077\044\100\043\101\042\102" +
    "\041\103\036\104\035\105\032\106\223\107\221\110\217" +
    "\111\214\112\202\113\201\114\177\115\176\116\173\117" +
    "\172\120\167\121\166\122\144\123\141\124\140\125\136" +
    "\126\135\127\133\130\132\131\130\132\111\133\107\134" +
    "\106\135\105\136\104\137\103\140\102\141\101\142\060" +
    "\143\057\144\056\145\054\146\053\147\052\150\051\151" +
    "\050\152\033\153\031\154\030\155\026\156\230\157\225" +
    "\160\224\161\222\162\220\163\216\164\215\165\212\166" +
    "\127\167\126\170\125\171\124\172\123\173\122\175\231" +
    "\176\074\177\213\200\112\201\232\202\034\203\037\204" +
    "\040\205\047\206\137\207\206\210\203\211\153\212\147" +
    "\213\227\214\152\215\143\216\226\217\072\220\073\221" +
    "\075\222\076\223\077\224\100\225\055\226\207\227\131" +
    "\230\210\231\211\237\154\247\u0184\264\165\267\161\271" +
    "\204\273\046\275\134\001\002\000\004\002\ufff3\001\002" +
    "\000\004\247\u0186\001\002\000\004\002\ufff4\001\002\000" +
    "\004\242\u0189\001\002\000\004\021\uffff\001\002\000\004" +
    "\243\u018a\001\002\000\004\251\u018b\001\002\000\004\027" +
    "\u0178\001\002\000\004\021\ufffe\001\002\000\u0100\030\200" +
    "\031\175\032\174\033\171\034\170\035\027\036\025\037" +
    "\024\040\023\041\022\042\164\043\205\046\160\047\157" +
    "\050\156\051\155\052\151\053\150\054\146\055\145\056" +
    "\121\057\120\060\117\061\116\062\115\063\114\064\113" +
    "\065\110\066\071\067\070\070\067\071\065\072\064\073" +
    "\063\074\062\075\061\076\045\077\044\100\043\101\042" +
    "\102\041\103\036\104\035\105\032\106\223\107\221\110" +
    "\217\111\214\112\202\113\201\114\177\115\176\116\173" +
    "\117\172\120\167\121\166\122\144\123\141\124\140\125" +
    "\136\126\135\127\133\130\132\131\130\132\111\133\107" +
    "\134\106\135\105\136\104\137\103\140\102\141\101\142" +
    "\060\143\057\144\056\145\054\146\053\147\052\150\051" +
    "\151\050\152\033\153\031\154\030\155\026\156\230\157" +
    "\225\160\224\161\222\162\220\163\216\164\215\165\212" +
    "\166\127\167\126\170\125\171\124\172\123\173\122\175" +
    "\231\176\074\177\213\200\112\201\232\202\034\203\037" +
    "\204\040\205\047\206\137\207\206\210\203\211\153\212" +
    "\147\213\227\214\152\215\143\216\226\217\072\220\073" +
    "\221\075\222\076\223\077\224\100\225\055\226\207\227" +
    "\131\230\210\231\211\001\002\000\u0114\016\142\017\163" +
    "\020\066\030\200\031\175\032\174\033\171\034\170\035" +
    "\027\036\025\037\024\040\023\041\022\042\164\043\205" +
    "\046\160\047\157\050\156\051\155\052\151\053\150\054" +
    "\146\055\145\056\121\057\120\060\117\061\116\062\115" +
    "\063\114\064\113\065\110\066\071\067\070\070\067\071" +
    "\065\072\064\073\063\074\062\075\061\076\045\077\044" +
    "\100\043\101\042\102\041\103\036\104\035\105\032\106" +
    "\223\107\221\110\217\111\214\112\202\113\201\114\177" +
    "\115\176\116\173\117\172\120\167\121\166\122\144\123" +
    "\141\124\140\125\136\126\135\127\133\130\132\131\130" +
    "\132\111\133\107\134\106\135\105\136\104\137\103\140" +
    "\102\141\101\142\060\143\057\144\056\145\054\146\053" +
    "\147\052\150\051\151\050\152\033\153\031\154\030\155" +
    "\026\156\230\157\225\160\224\161\222\162\220\163\216" +
    "\164\215\165\212\166\127\167\126\170\125\171\124\172" +
    "\123\173\122\175\231\176\074\177\213\200\112\201\232" +
    "\202\034\203\037\204\040\205\047\206\137\207\206\210" +
    "\203\211\153\212\147\213\227\214\152\215\143\216\226" +
    "\217\072\220\073\221\075\222\076\223\077\224\100\225" +
    "\055\226\207\227\131\230\210\231\211\237\154\247\u0195" +
    "\264\165\267\161\271\204\273\046\275\134\001\002\000" +
    "\004\252\u0190\001\002\000\006\024\u0193\025\u0191\001\002" +
    "\000\004\251\ufff6\001\002\000\004\251\u0194\001\002\000" +
    "\004\251\ufff7\001\002\000\u0114\016\ufff9\017\ufff9\020\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\046\ufff9" +
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
>>>>>>> origin/master
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9" +
    "\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107" +
    "\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\115\ufff9" +
    "\116\ufff9\117\ufff9\120\ufff9\121\ufff9\122\ufff9\123\ufff9\124" +
    "\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\132\ufff9" +
    "\133\ufff9\134\ufff9\135\ufff9\136\ufff9\137\ufff9\140\ufff9\141" +
    "\ufff9\142\ufff9\143\ufff9\144\ufff9\145\ufff9\146\ufff9\147\ufff9" +
    "\150\ufff9\151\ufff9\152\ufff9\153\ufff9\154\ufff9\155\ufff9\156" +
    "\ufff9\157\ufff9\160\ufff9\161\ufff9\162\ufff9\163\ufff9\164\ufff9" +
<<<<<<< Updated upstream
    "\165\ufff9\166\ufff9\167\ufff9\170\ufff9\171\ufff9\172\ufff9\173" +
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\165\ufff9\166\ufff9\167\ufff9\170\ufff9\171\ufff9\173\ufff9\174" +
=======
    "\165\ufff9\166\ufff9\167\ufff9\170\ufff9\171\ufff9\172\ufff9\173" +
>>>>>>> origin/master
=======
    "\165\ufff9\166\ufff9\167\ufff9\170\ufff9\171\ufff9\172\ufff9\173" +
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\ufff9\175\ufff9\176\ufff9\177\ufff9\200\ufff9\201\ufff9\202\ufff9" +
    "\203\ufff9\204\ufff9\205\ufff9\206\ufff9\207\ufff9\210\ufff9\211" +
    "\ufff9\212\ufff9\213\ufff9\214\ufff9\215\ufff9\216\ufff9\217\ufff9" +
    "\220\ufff9\221\ufff9\222\ufff9\223\ufff9\224\ufff9\225\ufff9\226" +
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\ufff9\227\ufff9\235\ufff9\246\ufff9\263\ufff9\266\ufff9\270\ufff9" +
    "\272\ufff9\274\ufff9\001\002\000\006\024\ufffb\025\ufffb\001" +
    "\002\000\006\251\u01b8\253\235\001\002\000\004\246\u01b7" +
    "\001\002\000\006\024\ufffa\025\ufffa\001\002\000\132\022" +
    "\u01b2\023\u01b0\026\250\027\247\030\246\031\245\032\244" +
    "\110\240\111\236\112\305\113\303\114\301\115\277\116" +
    "\276\117\275\120\272\121\267\122\266\123\265\124\264" +
    "\125\263\126\262\127\261\130\260\131\257\132\256\133" +
    "\255\134\254\135\253\136\252\137\251\140\243\141\242" +
    "\142\241\143\237\144\307\145\304\146\302\147\300\150" +
    "\274\151\273\152\271\153\270\267\311\001\002\000\004" +
    "\250\u01ba\001\002\000\u0110\016\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8" +
    "\110\ufff8\111\ufff8\112\ufff8\113\ufff8\114\ufff8\115\ufff8\116" +
    "\ufff8\117\ufff8\120\ufff8\121\ufff8\122\ufff8\123\ufff8\124\ufff8" +
    "\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\132\ufff8\133" +
    "\ufff8\134\ufff8\135\ufff8\136\ufff8\137\ufff8\140\ufff8\141\ufff8" +
    "\142\ufff8\143\ufff8\144\ufff8\145\ufff8\146\ufff8\147\ufff8\150" +
    "\ufff8\151\ufff8\152\ufff8\153\ufff8\154\ufff8\155\ufff8\156\ufff8" +
    "\157\ufff8\160\ufff8\161\ufff8\162\ufff8\163\ufff8\164\ufff8\165" +
    "\ufff8\166\ufff8\167\ufff8\170\ufff8\171\ufff8\173\ufff8\174\ufff8" +
    "\175\ufff8\176\ufff8\177\ufff8\200\ufff8\201\ufff8\202\ufff8\203" +
    "\ufff8\204\ufff8\205\ufff8\206\ufff8\207\ufff8\210\ufff8\211\ufff8" +
    "\212\ufff8\213\ufff8\214\ufff8\215\ufff8\216\ufff8\217\ufff8\220" +
    "\ufff8\221\ufff8\222\ufff8\223\ufff8\224\ufff8\225\ufff8\226\ufff8" +
    "\227\ufff8\235\ufff8\246\ufff8\263\ufff8\266\ufff8\270\ufff8\272" +
    "\ufff8\274\ufff8\001\002\000\004\002\000\001\002" });
=======
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\ufff9\227\ufff9\230\ufff9\231\ufff9\237\ufff9\247\ufff9\264\ufff9" +
    "\267\ufff9\271\ufff9\273\ufff9\275\ufff9\001\002\000\006\026" +
    "\ufffb\027\ufffb\001\002\000\006\252\u0199\254\237\001\002" +
    "\000\004\247\u0198\001\002\000\006\026\ufffa\027\ufffa\001" +
    "\002\000\132\024\u0193\025\u0191\030\252\031\251\032\250" +
    "\033\247\034\246\112\242\113\240\114\310\115\305\116" +
    "\303\117\301\120\300\121\277\122\273\123\271\124\270" +
    "\125\267\126\266\127\265\130\264\131\263\132\262\133" +
    "\261\134\260\135\257\136\256\137\255\140\254\141\253" +
    "\142\245\143\244\144\243\145\241\146\311\147\306\150" +
    "\304\151\302\152\276\153\275\154\274\155\272\270\313" +
    "\001\002\000\004\251\u019b\001\002\000\u0114\016\ufff8\017" +
    "\ufff8\020\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077" +
    "\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8" +
    "\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\114" +
    "\ufff8\115\ufff8\116\ufff8\117\ufff8\120\ufff8\121\ufff8\122\ufff8" +
    "\123\ufff8\124\ufff8\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131" +
    "\ufff8\132\ufff8\133\ufff8\134\ufff8\135\ufff8\136\ufff8\137\ufff8" +
    "\140\ufff8\141\ufff8\142\ufff8\143\ufff8\144\ufff8\145\ufff8\146" +
    "\ufff8\147\ufff8\150\ufff8\151\ufff8\152\ufff8\153\ufff8\154\ufff8" +
    "\155\ufff8\156\ufff8\157\ufff8\160\ufff8\161\ufff8\162\ufff8\163" +
    "\ufff8\164\ufff8\165\ufff8\166\ufff8\167\ufff8\170\ufff8\171\ufff8" +
    "\172\ufff8\173\ufff8\175\ufff8\176\ufff8\177\ufff8\200\ufff8\201" +
    "\ufff8\202\ufff8\203\ufff8\204\ufff8\205\ufff8\206\ufff8\207\ufff8" +
    "\210\ufff8\211\ufff8\212\ufff8\213\ufff8\214\ufff8\215\ufff8\216" +
    "\ufff8\217\ufff8\220\ufff8\221\ufff8\222\ufff8\223\ufff8\224\ufff8" +
    "\225\ufff8\226\ufff8\227\ufff8\230\ufff8\231\ufff8\237\ufff8\247" +
    "\ufff8\264\ufff8\267\ufff8\271\ufff8\273\ufff8\275\ufff8\001\002" +
    "\000\004\002\000\001\002" });
>>>>>>> origin/master

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
<<<<<<< Updated upstream
    "\000\u019a\000\004\003\003\001\001\000\002\001\001\000" +
    "\010\004\007\006\006\010\010\001\001\000\002\001\001" +
    "\000\004\007\u0187\001\001\000\004\005\u0180\001\001\000" +
    "\004\006\u0169\001\001\000\002\001\001\000\002\001\001" +
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\000\u01b9\000\004\003\003\001\001\000\002\001\001\000" +
    "\010\004\007\006\006\010\010\001\001\000\002\001\001" +
    "\000\004\007\u01a6\001\001\000\004\005\u019f\001\001\000" +
    "\004\006\u0188\001\001\000\002\001\001\000\002\001\001" +
=======
=======
>>>>>>> origin/master
    "\000\u019a\000\004\003\003\001\001\000\002\001\001\000" +
    "\010\004\007\006\006\010\010\001\001\000\002\001\001" +
    "\000\004\007\u0187\001\001\000\004\005\u0180\001\001\000" +
    "\004\006\u0169\001\001\000\002\001\001\000\002\001\001" +
<<<<<<< HEAD
>>>>>>> origin/master
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\000\004\027\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\233" +
    "\014\232\017\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
<<<<<<< Updated upstream
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u0106\014\232\017\161\001\001\000\002\001" +
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\001\000\002\001\001\000\002\001\001\000\010\012\u0128" +
    "\014\230\017\160\001\001\000\002\001\001\000\002\001" +
=======
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u0106\014\232\017\161\001\001\000\002\001" +
>>>>>>> origin/master
=======
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u0106\014\232\017\161\001\001\000\002\001" +
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\313\001\001\000\004\015\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
<<<<<<< Updated upstream
    "\000\006\020\337\026\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
=======
<<<<<<< HEAD
<<<<<<< HEAD
    "\000\002\001\001\000\010\020\341\026\336\032\345\001" +
=======
    "\000\006\020\337\026\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
>>>>>>> origin/master
>>>>>>> Stashed changes
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\347\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\350" +
    "\031\351\001\001\000\004\020\356\001\001\000\004\030" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\355\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
<<<<<<< Updated upstream
    "\001\000\004\025\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u010a\020\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0110\001\001" +
    "\000\002\001\001\000\010\012\u0112\014\232\017\161\001" +
    "\001\000\002\001\001\000\010\012\u0114\014\232\017\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0118\001\001\000\002\001\001\000\010" +
    "\012\u011a\014\232\017\161\001\001\000\002\001\001\000" +
    "\010\012\u011c\014\232\017\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\u012f\020\u012d\021\u012e\022\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0136\001\001\000\002\001\001\000\002\001" +
=======
<<<<<<< HEAD
    "\001\000\002\001\001\000\002\001\001\000\004\030\u0112" +
    "\001\001\000\002\001\001\000\006\020\364\032\365\001" +
    "\001\000\002\001\001\000\004\030\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\356\032\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u010a\001\001\000" +
    "\004\030\366\001\001\000\006\020\367\032\370\001\001" +
    "\000\012\030\375\031\371\032\374\033\u0106\001\001\000" +
    "\012\030\375\031\371\032\374\033\372\001\001\000\006" +
    "\030\u0103\032\u0104\001\001\000\004\030\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\376\032\377" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u0102\001\001\000\002\001\001\000\004" +
    "\020\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u010b\001\001\000\006\030" +
    "\u010d\031\u010e\001\001\000\002\001\001\000\006\020\376" +
    "\032\u0110\001\001\000\004\030\u0103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0113" +
    "\001\001\000\006\030\u0115\031\u0116\001\001\000\002\001" +
    "\001\000\004\020\376\001\001\000\004\030\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u011f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u012c\020\u012b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u012f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0132\001\001\000\002\001\001\000\010\012\u0134\014\230" +
    "\017\160\001\001\000\002\001\001\000\010\012\u0136\014" +
    "\230\017\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u013a\001\001\000\002\001" +
    "\001\000\010\012\u013c\014\230\017\160\001\001\000\002" +
    "\001\001\000\010\012\u013e\014\230\017\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\u0151\020\u014f\021" +
    "\u0150\022\u014c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0158\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u0151\021\u015d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u015f" +
    "\024\u015e\001\001\000\002\001\001\000\006\015\u0151\021" +
    "\u0160\001\001\000\006\023\u015f\024\u0161\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\u0164\014\230\017" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\u016a\014\230\017\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\u0170\021\u0150\022\u016f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\u0173\014\230\017" +
    "\160\001\001\000\004\035\u0174\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u0177\014\230\017\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u017b\014\230\017\160\001\001\000\004\034" +
    "\u017c\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\u017f\014\230\017\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u0182\014\230\017\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u0185\001" +
    "\001\000\002\001\001\000\004\027\u0187\001\001\000\002" +
    "\001\001\000\004\007\u0197\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u018d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\u0190\014" +
    "\230\017\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u0193\014\230\017\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u0199\014\230\017\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u019e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\u01a3" +
    "\014\230\017\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u01aa\001" +
    "\001\000\002\001\001\000\006\013\u01ac\014\u01ad\001\001" +
    "\000\010\012\u01b5\014\u01b4\017\160\001\001\000\002\001" +
    "\001\000\004\016\u01b0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\311\016\u01b8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });
=======
    "\001\000\004\025\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
>>>>>>> Stashed changes
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u012f\021" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\u013d\024\u013c\001" +
    "\001\000\002\001\001\000\006\015\u012f\021\u013e\001\001" +
    "\000\006\023\u013d\024\u013f\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u0142\014\232\017\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
<<<<<<< Updated upstream
=======
    "\006\015\u010a\020\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0110\001\001" +
    "\000\002\001\001\000\010\012\u0112\014\232\017\161\001" +
    "\001\000\002\001\001\000\010\012\u0114\014\232\017\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0118\001\001\000\002\001\001\000\010" +
    "\012\u011a\014\232\017\161\001\001\000\002\001\001\000" +
    "\010\012\u011c\014\232\017\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\u012f\020\u012d\021\u012e\022\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u012f\021" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\u013d\024\u013c\001" +
    "\001\000\002\001\001\000\006\015\u012f\021\u013e\001\001" +
    "\000\006\023\u013d\024\u013f\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u0142\014\232\017\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
>>>>>>> Stashed changes
    "\002\001\001\000\002\001\001\000\010\012\u0148\014\232" +
    "\017\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\u0151\021\u012e\022" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\u0154\014\232\017\161\001\001\000" +
    "\004\033\u0155\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u0158\014\232\017\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\u015c" +
    "\014\232\017\161\001\001\000\004\032\u015d\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\u0160\014\232" +
    "\017\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\u0163\014\232\017\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0166\001\001\000\002\001" +
    "\001\000\004\027\u0168\001\001\000\002\001\001\000\004" +
    "\007\u0178\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u016e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u0171\014\232\017\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\u0174" +
    "\014\232\017\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u017a\014\232\017\161\001\001\000\002\001" +
<<<<<<< Updated upstream
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u017f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\u0184\014\232\017\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u018b\001\001\000\002\001" +
    "\001\000\006\013\u018d\014\u018e\001\001\000\010\012\u0196" +
    "\014\u0195\017\161\001\001\000\002\001\001\000\004\016" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\313" +
    "\016\u0199\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });
=======
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u017f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\u0184\014\232\017\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u018b\001\001\000\002\001" +
    "\001\000\006\013\u018d\014\u018e\001\001\000\010\012\u0196" +
    "\014\u0195\017\161\001\001\000\002\001\001\000\004\016" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\313" +
    "\016\u0199\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });
>>>>>>> origin/master
=======
    "\000\006\020\337\026\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\347\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\350" +
    "\031\351\001\001\000\004\020\356\001\001\000\004\030" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\355\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u010a\020\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0110\001\001" +
    "\000\002\001\001\000\010\012\u0112\014\232\017\161\001" +
    "\001\000\002\001\001\000\010\012\u0114\014\232\017\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0118\001\001\000\002\001\001\000\010" +
    "\012\u011a\014\232\017\161\001\001\000\002\001\001\000" +
    "\010\012\u011c\014\232\017\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\u012f\020\u012d\021\u012e\022\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u012f\021" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\u013d\024\u013c\001" +
    "\001\000\002\001\001\000\006\015\u012f\021\u013e\001\001" +
    "\000\006\023\u013d\024\u013f\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u0142\014\232\017\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\u0148\014\232" +
    "\017\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\u0151\021\u012e\022" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\u0154\014\232\017\161\001\001\000" +
    "\004\033\u0155\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u0158\014\232\017\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\u015c" +
    "\014\232\017\161\001\001\000\004\032\u015d\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\u0160\014\232" +
    "\017\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\u0163\014\232\017\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0166\001\001\000\002\001" +
    "\001\000\004\027\u0168\001\001\000\002\001\001\000\004" +
    "\007\u0178\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u016e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u0171\014\232\017\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\u0174" +
    "\014\232\017\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\u017a\014\232\017\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u017f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\u0184\014\232\017\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u018b\001\001\000\002\001" +
    "\001\000\006\013\u018d\014\u018e\001\001\000\010\012\u0196" +
    "\014\u0195\017\161\001\001\000\002\001\001\000\004\016" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\313" +
    "\016\u0199\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });
>>>>>>> origin/master
>>>>>>> Stashed changes

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static TablaDatos tabla = new TablaDatos();
	static int estado;
	StringBuffer m = new StringBuffer("");
    static StringBuffer []vec=new StringBuffer[10];
    static int i=0;
//******************************************* 
   public void Documenta(int tipo)
   { m.append("Error de Sintaxis No."+tipo);
     ManejoDeErrores objeto=new ManejoDeErrores();
     String tip=objeto.Errores(tipo);
	  m.append("\nMensaje --> "+tip+"\n");
      vec[i++]=m;
     
   }
//*******************************************
   public void syntax_error(Symbol cur_token)
   { 
   	estado=((Symbol)stack.peek()).parse_state;
   	  ManejoDeErrores obj = new ManejoDeErrores();
      String m=obj.analizaToken(cur_token);
      System.err.println("\n\nSimbolo actual analizado: "+m+"-->"+cur_token);
      //System.err.println("\n\nSimbolo actual analizado: "+cur_token);

   }
//******************************************
   public void report_error(String message, Object info) 
   { if (info instanceof java_cup.runtime.Symbol)
     { java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
       if (s.left >= 0)
       { m.append("Linea "+ (s.left +1));   
         if (s.right >= 0)                    
          m.append(", Columna "+(s.right)+"\n");
       }
     }
   }
/**************METODO MAIN ********/
public static void main(String[] arg)		
 	{
	  /* Crea un objeto parser */
	  parser parserObj = new parser();
	  /* Asigna el Scanner */
	  Yylex miAnalizadorLexico = new Yylex(new InputStreamReader(System.in));
	  parserObj.setScanner(miAnalizadorLexico);
	  try{
		parserObj.parse();
		tabla.imprimir();
	  }
catch(Exception x){ 
	  parserObj.Documenta(estado);
  	  for(int j=0;j<i;j++)
		System.out.println(vec[j]);

	}

}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



methodsTable tablaMetodos = new methodsTable();
String codigo="";
String miCodigo="";
String errores="";
String retardos="";
String auxiliar="";
String losMetodos="";
String aux="";
String auxno="";
String aux2="";
String auxsw="";
String p2="";
String p1="";
String aux3="";
frijol f2;
String cadena_condiciones=" ";
String cadena_tipo="";
String cadena_parametros="";
String encadenamst="";

	private static Stack<String>p = new Stack<String>();
	private static Stack<String>pila2 = new Stack<String>();

	private static int actualTmp=0;

	private static String nuevaTmp() {
		return "tmp"+(++actualTmp);
	}

	private static int actualEtq=0;

	private static String nuevaEtq() {
		return "etqY"+(++actualEtq);
	}
	
	

	private String generarTerceto(String terceto) {
		String tmp = nuevaTmp();
		System.out.println("Terceto: "+tmp + terceto);
		return tmp;
	}

	private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2){
		BloqueCondicion etqs = new BloqueCondicion();
		etqs.etqVerdad = nuevaEtq();
		etqs.etqFalso = nuevaEtq();
		etqs.condicion = Rvalor1+condicion+Rvalor2;
		auxiliar="";
		/*
		*System.out.println("\t if" + Rvalor1 + condicion + Rvalor2 + "");
		*/
	System.out.println("\tif "+ Rvalor1 + condicion + Rvalor2 +" goto etq Vd "+ etqs.etqVerdad);
	//RESULT=Rvalor1 + condicion + Rvalor2;
    System.out.println("\tgoto etq Falso: "+ etqs.etqFalso);
		return etqs;
	}

	private BloqueCondicion generarCondicion(String condicion, String Rvalor2){
		BloqueCondicion etqs = new BloqueCondicion();
		etqs.condicion = condicion+Rvalor2;
		auxiliar="";
		/*
		*System.out.println("\t if" + Rvalor1 + condicion + Rvalor2 + "");
		*/
		return etqs;
	}
	private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2,String extra){
		BloqueCondicion etqs = new BloqueCondicion();
		
		etqs.condicion = Rvalor1+condicion+Rvalor2+extra;
		auxiliar="";
		return etqs;
	}




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 255: // puertost ::= PE3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 272: // puertost ::= PE3 
=======
          case 255: // puertost ::= PE3 
>>>>>>> origin/master
=======
          case 255: // puertost ::= PE3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pe3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe3+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 254: // puertost ::= PE2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 271: // puertost ::= PE2 
=======
          case 254: // puertost ::= PE2 
>>>>>>> origin/master
=======
          case 254: // puertost ::= PE2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pe2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe2+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 253: // puertost ::= PE1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 270: // puertost ::= PE1 
=======
          case 253: // puertost ::= PE1 
>>>>>>> origin/master
=======
          case 253: // puertost ::= PE1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe1+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 252: // puertost ::= PE0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 269: // puertost ::= PE0 
=======
          case 252: // puertost ::= PE0 
>>>>>>> origin/master
=======
          case 252: // puertost ::= PE0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pe0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe0+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 251: // puertost ::= PD7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 268: // puertost ::= PD7 
=======
          case 251: // puertost ::= PD7 
>>>>>>> origin/master
=======
          case 251: // puertost ::= PD7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd7+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 250: // puertost ::= PD6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 267: // puertost ::= PD6 
=======
          case 250: // puertost ::= PD6 
>>>>>>> origin/master
=======
          case 250: // puertost ::= PD6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd6+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 249: // puertost ::= PD5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 266: // puertost ::= PD5 
=======
          case 249: // puertost ::= PD5 
>>>>>>> origin/master
=======
          case 249: // puertost ::= PD5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd5+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 248: // puertost ::= PD4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 265: // puertost ::= PD4 
=======
          case 248: // puertost ::= PD4 
>>>>>>> origin/master
=======
          case 248: // puertost ::= PD4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd4+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 247: // puertost ::= PD3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 264: // puertost ::= PD3 
=======
          case 247: // puertost ::= PD3 
>>>>>>> origin/master
=======
          case 247: // puertost ::= PD3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd3+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 246: // puertost ::= PD2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 263: // puertost ::= PD2 
=======
          case 246: // puertost ::= PD2 
>>>>>>> origin/master
=======
          case 246: // puertost ::= PD2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd2+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 245: // puertost ::= PD1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 262: // puertost ::= PD1 
=======
          case 245: // puertost ::= PD1 
>>>>>>> origin/master
=======
          case 245: // puertost ::= PD1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd1+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 244: // puertost ::= PD0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 261: // puertost ::= PD0 
=======
          case 244: // puertost ::= PD0 
>>>>>>> origin/master
=======
          case 244: // puertost ::= PD0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd0+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 243: // puertost ::= PC7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 260: // puertost ::= PC7 
=======
          case 243: // puertost ::= PC7 
>>>>>>> origin/master
=======
          case 243: // puertost ::= PC7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 242: // puertost ::= PC6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 259: // puertost ::= PC6 
=======
          case 242: // puertost ::= PC6 
>>>>>>> origin/master
=======
          case 242: // puertost ::= PC6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc6+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 241: // puertost ::= PC5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 258: // puertost ::= PC5 
=======
          case 241: // puertost ::= PC5 
>>>>>>> origin/master
=======
          case 241: // puertost ::= PC5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc5+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 240: // puertost ::= PC4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 257: // puertost ::= PC4 
=======
          case 240: // puertost ::= PC4 
>>>>>>> origin/master
=======
          case 240: // puertost ::= PC4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc4+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 239: // puertost ::= PC3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 256: // puertost ::= PC3 
=======
          case 239: // puertost ::= PC3 
>>>>>>> origin/master
=======
          case 239: // puertost ::= PC3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc3+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 238: // puertost ::= PC2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 255: // puertost ::= PC2 
=======
          case 238: // puertost ::= PC2 
>>>>>>> origin/master
=======
          case 238: // puertost ::= PC2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc2+"";    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 237: // puertost ::= PC1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 254: // puertost ::= PC1 
=======
          case 237: // puertost ::= PC1 
>>>>>>> origin/master
=======
          case 237: // puertost ::= PC1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc1+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 236: // puertost ::= PC0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 253: // puertost ::= PC0 
=======
          case 236: // puertost ::= PC0 
>>>>>>> origin/master
=======
          case 236: // puertost ::= PC0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc0+"";    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 235: // puertost ::= PB7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 252: // puertost ::= PB7 
=======
          case 235: // puertost ::= PB7 
>>>>>>> origin/master
=======
          case 235: // puertost ::= PB7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 234: // puertost ::= PB6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 251: // puertost ::= PB6 
=======
          case 234: // puertost ::= PB6 
>>>>>>> origin/master
=======
          case 234: // puertost ::= PB6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb6+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 233: // puertost ::= PB5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 250: // puertost ::= PB5 
=======
          case 233: // puertost ::= PB5 
>>>>>>> origin/master
=======
          case 233: // puertost ::= PB5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb5+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 232: // puertost ::= PB4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 249: // puertost ::= PB4 
=======
          case 232: // puertost ::= PB4 
>>>>>>> origin/master
=======
          case 232: // puertost ::= PB4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb4+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 231: // puertost ::= PB3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 248: // puertost ::= PB3 
=======
          case 231: // puertost ::= PB3 
>>>>>>> origin/master
=======
          case 231: // puertost ::= PB3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb3+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 230: // puertost ::= PB2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 247: // puertost ::= PB2 
=======
          case 230: // puertost ::= PB2 
>>>>>>> origin/master
=======
          case 230: // puertost ::= PB2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb2+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 229: // puertost ::= PB1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 246: // puertost ::= PB1 
=======
          case 229: // puertost ::= PB1 
>>>>>>> origin/master
=======
          case 229: // puertost ::= PB1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb1+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 228: // puertost ::= PB0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 245: // puertost ::= PB0 
=======
          case 228: // puertost ::= PB0 
>>>>>>> origin/master
=======
          case 228: // puertost ::= PB0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb0+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 227: // puertost ::= PA7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 244: // puertost ::= PA7 
=======
          case 227: // puertost ::= PA7 
>>>>>>> origin/master
=======
          case 227: // puertost ::= PA7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 226: // puertost ::= PA6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 243: // puertost ::= PA6 
=======
          case 226: // puertost ::= PA6 
>>>>>>> origin/master
=======
          case 226: // puertost ::= PA6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa6+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 225: // puertost ::= PA5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 242: // puertost ::= PA5 
=======
          case 225: // puertost ::= PA5 
>>>>>>> origin/master
=======
          case 225: // puertost ::= PA5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa5+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 224: // puertost ::= PA4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 241: // puertost ::= PA4 
=======
          case 224: // puertost ::= PA4 
>>>>>>> origin/master
=======
          case 224: // puertost ::= PA4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa4+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 223: // puertost ::= PA3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 240: // puertost ::= PA3 
=======
          case 223: // puertost ::= PA3 
>>>>>>> origin/master
=======
          case 223: // puertost ::= PA3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa3+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 222: // puertost ::= PA2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 239: // puertost ::= PA2 
=======
          case 222: // puertost ::= PA2 
>>>>>>> origin/master
=======
          case 222: // puertost ::= PA2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa2+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 221: // puertost ::= PA1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 238: // puertost ::= PA1 
=======
          case 221: // puertost ::= PA1 
>>>>>>> origin/master
=======
          case 221: // puertost ::= PA1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa1+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 220: // puertost ::= PA0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 237: // puertost ::= PA0 
=======
          case 220: // puertost ::= PA0 
>>>>>>> origin/master
=======
          case 220: // puertost ::= PA0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa0+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 219: // puertost ::= PE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 236: // puertost ::= PE 
=======
          case 219: // puertost ::= PE 
>>>>>>> origin/master
=======
          case 219: // puertost ::= PE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=pe+"";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 218: // puertost ::= PD 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 235: // puertost ::= PD 
=======
          case 218: // puertost ::= PD 
>>>>>>> origin/master
=======
          case 218: // puertost ::= PD 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 217: // puertost ::= PC 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 234: // puertost ::= PC 
=======
          case 217: // puertost ::= PC 
>>>>>>> origin/master
=======
          case 217: // puertost ::= PC 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc+"";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 216: // puertost ::= PB 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 233: // puertost ::= PB 
=======
          case 216: // puertost ::= PB 
>>>>>>> origin/master
=======
          case 216: // puertost ::= PB 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pb+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 215: // puertost ::= PA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 232: // puertost ::= PA 
=======
          case 215: // puertost ::= PA 
>>>>>>> origin/master
=======
          case 215: // puertost ::= PA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 214: // puertos ::= ADCON1_VCFG0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 231: // puertos ::= ADCON1_VCFG0 
=======
          case 214: // puertos ::= ADCON1_VCFG0 
>>>>>>> origin/master
=======
          case 214: // puertos ::= ADCON1_VCFG0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcg0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcg0 + "=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 213: // puertos ::= ADCON1_VCFG1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 230: // puertos ::= ADCON1_VCFG1 
=======
          case 213: // puertos ::= ADCON1_VCFG1 
>>>>>>> origin/master
=======
          case 213: // puertos ::= ADCON1_VCFG1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcg1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcg1 + "=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 212: // puertos ::= ADCON1_ADFM 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 229: // puertos ::= ADCON1_ADFM 
=======
          case 212: // puertos ::= ADCON1_ADFM 
>>>>>>> origin/master
=======
          case 212: // puertos ::= ADCON1_ADFM 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adc1fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adc1fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adc1fm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adc1fm + "=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 211: // puertos ::= ADCON0_ADON 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 228: // puertos ::= ADCON0_ADON 
=======
          case 211: // puertos ::= ADCON0_ADON 
>>>>>>> origin/master
=======
          case 211: // puertos ::= ADCON0_ADON 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcadonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcadonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcadon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcadon+ " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 210: // puertos ::= ADCON0_GO 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 227: // puertos ::= ADCON0_GO 
=======
          case 210: // puertos ::= ADCON0_GO 
>>>>>>> origin/master
=======
          case 210: // puertos ::= ADCON0_GO 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcgoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcgoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcgo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcgo + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 209: // puertos ::= ADCON0_CHS0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 226: // puertos ::= ADCON0_CHS0 
=======
          case 209: // puertos ::= ADCON0_CHS0 
>>>>>>> origin/master
=======
          case 209: // puertos ::= ADCON0_CHS0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcs0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 208: // puertos ::= ADCON0_CHS1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 225: // puertos ::= ADCON0_CHS1 
=======
          case 208: // puertos ::= ADCON0_CHS1 
>>>>>>> origin/master
=======
          case 208: // puertos ::= ADCON0_CHS1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 207: // puertos ::= ADCON0_CHS2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 224: // puertos ::= ADCON0_CHS2 
=======
          case 207: // puertos ::= ADCON0_CHS2 
>>>>>>> origin/master
=======
          case 207: // puertos ::= ADCON0_CHS2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs2 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 206: // puertos ::= ADCON0_CHS3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 223: // puertos ::= ADCON0_CHS3 
=======
          case 206: // puertos ::= ADCON0_CHS3 
>>>>>>> origin/master
=======
          case 206: // puertos ::= ADCON0_CHS3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcs3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs3 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 205: // puertos ::= ADCON0_ADCS0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 222: // puertos ::= ADCON0_ADCS0 
=======
          case 205: // puertos ::= ADCON0_ADCS0 
>>>>>>> origin/master
=======
          case 205: // puertos ::= ADCON0_ADCS0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcs0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 204: // puertos ::= ADCON0_ADCS1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 221: // puertos ::= ADCON0_ADCS1 
=======
          case 204: // puertos ::= ADCON0_ADCS1 
>>>>>>> origin/master
=======
          case 204: // puertos ::= ADCON0_ADCS1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int adcs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 203: // puertos ::= OPTIONREG_RBPU 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 220: // puertos ::= OPTIONREG_RBPU 
=======
          case 203: // puertos ::= OPTIONREG_RBPU 
>>>>>>> origin/master
=======
          case 203: // puertos ::= OPTIONREG_RBPU 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int oprbpuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oprbpuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object oprbpu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = oprbpu + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 202: // puertos ::= OPTIONREG_PS0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 219: // puertos ::= OPTIONREG_PS0 
=======
          case 202: // puertos ::= OPTIONREG_PS0 
>>>>>>> origin/master
=======
          case 202: // puertos ::= OPTIONREG_PS0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int opps0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opps0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opps0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opps0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 201: // puertos ::= OPTIONREG_PS1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 218: // puertos ::= OPTIONREG_PS1 
=======
          case 201: // puertos ::= OPTIONREG_PS1 
>>>>>>> origin/master
=======
          case 201: // puertos ::= OPTIONREG_PS1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int opps1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opps1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opps1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opps1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 200: // puertos ::= OPTIONREG_PS2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 217: // puertos ::= OPTIONREG_PS2 
=======
          case 200: // puertos ::= OPTIONREG_PS2 
>>>>>>> origin/master
=======
          case 200: // puertos ::= OPTIONREG_PS2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int opps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opps2 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 199: // puertos ::= OPTIONREG_PSA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 216: // puertos ::= OPTIONREG_PSA 
=======
          case 199: // puertos ::= OPTIONREG_PSA 
>>>>>>> origin/master
=======
          case 199: // puertos ::= OPTIONREG_PSA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int oppsaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oppsaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object oppsa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = oppsa + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 198: // puertos ::= OPTIONREG_T0SE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 215: // puertos ::= OPTIONREG_T0SE 
=======
          case 198: // puertos ::= OPTIONREG_T0SE 
>>>>>>> origin/master
=======
          case 198: // puertos ::= OPTIONREG_T0SE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int opt0seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opt0seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opt0se = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opt0se + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 197: // puertos ::= OPTIONREG_T0CS 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 214: // puertos ::= OPTIONREG_T0CS 
=======
          case 197: // puertos ::= OPTIONREG_T0CS 
>>>>>>> origin/master
=======
          case 197: // puertos ::= OPTIONREG_T0CS 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int opt0csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opt0csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opt0cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opt0cs + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 196: // puertos ::= OPTIONREG_PS 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 213: // puertos ::= OPTIONREG_PS 
=======
          case 196: // puertos ::= OPTIONREG_PS 
>>>>>>> origin/master
=======
          case 196: // puertos ::= OPTIONREG_PS 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int oppsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oppsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opps + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 195: // puertos ::= OPTIONREG_INTEDG 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 212: // puertos ::= OPTIONREG_INTEDG 
=======
          case 195: // puertos ::= OPTIONREG_INTEDG 
>>>>>>> origin/master
=======
          case 195: // puertos ::= OPTIONREG_INTEDG 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int opintedgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opintedgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opintedg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opintedg + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 194: // puertos ::= INTCONRBIF 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 211: // puertos ::= INTCONRBIF 
=======
          case 194: // puertos ::= INTCONRBIF 
>>>>>>> origin/master
=======
          case 194: // puertos ::= INTCONRBIF 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intrbifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intrbifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intrbif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intrbif + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 193: // puertos ::= INTCONINTF 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 210: // puertos ::= INTCONINTF 
=======
          case 193: // puertos ::= INTCONINTF 
>>>>>>> origin/master
=======
          case 193: // puertos ::= INTCONINTF 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intintfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intintfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intintf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intintf + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 192: // puertos ::= INTCONT0IF 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 209: // puertos ::= INTCONT0IF 
=======
          case 192: // puertos ::= INTCONT0IF 
>>>>>>> origin/master
=======
          case 192: // puertos ::= INTCONT0IF 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intt0ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intt0ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intt0if = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intt0if + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 191: // puertos ::= INTCONRBIE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 208: // puertos ::= INTCONRBIE 
=======
          case 191: // puertos ::= INTCONRBIE 
>>>>>>> origin/master
=======
          case 191: // puertos ::= INTCONRBIE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intrbieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intrbieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intrbie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intrbie + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 190: // puertos ::= INTCONINTE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 207: // puertos ::= INTCONINTE 
=======
          case 190: // puertos ::= INTCONINTE 
>>>>>>> origin/master
=======
          case 190: // puertos ::= INTCONINTE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intinteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intinteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intinte = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intinte + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 189: // puertos ::= INTCONT0IE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 206: // puertos ::= INTCONT0IE 
=======
          case 189: // puertos ::= INTCONT0IE 
>>>>>>> origin/master
=======
          case 189: // puertos ::= INTCONT0IE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intt0ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intt0ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intt0ie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intt0ie + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 188: // puertos ::= INTCONPEIE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 205: // puertos ::= INTCONPEIE 
=======
          case 188: // puertos ::= INTCONPEIE 
>>>>>>> origin/master
=======
          case 188: // puertos ::= INTCONPEIE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intpeieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intpeieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intpeie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intpeie + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 187: // puertos ::= INTCONGIE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 204: // puertos ::= INTCONGIE 
=======
          case 187: // puertos ::= INTCONGIE 
>>>>>>> origin/master
=======
          case 187: // puertos ::= INTCONGIE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intgieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intgieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intgie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intgie + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 186: // puertos ::= ANSELH5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 203: // puertos ::= ANSELH5 
=======
          case 186: // puertos ::= ANSELH5 
>>>>>>> origin/master
=======
          case 186: // puertos ::= ANSELH5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int anselh5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh5 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 185: // puertos ::= ANSELH4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 202: // puertos ::= ANSELH4 
=======
          case 185: // puertos ::= ANSELH4 
>>>>>>> origin/master
=======
          case 185: // puertos ::= ANSELH4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int anselh4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh4 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 184: // puertos ::= ANSELH3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 201: // puertos ::= ANSELH3 
=======
          case 184: // puertos ::= ANSELH3 
>>>>>>> origin/master
=======
          case 184: // puertos ::= ANSELH3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int anselh3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh3 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 183: // puertos ::= ANSELH2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 200: // puertos ::= ANSELH2 
=======
          case 183: // puertos ::= ANSELH2 
>>>>>>> origin/master
=======
          case 183: // puertos ::= ANSELH2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int anselh2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh2 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 182: // puertos ::= ANSELH1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 199: // puertos ::= ANSELH1 
=======
          case 182: // puertos ::= ANSELH1 
>>>>>>> origin/master
=======
          case 182: // puertos ::= ANSELH1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int anselh1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 181: // puertos ::= ANSELH0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 198: // puertos ::= ANSELH0 
=======
          case 181: // puertos ::= ANSELH0 
>>>>>>> origin/master
=======
          case 181: // puertos ::= ANSELH0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int anselh0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 180: // puertos ::= ANSEL7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 197: // puertos ::= ANSEL7 
=======
          case 180: // puertos ::= ANSEL7 
>>>>>>> origin/master
=======
          case 180: // puertos ::= ANSEL7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ansel7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel7 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 179: // puertos ::= ANSEL6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 196: // puertos ::= ANSEL6 
=======
          case 179: // puertos ::= ANSEL6 
>>>>>>> origin/master
=======
          case 179: // puertos ::= ANSEL6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ansel6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel6 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 178: // puertos ::= ANSEL5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 195: // puertos ::= ANSEL5 
=======
          case 178: // puertos ::= ANSEL5 
>>>>>>> origin/master
=======
          case 178: // puertos ::= ANSEL5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ansel5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel5 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 177: // puertos ::= ANSEL4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 194: // puertos ::= ANSEL4 
=======
          case 177: // puertos ::= ANSEL4 
>>>>>>> origin/master
=======
          case 177: // puertos ::= ANSEL4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ansel4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel4 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 176: // puertos ::= ANSEL3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 193: // puertos ::= ANSEL3 
=======
          case 176: // puertos ::= ANSEL3 
>>>>>>> origin/master
=======
          case 176: // puertos ::= ANSEL3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ansel3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel3 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 175: // puertos ::= ANSEL2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 192: // puertos ::= ANSEL2 
=======
          case 175: // puertos ::= ANSEL2 
>>>>>>> origin/master
=======
          case 175: // puertos ::= ANSEL2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ansel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel2 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 174: // puertos ::= ANSEL1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 191: // puertos ::= ANSEL1 
=======
          case 174: // puertos ::= ANSEL1 
>>>>>>> origin/master
=======
          case 174: // puertos ::= ANSEL1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ansel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 173: // puertos ::= ANSEL0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 190: // puertos ::= ANSEL0 
=======
          case 173: // puertos ::= ANSEL0 
>>>>>>> origin/master
=======
          case 173: // puertos ::= ANSEL0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ansel0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 172: // puertos ::= PE3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 189: // puertos ::= PE3 
=======
          case 172: // puertos ::= PE3 
>>>>>>> origin/master
=======
          case 172: // puertos ::= PE3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pe3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe3+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 171: // puertos ::= PE2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 188: // puertos ::= PE2 
=======
          case 171: // puertos ::= PE2 
>>>>>>> origin/master
=======
          case 171: // puertos ::= PE2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pe2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe2+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 170: // puertos ::= PE1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 187: // puertos ::= PE1 
=======
          case 170: // puertos ::= PE1 
>>>>>>> origin/master
=======
          case 170: // puertos ::= PE1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe1+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 169: // puertos ::= PE0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 186: // puertos ::= PE0 
=======
          case 169: // puertos ::= PE0 
>>>>>>> origin/master
=======
          case 169: // puertos ::= PE0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pe0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe0+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 168: // puertos ::= PD7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 185: // puertos ::= PD7 
=======
          case 168: // puertos ::= PD7 
>>>>>>> origin/master
=======
          case 168: // puertos ::= PD7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pd7+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 167: // puertos ::= PD6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 184: // puertos ::= PD6 
=======
          case 167: // puertos ::= PD6 
>>>>>>> origin/master
=======
          case 167: // puertos ::= PD6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd6+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 166: // puertos ::= PD5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 183: // puertos ::= PD5 
=======
          case 166: // puertos ::= PD5 
>>>>>>> origin/master
=======
          case 166: // puertos ::= PD5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		   RESULT=pd5+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 165: // puertos ::= PD4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 182: // puertos ::= PD4 
=======
          case 165: // puertos ::= PD4 
>>>>>>> origin/master
=======
          case 165: // puertos ::= PD4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd4+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 164: // puertos ::= PD3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 181: // puertos ::= PD3 
=======
          case 164: // puertos ::= PD3 
>>>>>>> origin/master
=======
          case 164: // puertos ::= PD3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pd3+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 163: // puertos ::= PD2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 180: // puertos ::= PD2 
=======
          case 163: // puertos ::= PD2 
>>>>>>> origin/master
=======
          case 163: // puertos ::= PD2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		   RESULT=pd2+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 162: // puertos ::= PD1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 179: // puertos ::= PD1 
=======
          case 162: // puertos ::= PD1 
>>>>>>> origin/master
=======
          case 162: // puertos ::= PD1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd1+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 161: // puertos ::= PD0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 178: // puertos ::= PD0 
=======
          case 161: // puertos ::= PD0 
>>>>>>> origin/master
=======
          case 161: // puertos ::= PD0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pd0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pd0+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 160: // puertos ::= PC7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 177: // puertos ::= PC7 
=======
          case 160: // puertos ::= PC7 
>>>>>>> origin/master
=======
          case 160: // puertos ::= PC7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		     RESULT=pc7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 159: // puertos ::= PC6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 176: // puertos ::= PC6 
=======
          case 159: // puertos ::= PC6 
>>>>>>> origin/master
=======
          case 159: // puertos ::= PC6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pc6+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 158: // puertos ::= PC5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 175: // puertos ::= PC5 
=======
          case 158: // puertos ::= PC5 
>>>>>>> origin/master
=======
          case 158: // puertos ::= PC5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc5+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 157: // puertos ::= PC4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 174: // puertos ::= PC4 
=======
          case 157: // puertos ::= PC4 
>>>>>>> origin/master
=======
          case 157: // puertos ::= PC4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc4+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 156: // puertos ::= PC3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 173: // puertos ::= PC3 
=======
          case 156: // puertos ::= PC3 
>>>>>>> origin/master
=======
          case 156: // puertos ::= PC3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc3+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 155: // puertos ::= PC2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 172: // puertos ::= PC2 
=======
          case 155: // puertos ::= PC2 
>>>>>>> origin/master
=======
          case 155: // puertos ::= PC2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc2+"=";    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 154: // puertos ::= PC1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 171: // puertos ::= PC1 
=======
          case 154: // puertos ::= PC1 
>>>>>>> origin/master
=======
          case 154: // puertos ::= PC1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc1+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 153: // puertos ::= PC0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 170: // puertos ::= PC0 
=======
          case 153: // puertos ::= PC0 
>>>>>>> origin/master
=======
          case 153: // puertos ::= PC0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc0+"=";    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 152: // puertos ::= PB7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 169: // puertos ::= PB7 
=======
          case 152: // puertos ::= PB7 
>>>>>>> origin/master
=======
          case 152: // puertos ::= PB7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 151: // puertos ::= PB6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 168: // puertos ::= PB6 
=======
          case 151: // puertos ::= PB6 
>>>>>>> origin/master
=======
          case 151: // puertos ::= PB6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb6+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 150: // puertos ::= PB5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 167: // puertos ::= PB5 
=======
          case 150: // puertos ::= PB5 
>>>>>>> origin/master
=======
          case 150: // puertos ::= PB5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb5+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 149: // puertos ::= PB4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 166: // puertos ::= PB4 
=======
          case 149: // puertos ::= PB4 
>>>>>>> origin/master
=======
          case 149: // puertos ::= PB4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb4+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 148: // puertos ::= PB3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 165: // puertos ::= PB3 
=======
          case 148: // puertos ::= PB3 
>>>>>>> origin/master
=======
          case 148: // puertos ::= PB3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb3+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 147: // puertos ::= PB2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 164: // puertos ::= PB2 
=======
          case 147: // puertos ::= PB2 
>>>>>>> origin/master
=======
          case 147: // puertos ::= PB2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb2+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 146: // puertos ::= PB1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 163: // puertos ::= PB1 
=======
          case 146: // puertos ::= PB1 
>>>>>>> origin/master
=======
          case 146: // puertos ::= PB1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb1+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 145: // puertos ::= PB0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 162: // puertos ::= PB0 
=======
          case 145: // puertos ::= PB0 
>>>>>>> origin/master
=======
          case 145: // puertos ::= PB0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb0+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 144: // puertos ::= PA7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 161: // puertos ::= PA7 
=======
          case 144: // puertos ::= PA7 
>>>>>>> origin/master
=======
          case 144: // puertos ::= PA7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	RESULT=pa7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 143: // puertos ::= PA6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 160: // puertos ::= PA6 
=======
          case 143: // puertos ::= PA6 
>>>>>>> origin/master
=======
          case 143: // puertos ::= PA6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa6+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 142: // puertos ::= PA5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 159: // puertos ::= PA5 
=======
          case 142: // puertos ::= PA5 
>>>>>>> origin/master
=======
          case 142: // puertos ::= PA5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 141: // puertos ::= PA4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 158: // puertos ::= PA4 
=======
          case 141: // puertos ::= PA4 
>>>>>>> origin/master
=======
          case 141: // puertos ::= PA4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  	RESULT=pa4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 140: // puertos ::= PA3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 157: // puertos ::= PA3 
=======
          case 140: // puertos ::= PA3 
>>>>>>> origin/master
=======
          case 140: // puertos ::= PA3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 139: // puertos ::= PA2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 156: // puertos ::= PA2 
=======
          case 139: // puertos ::= PA2 
>>>>>>> origin/master
=======
          case 139: // puertos ::= PA2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 138: // puertos ::= PA1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 155: // puertos ::= PA1 
=======
          case 138: // puertos ::= PA1 
>>>>>>> origin/master
=======
          case 138: // puertos ::= PA1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 137: // puertos ::= PA0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 154: // puertos ::= PA0 
=======
          case 137: // puertos ::= PA0 
>>>>>>> origin/master
=======
          case 137: // puertos ::= PA0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pa0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 136: // puertos ::= TE3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 153: // puertos ::= TE3 
=======
          case 136: // puertos ::= TE3 
>>>>>>> origin/master
=======
          case 136: // puertos ::= TE3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int te3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 135: // puertos ::= TE2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 152: // puertos ::= TE2 
=======
          case 135: // puertos ::= TE2 
>>>>>>> origin/master
=======
          case 135: // puertos ::= TE2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int te2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 134: // puertos ::= TE1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 151: // puertos ::= TE1 
=======
          case 134: // puertos ::= TE1 
>>>>>>> origin/master
=======
          case 134: // puertos ::= TE1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int te1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 133: // puertos ::= TE0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 150: // puertos ::= TE0 
=======
          case 133: // puertos ::= TE0 
>>>>>>> origin/master
=======
          case 133: // puertos ::= TE0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int te0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 132: // puertos ::= TD7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 149: // puertos ::= TD7 
=======
          case 132: // puertos ::= TD7 
>>>>>>> origin/master
=======
          case 132: // puertos ::= TD7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int td7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 131: // puertos ::= TD6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 148: // puertos ::= TD6 
=======
          case 131: // puertos ::= TD6 
>>>>>>> origin/master
=======
          case 131: // puertos ::= TD6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int td6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 130: // puertos ::= TD5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 147: // puertos ::= TD5 
=======
          case 130: // puertos ::= TD5 
>>>>>>> origin/master
=======
          case 130: // puertos ::= TD5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int td5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 129: // puertos ::= TD4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 146: // puertos ::= TD4 
=======
          case 129: // puertos ::= TD4 
>>>>>>> origin/master
=======
          case 129: // puertos ::= TD4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int td4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 128: // puertos ::= TD3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 145: // puertos ::= TD3 
=======
          case 128: // puertos ::= TD3 
>>>>>>> origin/master
=======
          case 128: // puertos ::= TD3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int td3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 127: // puertos ::= TD2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 144: // puertos ::= TD2 
=======
          case 127: // puertos ::= TD2 
>>>>>>> origin/master
=======
          case 127: // puertos ::= TD2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int td2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 126: // puertos ::= TD1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 143: // puertos ::= TD1 
=======
          case 126: // puertos ::= TD1 
>>>>>>> origin/master
=======
          case 126: // puertos ::= TD1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int td1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 125: // puertos ::= TD0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 142: // puertos ::= TD0 
=======
          case 125: // puertos ::= TD0 
>>>>>>> origin/master
=======
          case 125: // puertos ::= TD0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int td0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 124: // puertos ::= TC7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 141: // puertos ::= TC7 
=======
          case 124: // puertos ::= TC7 
>>>>>>> origin/master
=======
          case 124: // puertos ::= TC7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 123: // puertos ::= TC6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 140: // puertos ::= TC6 
=======
          case 123: // puertos ::= TC6 
>>>>>>> origin/master
=======
          case 123: // puertos ::= TC6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 122: // puertos ::= TC5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 139: // puertos ::= TC5 
=======
          case 122: // puertos ::= TC5 
>>>>>>> origin/master
=======
          case 122: // puertos ::= TC5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 121: // puertos ::= TC4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 138: // puertos ::= TC4 
=======
          case 121: // puertos ::= TC4 
>>>>>>> origin/master
=======
          case 121: // puertos ::= TC4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 120: // puertos ::= TC3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 137: // puertos ::= TC3 
=======
          case 120: // puertos ::= TC3 
>>>>>>> origin/master
=======
          case 120: // puertos ::= TC3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 119: // puertos ::= TC2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 136: // puertos ::= TC2 
=======
          case 119: // puertos ::= TC2 
>>>>>>> origin/master
=======
          case 119: // puertos ::= TC2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 118: // puertos ::= TC1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 135: // puertos ::= TC1 
=======
          case 118: // puertos ::= TC1 
>>>>>>> origin/master
=======
          case 118: // puertos ::= TC1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 117: // puertos ::= TC0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 134: // puertos ::= TC0 
=======
          case 117: // puertos ::= TC0 
>>>>>>> origin/master
=======
          case 117: // puertos ::= TC0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 116: // puertos ::= TB7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 133: // puertos ::= TB7 
=======
          case 116: // puertos ::= TB7 
>>>>>>> origin/master
=======
          case 116: // puertos ::= TB7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 115: // puertos ::= TB6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 132: // puertos ::= TB6 
=======
          case 115: // puertos ::= TB6 
>>>>>>> origin/master
=======
          case 115: // puertos ::= TB6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 114: // puertos ::= TB5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 131: // puertos ::= TB5 
=======
          case 114: // puertos ::= TB5 
>>>>>>> origin/master
=======
          case 114: // puertos ::= TB5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 113: // puertos ::= TB4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 130: // puertos ::= TB4 
=======
          case 113: // puertos ::= TB4 
>>>>>>> origin/master
=======
          case 113: // puertos ::= TB4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 112: // puertos ::= TB3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 129: // puertos ::= TB3 
=======
          case 112: // puertos ::= TB3 
>>>>>>> origin/master
=======
          case 112: // puertos ::= TB3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 111: // puertos ::= TB2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 128: // puertos ::= TB2 
=======
          case 111: // puertos ::= TB2 
>>>>>>> origin/master
=======
          case 111: // puertos ::= TB2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 110: // puertos ::= TB1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 127: // puertos ::= TB1 
=======
          case 110: // puertos ::= TB1 
>>>>>>> origin/master
=======
          case 110: // puertos ::= TB1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 109: // puertos ::= TB0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 126: // puertos ::= TB0 
=======
          case 109: // puertos ::= TB0 
>>>>>>> origin/master
=======
          case 109: // puertos ::= TB0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 108: // puertos ::= TA7 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 125: // puertos ::= TA7 
=======
          case 108: // puertos ::= TA7 
>>>>>>> origin/master
=======
          case 108: // puertos ::= TA7 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ta7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 107: // puertos ::= TA6 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 124: // puertos ::= TA6 
=======
          case 107: // puertos ::= TA6 
>>>>>>> origin/master
=======
          case 107: // puertos ::= TA6 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ta6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 106: // puertos ::= TA5 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 123: // puertos ::= TA5 
=======
          case 106: // puertos ::= TA5 
>>>>>>> origin/master
=======
          case 106: // puertos ::= TA5 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ta5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 105: // puertos ::= TA4 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 122: // puertos ::= TA4 
=======
          case 105: // puertos ::= TA4 
>>>>>>> origin/master
=======
          case 105: // puertos ::= TA4 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ta4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 104: // puertos ::= TA3 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 121: // puertos ::= TA3 
=======
          case 104: // puertos ::= TA3 
>>>>>>> origin/master
=======
          case 104: // puertos ::= TA3 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ta3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 103: // puertos ::= TA2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 120: // puertos ::= TA2 
=======
          case 103: // puertos ::= TA2 
>>>>>>> origin/master
=======
          case 103: // puertos ::= TA2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ta2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 102: // puertos ::= TA1 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 119: // puertos ::= TA1 
=======
          case 102: // puertos ::= TA1 
>>>>>>> origin/master
=======
          case 102: // puertos ::= TA1 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ta1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 101: // puertos ::= TA0 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 118: // puertos ::= TA0 
=======
          case 101: // puertos ::= TA0 
>>>>>>> origin/master
=======
          case 101: // puertos ::= TA0 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int ta0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 100: // puertos ::= INTCON 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 117: // puertos ::= INTCON 
=======
          case 100: // puertos ::= INTCON 
>>>>>>> origin/master
=======
          case 100: // puertos ::= INTCON 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int intconleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intconright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intcon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = intcon + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 99: // puertos ::= ANSELH 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 116: // puertos ::= ANSELH 
=======
          case 99: // puertos ::= ANSELH 
>>>>>>> origin/master
=======
          case 99: // puertos ::= ANSELH 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int anselhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselhright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = anselh + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 98: // puertos ::= ANSEL 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 115: // puertos ::= ANSEL 
=======
          case 98: // puertos ::= ANSEL 
>>>>>>> origin/master
=======
          case 98: // puertos ::= ANSEL 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int anselleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ansel + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 97: // puertos ::= TE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 114: // puertos ::= TE 
=======
          case 97: // puertos ::= TE 
>>>>>>> origin/master
=======
          case 97: // puertos ::= TE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=te+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 96: // puertos ::= TD 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 113: // puertos ::= TD 
=======
          case 96: // puertos ::= TD 
>>>>>>> origin/master
=======
          case 96: // puertos ::= TD 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=td+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 95: // puertos ::= TC 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 112: // puertos ::= TC 
=======
          case 95: // puertos ::= TC 
>>>>>>> origin/master
=======
          case 95: // puertos ::= TC 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=tc+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 94: // puertos ::= TB 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 111: // puertos ::= TB 
=======
          case 94: // puertos ::= TB 
>>>>>>> origin/master
=======
          case 94: // puertos ::= TB 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=tb+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 93: // puertos ::= TA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 110: // puertos ::= TA 
=======
          case 93: // puertos ::= TA 
>>>>>>> origin/master
=======
          case 93: // puertos ::= TA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=ta+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 92: // puertos ::= PE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 109: // puertos ::= PE 
=======
          case 92: // puertos ::= PE 
>>>>>>> origin/master
=======
          case 92: // puertos ::= PE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=pe+"=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 91: // puertos ::= PD 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 108: // puertos ::= PD 
=======
          case 91: // puertos ::= PD 
>>>>>>> origin/master
=======
          case 91: // puertos ::= PD 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 90: // puertos ::= PC 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 107: // puertos ::= PC 
=======
          case 90: // puertos ::= PC 
>>>>>>> origin/master
=======
          case 90: // puertos ::= PC 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc+"=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 89: // puertos ::= PB 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 106: // puertos ::= PB 
=======
          case 89: // puertos ::= PB 
>>>>>>> origin/master
=======
          case 89: // puertos ::= PB 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pb+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 88: // puertos ::= PA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 105: // puertos ::= PA 
=======
          case 88: // puertos ::= PA 
>>>>>>> origin/master
=======
          case 88: // puertos ::= PA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 87: // exprtipos ::= CTELOGICA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 104: // exprtipos ::= CTELOGICA 
=======
          case 87: // exprtipos ::= CTELOGICA 
>>>>>>> origin/master
=======
          case 87: // exprtipos ::= CTELOGICA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 	RESULT=""+b;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 86: // exprtipos ::= CARACTER 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 103: // exprtipos ::= CARACTER 
=======
          case 86: // exprtipos ::= CARACTER 
>>>>>>> origin/master
=======
          case 86: // exprtipos ::= CARACTER 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 	RESULT=""+b;
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 85: // exprtipos ::= NUMREAL 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 102: // exprtipos ::= NUMREAL 
=======
          case 85: // exprtipos ::= NUMREAL 
>>>>>>> origin/master
=======
          case 85: // exprtipos ::= NUMREAL 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 	RESULT=""+n;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 84: // exprtipos ::= NUMERO 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 101: // exprtipos ::= NUMERO 
=======
          case 84: // exprtipos ::= NUMERO 
>>>>>>> origin/master
=======
          case 84: // exprtipos ::= NUMERO 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 	RESULT=""+n;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 83: // exprtipos ::= ID 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 100: // exprtipos ::= ID 
=======
          case 83: // exprtipos ::= ID 
>>>>>>> origin/master
=======
          case 83: // exprtipos ::= ID 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			System.out.println("Esto es un identificador= "+id);
			 DatoSimbolo s;
			 if ((s = parser.tabla.buscar(id)) != null) {
				cadena_tipo=s.getTipo();
				RESULT =s.getValor() ;
			}else{
				System.out.println("Varible -->"+id+" no declarada");
			} 

		  
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 82: // tipo ::= BOOLEAN 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 99: // tipo ::= BOOLEAN 
=======
          case 82: // tipo ::= BOOLEAN 
>>>>>>> origin/master
=======
          case 82: // tipo ::= BOOLEAN 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		
		  RESULT="bool";
		   
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 81: // tipo ::= CHAR 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 98: // tipo ::= CHAR 
=======
          case 81: // tipo ::= CHAR 
>>>>>>> origin/master
=======
          case 81: // tipo ::= CHAR 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		 
		 	RESULT="char";
		 	
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 80: // tipo ::= REAL 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 97: // tipo ::= REAL 
=======
          case 80: // tipo ::= REAL 
>>>>>>> origin/master
=======
          case 80: // tipo ::= REAL 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		 
		 	RESULT="float";
		 	
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 79: // tipo ::= INTEGER 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 96: // tipo ::= INTEGER 
=======
          case 79: // tipo ::= INTEGER 
>>>>>>> origin/master
=======
          case 79: // tipo ::= INTEGER 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		
 		 	RESULT="int";
 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 78: // signo ::= AND 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 95: // signo ::= AND 
=======
          case 78: // signo ::= AND 
>>>>>>> origin/master
=======
          case 78: // signo ::= AND 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		        RESULT=" && "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 77: // signo ::= OR 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 94: // signo ::= OR 
=======
          case 77: // signo ::= OR 
>>>>>>> origin/master
=======
          case 77: // signo ::= OR 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		         RESULT=" || "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 76: // signo ::= DIFERENTE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 93: // signo ::= DIFERENTE 
=======
          case 76: // signo ::= DIFERENTE 
>>>>>>> origin/master
=======
          case 76: // signo ::= DIFERENTE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		  RESULT=" != "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 75: // signo ::= IGUAL2 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 92: // signo ::= IGUAL2 
=======
          case 75: // signo ::= IGUAL2 
>>>>>>> origin/master
=======
          case 75: // signo ::= IGUAL2 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		     RESULT=" == "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 74: // signo ::= MAYORIGUAL 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 91: // signo ::= MAYORIGUAL 
=======
          case 74: // signo ::= MAYORIGUAL 
>>>>>>> origin/master
=======
          case 74: // signo ::= MAYORIGUAL 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		 RESULT=" >= "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 73: // signo ::= MENORIGUAL 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 90: // signo ::= MENORIGUAL 
=======
          case 73: // signo ::= MENORIGUAL 
>>>>>>> origin/master
=======
          case 73: // signo ::= MENORIGUAL 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		 RESULT=" <= "; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 72: // signo ::= MENOR 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 89: // signo ::= MENOR 
=======
          case 72: // signo ::= MENOR 
>>>>>>> origin/master
=======
          case 72: // signo ::= MENOR 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		      RESULT=" < ";  
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 71: // signo ::= MAYOR 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 88: // signo ::= MAYOR 
=======
          case 71: // signo ::= MAYOR 
>>>>>>> origin/master
=======
          case 71: // signo ::= MAYOR 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		       RESULT=" > ";  
              CUP$parser$result = new java_cup.runtime.Symbol(17/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 70: // condicion_extra ::= signo item_condicion condicion_extra 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 87: // condicion_extra ::= signo item_condicion condicion_extra 
=======
          case 70: // condicion_extra ::= signo item_condicion condicion_extra 
>>>>>>> origin/master
=======
          case 70: // condicion_extra ::= signo item_condicion condicion_extra 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					cadena_condiciones =" "+sig+e1 +cadena_condiciones;
					RESULT =cadena_condiciones;
					System.out.println("resto de las condicion-->"+cadena_condiciones);
				
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion_extra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 69: // condicion_extra ::= signo item_condicion 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 86: // condicion_extra ::= signo item_condicion 
=======
          case 69: // condicion_extra ::= signo item_condicion 
>>>>>>> origin/master
=======
          case 69: // condicion_extra ::= signo item_condicion 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					cadena_condiciones=" "+sig+e1;
					RESULT=cadena_condiciones;
					System.out.println("resto de las condicion-->"+cadena_condiciones);
				
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion_extra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 68: // condicion ::= item_condicion signo item_condicion condicion_extra 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 85: // condicion ::= item_condicion signo item_condicion condicion_extra 
=======
          case 68: // condicion ::= item_condicion signo item_condicion condicion_extra 
>>>>>>> origin/master
=======
          case 68: // condicion ::= item_condicion signo item_condicion condicion_extra 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              BloqueCondicion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			 RESULT = generarCondicion(e1 ,sig, e2,c);
			
              CUP$parser$result = new java_cup.runtime.Symbol(16/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 67: // condicion ::= item_condicion signo item_condicion 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 84: // condicion ::= item_condicion signo item_condicion 
=======
          case 67: // condicion ::= item_condicion signo item_condicion 
>>>>>>> origin/master
=======
          case 67: // condicion ::= item_condicion signo item_condicion 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              BloqueCondicion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT = generarCondicion(e1 ,sig, e2);
			
              CUP$parser$result = new java_cup.runtime.Symbol(16/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 66: // item_condicion ::= HEXA HEXACADENA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 83: // item_condicion ::= HEXA HEXACADENA 
=======
          case 66: // item_condicion ::= HEXA HEXACADENA 
>>>>>>> origin/master
=======
          case 66: // item_condicion ::= HEXA HEXACADENA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int hcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String hc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT="0x"+hc;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 65: // item_condicion ::= BINARIO CADENA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 82: // item_condicion ::= BINARIO CADENA 
=======
          case 65: // item_condicion ::= BINARIO CADENA 
>>>>>>> origin/master
=======
          case 65: // item_condicion ::= BINARIO CADENA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT="0b"+n;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 64: // item_condicion ::= puertost 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 81: // item_condicion ::= puertost 
=======
          case 64: // item_condicion ::= puertost 
>>>>>>> origin/master
=======
          case 64: // item_condicion ::= puertost 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT=p;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 63: // item_condicion ::= NUMERO 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 80: // item_condicion ::= NUMERO 
=======
          case 63: // item_condicion ::= NUMERO 
>>>>>>> origin/master
=======
          case 63: // item_condicion ::= NUMERO 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			RESULT= Integer.toString(num); 
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 62: // item_condicion ::= ID 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 79: // item_condicion ::= ID 
=======
          case 62: // item_condicion ::= ID 
>>>>>>> origin/master
=======
          case 62: // item_condicion ::= ID 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT=id;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 61: // expression ::= NUMERO 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 78: // expression ::= NUMERO ID 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT=n+id;
		
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= ID NUMERO 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT=id+n;
		
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= NUMERO 
=======
          case 61: // expression ::= NUMERO 
>>>>>>> origin/master
=======
          case 61: // expression ::= NUMERO 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			RESULT= Integer.toString(num); 
								//generarTerceto("="+num);
		
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 60: // expression ::= ID 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 75: // expression ::= ID 
=======
          case 60: // expression ::= ID 
>>>>>>> origin/master
=======
          case 60: // expression ::= ID 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=id;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 59: // extraperamesta ::= extraperamesta operamesta expression 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 74: // extraperamesta ::= extraperamesta operamesta expression 
=======
          case 59: // extraperamesta ::= extraperamesta operamesta expression 
>>>>>>> origin/master
=======
          case 59: // extraperamesta ::= extraperamesta operamesta expression 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					encadenamst=encadenamst+o+v;
					RESULT=encadenamst;
				
              CUP$parser$result = new java_cup.runtime.Symbol(23/*extraperamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 58: // extraperamesta ::= operamesta expression 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 73: // extraperamesta ::= operamesta expression 
=======
          case 58: // extraperamesta ::= operamesta expression 
>>>>>>> origin/master
=======
          case 58: // extraperamesta ::= operamesta expression 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT=o+v;
				
              CUP$parser$result = new java_cup.runtime.Symbol(23/*extraperamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 57: // operamesta ::= MENOS 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 72: // operamesta ::= DIVISION 
            {
              Object RESULT = null;
		RESULT="/";
              CUP$parser$result = new java_cup.runtime.Symbol(22/*operamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operamesta ::= MENOS 
=======
          case 57: // operamesta ::= MENOS 
>>>>>>> origin/master
=======
          case 57: // operamesta ::= MENOS 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		RESULT="-";
              CUP$parser$result = new java_cup.runtime.Symbol(22/*operamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 56: // operamesta ::= MAS 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 70: // operamesta ::= MAS 
=======
          case 56: // operamesta ::= MAS 
>>>>>>> origin/master
=======
          case 56: // operamesta ::= MAS 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		RESULT="+";
              CUP$parser$result = new java_cup.runtime.Symbol(22/*operamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 55: // cases ::= cases CASO expression DOSPUNTOS 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 69: // cases ::= cases CASO expression DOSPUNTOS 
=======
          case 55: // cases ::= cases CASO expression DOSPUNTOS 
>>>>>>> origin/master
=======
          case 55: // cases ::= cases CASO expression DOSPUNTOS 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=c+"case "+e2+":\n";
				
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 54: // cases ::= CASO expression DOSPUNTOS 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 68: // cases ::= CASO expression DOSPUNTOS 
=======
          case 54: // cases ::= CASO expression DOSPUNTOS 
>>>>>>> origin/master
=======
          case 54: // cases ::= CASO expression DOSPUNTOS 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT="case "+e2+":\n";
				
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 53: // cases ::= cases OTHERWISE DOSPUNTOS instrucciones 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 67: // cases ::= cases OTHERWISE DOSPUNTOS instrucciones 
=======
          case 53: // cases ::= cases OTHERWISE DOSPUNTOS instrucciones 
>>>>>>> origin/master
=======
          case 53: // cases ::= cases OTHERWISE DOSPUNTOS instrucciones 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				RESULT=c+"default: "+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 52: // cases ::= cases CASO expression DOSPUNTOS instrucciones 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 66: // cases ::= cases CASO expression DOSPUNTOS instrucciones 
=======
          case 52: // cases ::= cases CASO expression DOSPUNTOS instrucciones 
>>>>>>> origin/master
=======
          case 52: // cases ::= cases CASO expression DOSPUNTOS instrucciones 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT=c+"case "+e2+":"+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 51: // cases ::= OTHERWISE DOSPUNTOS instrucciones 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 65: // cases ::= OTHERWISE DOSPUNTOS instrucciones 
=======
          case 51: // cases ::= OTHERWISE DOSPUNTOS instrucciones 
>>>>>>> origin/master
=======
          case 51: // cases ::= OTHERWISE DOSPUNTOS instrucciones 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		
				RESULT="default: "+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 50: // cases ::= CASO expression DOSPUNTOS instrucciones 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 64: // cases ::= CASO expression DOSPUNTOS instrucciones 
=======
          case 50: // cases ::= CASO expression DOSPUNTOS instrucciones 
>>>>>>> origin/master
=======
          case 50: // cases ::= CASO expression DOSPUNTOS instrucciones 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="case "+e2+":"+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 49: // instruccion ::= ID IGUAL expression operamesta expression extraperamesta PCOMA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 63: // extraparentesis ::= extraparentesis operamesta parentesis 
            {
              String RESULT = null;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ep+op+p;
              CUP$parser$result = new java_cup.runtime.Symbol(25/*extraparentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // extraparentesis ::= extraperamesta parentesis 
            {
              String RESULT = null;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ep+p;
              CUP$parser$result = new java_cup.runtime.Symbol(25/*extraparentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // extraparentesis ::= parentesis 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=p;
              CUP$parser$result = new java_cup.runtime.Symbol(25/*extraparentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // extraparentesis ::= operamesta parentesis 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=o+p;
              CUP$parser$result = new java_cup.runtime.Symbol(25/*extraparentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parentesis ::= LPAREN parentesis operamesta parentesis extraparentesis RPAREN 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+p+o+p2+ep+")";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parentesis ::= LPAREN parentesis operamesta expression extraparentesis RPAREN 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+p+o+p2+ep+")";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parentesis ::= LPAREN parentesis operamesta expression RPAREN 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+p+o+e+")";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parentesis ::= LPAREN parentesis operamesta parentesis RPAREN 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+p+o+p2+")";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parentesis ::= LPAREN expression operamesta expression operamesta parentesis RPAREN 
            {
              String RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+v2+o+v3+o2+p+")";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parentesis ::= LPAREN expression operamesta expression extraperamesta RPAREN 
            {
              String RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+v2+o+v3+eo+")";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parentesis ::= LPAREN expression operamesta expression RPAREN 
            {
              String RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+v2+o+v3+")";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parentesis ::= LPAREN expression RPAREN 
            {
              String RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+v2+")";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion ::= ID IGUAL parentesis operamesta expression PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=v+"="+p+o+e+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion ::= ID IGUAL parentesis operamesta parentesis PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=v+"="+p+o+p2+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion ::= ID IGUAL parentesis PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=v+"="+p+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= ID IGUAL expression operamesta expression extraperamesta PCOMA 
=======
          case 49: // instruccion ::= ID IGUAL expression operamesta expression extraperamesta PCOMA 
>>>>>>> origin/master
=======
          case 49: // instruccion ::= ID IGUAL expression operamesta expression extraperamesta PCOMA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=v+"="+v2+o+v3+eo+";\n";
				encadenamst="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 48: // instruccion ::= ID IGUAL expression operamesta expression PCOMA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 47: // instruccion ::= ID IGUAL expression operamesta expression PCOMA 
=======
          case 48: // instruccion ::= ID IGUAL expression operamesta expression PCOMA 
>>>>>>> origin/master
=======
          case 48: // instruccion ::= ID IGUAL expression operamesta expression PCOMA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=v+"="+v2+o+v3+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 46: // instruccion ::= ID RECBITSDER NUMERO PCOMA 
=======
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
          case 47: // instruccion ::= ID IGUAL ID RECBITSDER NUMERO PCOMA 
            {
              String RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = var +"="+v+"<<"+n+";\n";
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= ID IGUAL ID RECBITSIZQ NUMERO PCOMA 
            {
              String RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = var +"="+v+">>"+n+";\n";
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= ID RECBITSDER NUMERO PCOMA 
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
>>>>>>> origin/master
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=v+">>"+n+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 44: // instruccion ::= ID RECBITSIZQ NUMERO PCOMA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 45: // instruccion ::= ID RECBITSIZQ NUMERO PCOMA 
=======
          case 44: // instruccion ::= ID RECBITSIZQ NUMERO PCOMA 
>>>>>>> origin/master
=======
          case 44: // instruccion ::= ID RECBITSIZQ NUMERO PCOMA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=v+"<<"+n+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 43: // instruccion ::= WHILE LPAREN expression RPAREN DO instrucciones FIN WHILE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 44: // instruccion ::= WHILE LPAREN expression RPAREN DO instrucciones FIN WHILE 
=======
          case 43: // instruccion ::= WHILE LPAREN expression RPAREN DO instrucciones FIN WHILE 
>>>>>>> origin/master
=======
          case 43: // instruccion ::= WHILE LPAREN expression RPAREN DO instrucciones FIN WHILE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int etqInicioWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int etqInicioWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String etqInicioWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
				RESULT="\n\t\twhile("+c+")\n\t\t{\n\t"+auxiliar+"\t\t}";
				auxiliar="";	
		  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 42: // instruccion ::= WHILE LPAREN condicion RPAREN DO instrucciones FIN WHILE 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 43: // instruccion ::= WHILE LPAREN condicion RPAREN DO instrucciones FIN WHILE 
=======
          case 42: // instruccion ::= WHILE LPAREN condicion RPAREN DO instrucciones FIN WHILE 
>>>>>>> origin/master
=======
          case 42: // instruccion ::= WHILE LPAREN condicion RPAREN DO instrucciones FIN WHILE 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int etqInicioWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int etqInicioWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String etqInicioWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
				RESULT="\n\t\twhile("+c.condicion+")\n\t\t{\n\t"+auxiliar+"\t\t}";
				auxiliar="";	
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 41: // instruccion ::= SWITCH LPAREN puertost RPAREN OF cases FIN SWITCH 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 42: // instruccion ::= SWITCH LPAREN puertost RPAREN OF cases FIN SWITCH 
=======
          case 41: // instruccion ::= SWITCH LPAREN puertost RPAREN OF cases FIN SWITCH 
>>>>>>> origin/master
=======
          case 41: // instruccion ::= SWITCH LPAREN puertost RPAREN OF cases FIN SWITCH 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="\n\t\tswitch("+p+")\n{\n\t\t\t"+c+"\n}\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 40: // instruccion ::= SWITCH LPAREN expression RPAREN OF cases FIN SWITCH 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 41: // instruccion ::= SWITCH LPAREN expression RPAREN OF cases FIN SWITCH 
=======
          case 40: // instruccion ::= SWITCH LPAREN expression RPAREN OF cases FIN SWITCH 
>>>>>>> origin/master
=======
          case 40: // instruccion ::= SWITCH LPAREN expression RPAREN OF cases FIN SWITCH 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="\n\t\tswitch("+e+")\n{\n\t\t\t"+c+"\n}\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 39: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones NT$1 NO instrucciones FIN 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 40: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones NT$1 NO instrucciones FIN 
=======
          case 39: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones NT$1 NO instrucciones FIN 
>>>>>>> origin/master
=======
          case 39: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones NT$1 NO instrucciones FIN 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
					//f2=pila2.pop();
					//p1=f2.getInstruccion();
					p1=pila2.pop().toString();
					auxno=auxiliar;
					RESULT="\n\t\tif("+p+")\n\t\t{\t"+p1+"\t\t}"+"\n\t\telse\n\t\t{\n\t"+auxno+"\t\t}\n";
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 38: // NT$1 ::= 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 39: // NT$1 ::= 
=======
          case 38: // NT$1 ::= 
>>>>>>> origin/master
=======
          case 38: // NT$1 ::= 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

					//frijol f=new frijol("",auxiliar);
					pila2.push(auxiliar);
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(27/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 37: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones NT$0 NO instrucciones FIN 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 38: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones NT$0 NO instrucciones FIN 
=======
          case 37: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones NT$0 NO instrucciones FIN 
>>>>>>> origin/master
=======
          case 37: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones NT$0 NO instrucciones FIN 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
					/*f2=p.pop();
					p1=f2.getInstruccion();*/
					p1=p.pop().toString();
					auxno=auxiliar;
					RESULT="\n\t\tif("+c.condicion+")\n\t\t{\t"+p1+"\t\t}"+"\n\t\telse\n\t\t{\n\t"+auxno+"\t\t}\n";
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 36: // NT$0 ::= 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 37: // NT$0 ::= 
=======
          case 36: // NT$0 ::= 
>>>>>>> origin/master
=======
          case 36: // NT$0 ::= 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              Object RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

					//frijol f=new frijol("",auxiliar);
					p.push(auxiliar);
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(26/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 35: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones FIN 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 36: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones FIN 
=======
          case 35: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones FIN 
>>>>>>> origin/master
=======
          case 35: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones FIN 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				aux="\n\t\tif("+p+")\n\t\t{\t"+auxiliar+"\t\t}\n";
				auxiliar="";
				RESULT=aux;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 34: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones FIN 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 35: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones FIN 
=======
          case 34: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones FIN 
>>>>>>> origin/master
=======
          case 34: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones FIN 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				aux="\n\t\tif("+c.condicion+")\n\t\t{\t"+auxiliar+"\t\t}\n";
				auxiliar="";
				RESULT=aux;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 34: // instruccion ::= RETURN PCOMA 
=======
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
          case 33: // instruccion ::= TMR0 IGUAL HEXA HEXACADENA 
            {
              String RESULT = null;
		int tmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String hc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT = tm+"= 0x"+hc;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= RETURN PCOMA 
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
>>>>>>> origin/master
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		
				RESULT="return;\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< Updated upstream
          case 31: // instruccion ::= puertos IGUAL puertost MAS NUMERO PCOMA 
=======
<<<<<<< HEAD
<<<<<<< HEAD
          case 33: // instruccion ::= ID MENOS MENOS PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				RESULT=v+"--;\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= ID MAS MAS PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				RESULT=v+"++;\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= puertos IGUAL puertost MAS ID PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=p+u+"+"+v+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= puertos IGUAL puertost MAS NUMERO PCOMA 
=======
          case 31: // instruccion ::= puertos IGUAL puertost MAS NUMERO PCOMA 
>>>>>>> origin/master
=======
          case 31: // instruccion ::= puertos IGUAL puertost MAS NUMERO PCOMA 
>>>>>>> origin/master
>>>>>>> Stashed changes
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=p+u+"+"+n+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= DELAY LLLAVE NUMERO RLLAVE PCOMA 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				//retardos= retardos+c+"("+n+");\n";
	   			RESULT=c+"("+n+");\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= CHALE LPAREN NUMERO RPAREN PCOMA 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				//retardos= retardos+c+"("+n+");\n";
	   			RESULT=c+"("+n+");\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= ID LPAREN RPAREN PCOMA 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
				Metodos s;
				if ((s = tablaMetodos.search(i)) == null)
				{System.out.println(i+ " es una METODO no definido");}			
				else
				{
					// System.out.println(i+" instrucciones del metodo => "+s.getValor());
					//System.out.println("codigo intermedio==> "+i+"();");
					RESULT="\t"+i+"();\n";
				}	
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= puertos IGUAL NUMERO PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				//   miCodigo=p+t+u+";\n"+miCodigo;
				RESULT="\n\t"+p+n+";\n";
				//System.out.println("cadena de toggles:"+RESULT);
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= puertos TOGGLE puertost PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				//   miCodigo=p+t+u+";\n"+miCodigo;
				RESULT="\n\t"+p+t+u+";\n";
				//System.out.println("cadena de toggles:"+RESULT);
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= ID IGUAL exprtipos PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			System.out.println("Mensaje "+id + "-->"+t);
			DatoSimbolo ds=parser.tabla.buscar(id);
			 if(ds!= null){
			 	System.err.println(id + " redeclarada.");
			 RESULT="\n\t"+id+"="+t+";";
			}
			 else{
			 	System.out.println("Error al Asignar valor a: "+id);
			}

			
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= TIPOVC ID DOSPUNTOS tipo IGUAL exprtipos PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				//RESULT = t;
				if(parser.tabla.buscar(id)!= null){
					System.err.println(id + " redeclarada.");
				}else{
				 	System.out.println("Mensaje "+id + "-->"+e);
				 	switch(t){
			            case "int":
			                if(Num.valInt(e)){
			                    RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
			                }else{
			                	String msj="//La variable: "+id+" es una cadena "+e+" y no es compatible con un tipo de dato INT\n";
			                    RESULT= msj;
			                }
			                break;
			            case "float":
			            	if(Num.valFloat(e)){
			                    RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
			            	}else{
			            		String msj="//La variable: "+id+" es una cadena "+e+" y no es compatible con un tipo de dato FLOAT\n";
			                    RESULT= msj;
			            	}
			                break;
			            case "char":
			            	if(Num.valInt(e) || Num.valFloat(e)){
				                String msj="//La variable: "+id+" es un numero "+e+" y no es compatible con un CARACTER\n";
			                    RESULT= msj;
				            }else{
				                RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
				            }
			                break;
			            case "bool":
			            	if(e.equalsIgnoreCase("TRUE") || e.equalsIgnoreCase("FALSE")){
			            		RESULT="\n\t"+t+" "+id+" ="+e.toLowerCase()+";";
			            		parser.tabla.insertar(id,t,e);
			            	}else{
			            		String msj="\n//La variable: "+id+" es un valor no compatible "+e+" se requiere TRUE o FALSE\n";
			                    RESULT= msj;
			            	}
			                break;
			            default :
			            	String msj="//Tipo de dato desconocido: "+t+"\n";
			                    RESULT= msj;
		        	}
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= TIPOVC ID DOSPUNTOS tipo PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(id);
				if(ds!= null)
					System.err.println(id + " redeclarada.");
				else{
				 	System.out.println("Mensaje "+id + "-->"+t);
				 	RESULT="\n\t"+t+" "+id+";";
					parser.tabla.insertar(id, t,"");
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= instruccion instrucciones 
            {
              String RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				System.out.println("valor de in en instrucciones:"+in);
				auxiliar=in+auxiliar;
				//RESULT=in;
                //aux=in;
				System.out.println("cadena de varias instrucciones en aux:"+auxiliar);
			
              CUP$parser$result = new java_cup.runtime.Symbol(8/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= instruccion 
            {
              String RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				System.out.println("valor de in en intruccion:"+in);
				auxiliar=in + auxiliar;
                //aux=in;
				//RESULT=in;
				System.out.println("cadena de una istruccion en aux: "+auxiliar);
			
              CUP$parser$result = new java_cup.runtime.Symbol(8/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= ID DOSPUNTOS tipo COMA parametros 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				cadena_parametros=" "+t+" "+id+" ,"+cadena_parametros;
			
              CUP$parser$result = new java_cup.runtime.Symbol(21/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= ID DOSPUNTOS tipo 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				cadena_parametros=" "+t+" "+id;
			
              CUP$parser$result = new java_cup.runtime.Symbol(21/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodo ::= metodo VOID ID LPAREN parametros RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(m)) == null)
				s = tablaMetodos.insert(m,auxiliar);
			else
				{ s.setvalue(auxiliar);}
			codigo=v+m+"("+cadena_parametros+")\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		    cadena_parametros="";
			//System.out.println("codigo intermedio==> int "+codigo);
		 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= VOID ID LPAREN parametros RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(i)) == null)
				s = tablaMetodos.insert(i,auxiliar);
			else
			{ 
				s.setvalue(auxiliar);
			}			
			codigo=v+i+"("+cadena_parametros+")\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		    cadena_parametros="";
			//System.out.println("codigo intermedio==> int "+codigo);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= metodo VOID ID LPAREN RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(m)) == null)
				s = tablaMetodos.insert(m,auxiliar);
			else
				{ s.setvalue(auxiliar);}
			codigo=v+m+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
			//System.out.println("codigo intermedio==> int "+codigo);
		 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodo ::= VOID ID LPAREN RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(i)) == null)
				s = tablaMetodos.insert(i,auxiliar);
			else
			{ 
				s.setvalue(auxiliar);
			}			
			codigo=v+i+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
			//System.out.println("codigo intermedio==> int "+codigo);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // main ::= MAIN LLLAVE RLLAVE 
            {
              Object RESULT = null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			miCodigo=miCodigo+main+"{\n\t\tsetup();\n\t\tloop();\n\n\t\t return; \n\t }";
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*main*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // main ::= MAIN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			miCodigo=miCodigo+main+"{\n\t\tsetup();\n\t\tloop();\n"+auxiliar+"\n\t\t return; \n\t }";
		    auxiliar="";
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*main*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ciclo ::= CICLO LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int cicloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cicloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ciclo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			miCodigo=miCodigo+ciclo+"{\n\t \twhile(1){\n\n"+ auxiliar +"\t\t}\n\n\t}";
			auxiliar="";
        
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ciclo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // io ::= SALIDA 
            {
              String RESULT = null;
		int salidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int salidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object salida = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT="0;\n"; 
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*io*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // io ::= ENTRADA 
            {
              String RESULT = null;
		 
		RESULT="1;\n";  
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*io*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // confpuertos ::= confpuertos puertos IGUAL io PCOMA 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				miCodigo=miCodigo+p+i;
	        
              CUP$parser$result = new java_cup.runtime.Symbol(9/*confpuertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // confpuertos ::= puertos IGUAL io PCOMA 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				miCodigo=miCodigo+p+i;
			
              CUP$parser$result = new java_cup.runtime.Symbol(9/*confpuertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // setup ::= SETUP LLLAVE confpuertos instrucciones RLLAVE 
            {
              Object RESULT = null;
		int setupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int setupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object setup = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	        //System.out.println("codigo intermedio==>"+setup+"   "+fsetup);
	        miCodigo=setup+"{\n\tOSCCON=0x60;\n\tANSEL=0;\n"+miCodigo+auxiliar+"\n}";
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*setup*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // setup ::= SETUP LLLAVE confpuertos RLLAVE 
            {
              Object RESULT = null;
		int setupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int setupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object setup = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			//System.out.println("codigo intermedio==>"+setup+"   "+fsetup);
	        miCodigo=setup+"{\n\tOSCCON=0x60;"+miCodigo+"\n}";
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*setup*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodos ::= metodo setup RETARDO LPAREN RPAREN PCOMA ciclo 
            {
              Object RESULT = null;
		int retardoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retardoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object retardo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
					miCodigo=retardo+losMetodos+miCodigo;  
				
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodos ::= metodo setup ciclo 
            {
              Object RESULT = null;
		 
					miCodigo=losMetodos+miCodigo;  
				
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodos ::= setup RETARDO LPAREN RPAREN PCOMA ciclo 
            {
              Object RESULT = null;
		int retardoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retardoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object retardo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 miCodigo=retardo+miCodigo;  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // metodos ::= setup ciclo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= FUSES metodos main 
            {
              Object RESULT = null;
		int fusesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fusesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fuses = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
 					miCodigo=fuses+miCodigo;
              		 // System.out.println("Clase Generada\n\n"+miCodigo+"\n\n");
                File miClase;
	        	try{
	            	miClase = new File("mapic.c");
	            	if(miClase.exists())
	            		miClase.delete();
	            	if(miClase.createNewFile()){
	                	//System.out.println("Se ha creado el archivo");
	            	}
	            	FileWriter escribir=new FileWriter(miClase,true);
	            	escribir.write(miCodigo);
	            	escribir.close();
	        	}catch(IOException e){
	        		System.out.println("ERROR NO SE PUEDE ");
	        	}
             

              CUP$parser$result = new java_cup.runtime.Symbol(1/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

