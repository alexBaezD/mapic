
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Aug 05 16:50:42 CDT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Stack;

/** CUP v0.10k generated parser.
  * @version Wed Aug 05 16:50:42 CDT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\002\003\006\000\002\002\004\000\002\004" +
    "\004\000\002\004\010\000\002\004\005\000\002\004\011" +
    "\000\002\004\011\000\002\004\006\000\002\004\012\000" +
    "\002\004\005\000\002\036\002\000\002\036\006\000\002" +
    "\006\006\000\002\006\007\000\002\013\006\000\002\013" +
    "\007\000\002\016\003\000\002\016\003\000\002\007\006" +
    "\000\002\007\005\000\002\005\006\000\002\005\005\000" +
    "\002\010\012\000\002\010\011\000\002\010\012\000\002" +
    "\010\012\000\002\010\013\000\002\031\005\000\002\031" +
    "\007\000\002\012\003\000\002\012\004\000\002\017\003" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\007\000\002\017\007\000\002\017\007\000\002\017" +
    "\010\000\002\017\010\000\002\017\006\000\002\017\006" +
    "\000\002\017\004\000\002\017\006\000\002\017\011\000" +
    "\002\017\011\000\002\037\002\000\002\017\014\000\002" +
    "\040\002\000\002\017\014\000\002\017\012\000\002\017" +
    "\012\000\002\017\012\000\002\017\012\000\002\017\006" +
    "\000\002\017\006\000\002\017\010\000\002\017\010\000" +
    "\002\017\010\000\002\017\011\000\002\017\006\000\002" +
    "\017\010\000\002\017\010\000\002\021\003\000\002\021" +
    "\004\000\002\020\007\000\002\020\011\000\002\034\005" +
    "\000\002\034\007\000\002\034\010\000\002\034\011\000" +
    "\002\034\007\000\002\034\007\000\002\034\010\000\002" +
    "\034\010\000\002\035\004\000\002\035\003\000\002\035" +
    "\004\000\002\035\005\000\002\011\006\000\002\011\005" +
    "\000\002\011\007\000\002\011\006\000\002\011\005\000" +
    "\002\011\006\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\004\000\002\033\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\004\000\002\022\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\024\006\000\002\026\004\000\002\026\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f7\000\004\021\005\001\002\000\004\002\u01f9\001" +
    "\002\000\012\020\ufff7\226\ufff7\262\ufff7\276\006\001\002" +
    "\000\004\244\u01f6\001\002\000\010\020\010\226\017\262" +
    "\013\001\002\000\004\244\u01e7\001\002\000\006\024\u01e1" +
    "\025\u01bb\001\002\000\004\017\u01dc\001\002\000\004\267" +
    "\u01d2\001\002\000\006\020\010\226\u01ad\001\002\000\010" +
    "\020\uffbf\226\uffbf\262\013\001\002\000\006\020\010\226" +
    "\017\001\002\000\006\227\021\267\020\001\002\000\004" +
    "\237\u0197\001\002\000\004\267\022\001\002\000\004\237" +
    "\023\001\002\000\004\240\024\001\002\000\004\244\025" +
    "\001\002\000\u0112\014\146\015\170\016\073\026\203\027" +
    "\202\030\177\031\175\032\174\033\033\034\032\035\030" +
    "\036\027\037\026\040\171\041\211\042\165\043\164\044" +
    "\163\045\160\046\157\047\155\050\154\051\152\052\126" +
    "\053\125\054\124\055\123\056\122\057\121\060\117\061" +
    "\115\062\076\063\075\064\074\065\072\066\071\067\070" +
    "\070\067\071\065\072\052\073\051\074\050\075\046\076" +
    "\044\077\043\100\040\101\037\102\226\103\225\104\223" +
    "\105\221\106\206\107\205\110\204\111\201\112\200\113" +
    "\176\114\173\115\172\116\150\117\147\120\144\121\143" +
    "\122\142\123\140\124\137\125\135\126\116\127\114\130" +
    "\113\131\112\132\111\133\110\134\107\135\106\136\066" +
    "\137\064\140\062\141\061\142\060\143\057\144\056\145" +
    "\055\146\036\147\035\150\034\151\031\152\233\153\231" +
    "\154\230\155\227\156\224\157\222\160\220\161\217\162" +
    "\134\163\133\164\132\165\131\166\130\167\127\171\235" +
    "\172\101\173\216\174\120\175\236\176\041\177\042\200" +
    "\045\201\054\202\145\203\212\204\207\205\161\206\153" +
    "\207\234\210\156\211\151\212\232\213\077\214\100\215" +
    "\102\216\103\217\104\220\105\221\063\222\213\223\136" +
    "\224\214\225\215\234\162\262\013\265\166\267\210\271" +
    "\053\273\141\001\002\000\006\250\uff7b\252\uff7b\001\002" +
    "\000\006\250\uff7c\252\uff7c\001\002\000\006\250\uff7d\252" +
    "\uff7d\001\002\000\006\250\uff30\252\uff30\001\002\000\006" +
    "\250\uff7e\252\uff7e\001\002\000\006\250\uff7f\252\uff7f\001" +
    "\002\000\006\250\uff31\252\uff31\001\002\000\006\250\uff32" +
    "\252\uff32\001\002\000\006\250\uff33\252\uff33\001\002\000" +
    "\006\250\uff58\252\uff58\001\002\000\006\250\uff59\252\uff59" +
    "\001\002\000\006\250\uff14\252\uff14\001\002\000\006\250" +
    "\uff13\252\uff13\001\002\000\006\250\uff5a\252\uff5a\001\002" +
    "\000\006\250\uff5b\252\uff5b\001\002\000\006\250\uff12\252" +
    "\uff12\001\002\000\006\250\uff5c\252\uff5c\001\002\000\u011c" +
    "\014\uffe2\015\uffe2\016\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100" +
    "\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2" +
    "\107\uffe2\110\uffe2\111\uffe2\112\uffe2\113\uffe2\114\uffe2\115" +
    "\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122\uffe2\123\uffe2" +
    "\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2\132" +
    "\uffe2\133\uffe2\134\uffe2\135\uffe2\136\uffe2\137\uffe2\140\uffe2" +
    "\141\uffe2\142\uffe2\143\uffe2\144\uffe2\145\uffe2\146\uffe2\147" +
    "\uffe2\150\uffe2\151\uffe2\152\uffe2\153\uffe2\154\uffe2\155\uffe2" +
    "\156\uffe2\157\uffe2\160\uffe2\161\uffe2\162\uffe2\163\uffe2\164" +
    "\uffe2\165\uffe2\166\uffe2\167\uffe2\171\uffe2\172\uffe2\173\uffe2" +
    "\174\uffe2\175\uffe2\176\uffe2\177\uffe2\200\uffe2\201\uffe2\202" +
    "\uffe2\203\uffe2\204\uffe2\205\uffe2\206\uffe2\207\uffe2\210\uffe2" +
    "\211\uffe2\212\uffe2\213\uffe2\214\uffe2\215\uffe2\216\uffe2\217" +
    "\uffe2\220\uffe2\221\uffe2\222\uffe2\223\uffe2\224\uffe2\225\uffe2" +
    "\231\uffe2\232\uffe2\234\uffe2\236\uffe2\245\uffe2\262\uffe2\265" +
    "\uffe2\267\uffe2\271\uffe2\272\uffe2\273\uffe2\001\002\000\006" +
    "\250\uff5d\252\uff5d\001\002\000\006\250\uff5e\252\uff5e\001" +
    "\002\000\006\250\uff5f\252\uff5f\001\002\000\004\237\u0184" +
    "\001\002\000\006\250\uff11\252\uff11\001\002\000\006\250" +
    "\uff34\252\uff34\001\002\000\006\250\uff35\252\uff35\001\002" +
    "\000\006\250\uff36\252\uff36\001\002\000\006\250\uff37\252" +
    "\uff37\001\002\000\006\250\uff38\252\uff38\001\002\000\006" +
    "\250\uff39\252\uff39\001\002\000\006\250\uff0a\252\uff0a\001" +
    "\002\000\006\250\uff3a\252\uff3a\001\002\000\006\250\uff60" +
    "\252\uff60\001\002\000\006\250\uff3b\252\uff3b\001\002\000" +
    "\006\250\uff61\252\uff61\001\002\000\006\250\uff62\252\uff62" +
    "\001\002\000\006\250\uff63\252\uff63\001\002\000\006\250" +
    "\uff64\252\uff64\001\002\000\004\250\u0181\001\002\000\006" +
    "\250\uff65\252\uff65\001\002\000\006\250\uff66\252\uff66\001" +
    "\002\000\006\250\uff67\252\uff67\001\002\000\006\250\uff10" +
    "\252\uff10\001\002\000\006\250\uff0f\252\uff0f\001\002\000" +
    "\006\250\uff18\252\uff18\001\002\000\006\250\uff0e\252\uff0e" +
    "\001\002\000\006\250\uff0d\252\uff0d\001\002\000\006\250" +
    "\uff0c\252\uff0c\001\002\000\006\250\uff0b\252\uff0b\001\002" +
    "\000\006\250\uff3c\252\uff3c\001\002\000\006\250\uff3d\252" +
    "\uff3d\001\002\000\006\250\uff3e\252\uff3e\001\002\000\006" +
    "\250\uff3f\252\uff3f\001\002\000\006\250\uff40\252\uff40\001" +
    "\002\000\006\250\uff41\252\uff41\001\002\000\006\250\uff42" +
    "\252\uff42\001\002\000\006\250\uff68\252\uff68\001\002\000" +
    "\006\250\uff43\252\uff43\001\002\000\006\250\uff69\252\uff69" +
    "\001\002\000\006\250\uff16\252\uff16\001\002\000\006\250" +
    "\uff6a\252\uff6a\001\002\000\006\250\uff6b\252\uff6b\001\002" +
    "\000\006\250\uff6c\252\uff6c\001\002\000\006\250\uff6d\252" +
    "\uff6d\001\002\000\006\250\uff6e\252\uff6e\001\002\000\006" +
    "\250\uff6f\252\uff6f\001\002\000\006\250\uff22\252\uff22\001" +
    "\002\000\006\250\uff23\252\uff23\001\002\000\006\250\uff24" +
    "\252\uff24\001\002\000\006\250\uff25\252\uff25\001\002\000" +
    "\006\250\uff26\252\uff26\001\002\000\006\250\uff27\252\uff27" +
    "\001\002\000\006\250\uff44\252\uff44\001\002\000\006\250" +
    "\uff08\252\uff08\001\002\000\006\250\uff45\252\uff45\001\002" +
    "\000\006\250\uff46\252\uff46\001\002\000\004\237\u015e\001" +
    "\002\000\006\250\uff47\252\uff47\001\002\000\006\250\uff48" +
    "\252\uff48\001\002\000\006\250\uff49\252\uff49\001\002\000" +
    "\006\250\uff78\252\uff78\001\002\000\004\237\u015a\001\002" +
    "\000\006\250\uff4a\252\uff4a\001\002\000\006\250\uff4b\252" +
    "\uff4b\001\002\000\006\250\uff1b\252\uff1b\001\002\000\006" +
    "\250\uff70\252\uff70\001\002\000\006\250\uff1e\252\uff1e\001" +
    "\002\000\006\250\uff71\252\uff71\001\002\000\006\250\uff72" +
    "\252\uff72\001\002\000\006\250\uff1c\252\uff1c\001\002\000" +
    "\006\250\uff73\252\uff73\001\002\000\006\250\uff74\252\uff74" +
    "\001\002\000\006\250\uff1f\252\uff1f\001\002\000\004\237" +
    "\u013f\001\002\000\006\250\uff75\252\uff75\001\002\000\006" +
    "\250\uff76\252\uff76\001\002\000\006\250\uff77\252\uff77\001" +
    "\002\000\004\247\u013e\001\002\000\u011c\014\146\015\170" +
    "\016\073\026\203\027\202\030\177\031\175\032\174\033" +
    "\033\034\032\035\030\036\027\037\026\040\171\041\211" +
    "\042\165\043\164\044\163\045\160\046\157\047\155\050" +
    "\154\051\152\052\126\053\125\054\124\055\123\056\122" +
    "\057\121\060\117\061\115\062\076\063\075\064\074\065" +
    "\072\066\071\067\070\070\067\071\065\072\052\073\051" +
    "\074\050\075\046\076\044\077\043\100\040\101\037\102" +
    "\226\103\225\104\223\105\221\106\206\107\205\110\204" +
    "\111\201\112\200\113\176\114\173\115\172\116\150\117" +
    "\147\120\144\121\143\122\142\123\140\124\137\125\135" +
    "\126\116\127\114\130\113\131\112\132\111\133\110\134" +
    "\107\135\106\136\066\137\064\140\062\141\061\142\060" +
    "\143\057\144\056\145\055\146\036\147\035\150\034\151" +
    "\031\152\233\153\231\154\230\155\227\156\224\157\222" +
    "\160\220\161\217\162\134\163\133\164\132\165\131\166" +
    "\130\167\127\171\235\172\101\173\216\174\120\175\236" +
    "\176\041\177\042\200\045\201\054\202\145\203\212\204" +
    "\207\205\161\206\153\207\234\210\156\211\151\212\232" +
    "\213\077\214\100\215\102\216\103\217\104\220\105\221" +
    "\063\222\213\223\136\224\214\225\215\231\uffe4\232\uffe4" +
    "\234\162\236\uffe4\245\uffe4\262\013\265\166\267\210\271" +
    "\053\272\uffe4\273\141\001\002\000\004\244\u0139\001\002" +
    "\000\006\250\uff7a\252\uff7a\001\002\000\006\250\uff4c\252" +
    "\uff4c\001\002\000\006\250\uff4d\252\uff4d\001\002\000\006" +
    "\250\uff80\252\uff80\001\002\000\006\250\uff81\252\uff81\001" +
    "\002\000\006\250\uff4e\252\uff4e\001\002\000\006\250\uff82" +
    "\252\uff82\001\002\000\006\250\uff4f\252\uff4f\001\002\000" +
    "\006\250\uff50\252\uff50\001\002\000\006\250\uff83\252\uff83" +
    "\001\002\000\006\250\uff84\252\uff84\001\002\000\006\250" +
    "\uff51\252\uff51\001\002\000\006\250\uff52\252\uff52\001\002" +
    "\000\006\250\uff53\252\uff53\001\002\000\006\250\uff20\252" +
    "\uff20\001\002\000\016\237\350\241\343\242\346\250\344" +
    "\263\345\264\347\001\002\000\006\250\uff79\252\uff79\001" +
    "\002\000\006\250\uff21\252\uff21\001\002\000\006\250\uff09" +
    "\252\uff09\001\002\000\006\250\uff07\252\uff07\001\002\000" +
    "\006\250\uff06\252\uff06\001\002\000\006\250\uff17\252\uff17" +
    "\001\002\000\006\250\uff28\252\uff28\001\002\000\006\250" +
    "\uff29\252\uff29\001\002\000\006\250\uff54\252\uff54\001\002" +
    "\000\006\250\uff2a\252\uff2a\001\002\000\006\250\uff55\252" +
    "\uff55\001\002\000\006\250\uff2b\252\uff2b\001\002\000\006" +
    "\250\uff56\252\uff56\001\002\000\006\250\uff57\252\uff57\001" +
    "\002\000\006\250\uff2c\252\uff2c\001\002\000\006\250\uff2d" +
    "\252\uff2d\001\002\000\006\250\uff2e\252\uff2e\001\002\000" +
    "\006\250\uff1a\252\uff1a\001\002\000\006\250\uff2f\252\uff2f" +
    "\001\002\000\006\250\uff1d\252\uff1d\001\002\000\006\250" +
    "\uff19\252\uff19\001\002\000\006\250\uff15\252\uff15\001\002" +
    "\000\006\250\242\252\243\001\002\000\004\245\241\001" +
    "\002\000\006\020\uffeb\226\uffeb\001\002\000\152\026\260" +
    "\027\257\030\256\031\255\032\254\106\247\107\245\110" +
    "\325\111\321\112\317\113\315\114\314\115\313\116\304" +
    "\117\302\120\301\121\300\122\277\123\276\124\275\125" +
    "\274\126\272\127\271\130\267\131\265\132\264\133\263" +
    "\134\262\135\261\136\253\137\252\140\250\141\244\142" +
    "\323\143\322\144\320\145\316\146\307\147\306\150\305" +
    "\151\303\203\273\204\310\205\312\206\270\207\251\210" +
    "\311\211\266\212\246\266\327\267\330\274\331\001\002" +
    "\000\144\026\260\027\257\030\256\031\255\032\254\106" +
    "\247\107\245\110\325\111\321\112\317\113\315\114\314" +
    "\115\313\116\304\117\302\120\301\121\300\122\277\123" +
    "\276\124\275\125\274\126\272\127\271\130\267\131\265" +
    "\132\264\133\263\134\262\135\261\136\253\137\252\140" +
    "\250\141\244\142\323\143\322\144\320\145\316\146\307" +
    "\147\306\150\305\151\303\203\273\204\310\205\312\206" +
    "\270\207\251\210\311\211\266\212\246\001\002\000\030" +
    "\240\ufee5\241\ufee5\247\ufee5\251\ufee5\253\ufee5\254\ufee5\255" +
    "\ufee5\256\ufee5\257\ufee5\260\ufee5\261\ufee5\001\002\000\030" +
    "\240\ufeff\241\ufeff\247\ufeff\251\ufeff\253\ufeff\254\ufeff\255" +
    "\ufeff\256\ufeff\257\ufeff\260\ufeff\261\ufeff\001\002\000\030" +
    "\240\ufed5\241\ufed5\247\ufed5\251\ufed5\253\ufed5\254\ufed5\255" +
    "\ufed5\256\ufed5\257\ufed5\260\ufed5\261\ufed5\001\002\000\030" +
    "\240\uff00\241\uff00\247\uff00\251\uff00\253\uff00\254\uff00\255" +
    "\uff00\256\uff00\257\uff00\260\uff00\261\uff00\001\002\000\030" +
    "\240\ufee6\241\ufee6\247\ufee6\251\ufee6\253\ufee6\254\ufee6\255" +
    "\ufee6\256\ufee6\257\ufee6\260\ufee6\261\ufee6\001\002\000\030" +
    "\240\ufed8\241\ufed8\247\ufed8\251\ufed8\253\ufed8\254\ufed8\255" +
    "\ufed8\256\ufed8\257\ufed8\260\ufed8\261\ufed8\001\002\000\030" +
    "\240\ufee7\241\ufee7\247\ufee7\251\ufee7\253\ufee7\254\ufee7\255" +
    "\ufee7\256\ufee7\257\ufee7\260\ufee7\261\ufee7\001\002\000\030" +
    "\240\ufee8\241\ufee8\247\ufee8\251\ufee8\253\ufee8\254\ufee8\255" +
    "\ufee8\256\ufee8\257\ufee8\260\ufee8\261\ufee8\001\002\000\030" +
    "\240\uff01\241\uff01\247\uff01\251\uff01\253\uff01\254\uff01\255" +
    "\uff01\256\uff01\257\uff01\260\uff01\261\uff01\001\002\000\030" +
    "\240\uff02\241\uff02\247\uff02\251\uff02\253\uff02\254\uff02\255" +
    "\uff02\256\uff02\257\uff02\260\uff02\261\uff02\001\002\000\030" +
    "\240\uff03\241\uff03\247\uff03\251\uff03\253\uff03\254\uff03\255" +
    "\uff03\256\uff03\257\uff03\260\uff03\261\uff03\001\002\000\030" +
    "\240\uff04\241\uff04\247\uff04\251\uff04\253\uff04\254\uff04\255" +
    "\uff04\256\uff04\257\uff04\260\uff04\261\uff04\001\002\000\030" +
    "\240\uff05\241\uff05\247\uff05\251\uff05\253\uff05\254\uff05\255" +
    "\uff05\256\uff05\257\uff05\260\uff05\261\uff05\001\002\000\030" +
    "\240\ufee9\241\ufee9\247\ufee9\251\ufee9\253\ufee9\254\ufee9\255" +
    "\ufee9\256\ufee9\257\ufee9\260\ufee9\261\ufee9\001\002\000\030" +
    "\240\ufeea\241\ufeea\247\ufeea\251\ufeea\253\ufeea\254\ufeea\255" +
    "\ufeea\256\ufeea\257\ufeea\260\ufeea\261\ufeea\001\002\000\030" +
    "\240\ufeeb\241\ufeeb\247\ufeeb\251\ufeeb\253\ufeeb\254\ufeeb\255" +
    "\ufeeb\256\ufeeb\257\ufeeb\260\ufeeb\261\ufeeb\001\002\000\030" +
    "\240\ufeec\241\ufeec\247\ufeec\251\ufeec\253\ufeec\254\ufeec\255" +
    "\ufeec\256\ufeec\257\ufeec\260\ufeec\261\ufeec\001\002\000\030" +
    "\240\ufeed\241\ufeed\247\ufeed\251\ufeed\253\ufeed\254\ufeed\255" +
    "\ufeed\256\ufeed\257\ufeed\260\ufeed\261\ufeed\001\002\000\030" +
    "\240\ufed6\241\ufed6\247\ufed6\251\ufed6\253\ufed6\254\ufed6\255" +
    "\ufed6\256\ufed6\257\ufed6\260\ufed6\261\ufed6\001\002\000\030" +
    "\240\ufeee\241\ufeee\247\ufeee\251\ufeee\253\ufeee\254\ufeee\255" +
    "\ufeee\256\ufeee\257\ufeee\260\ufeee\261\ufeee\001\002\000\030" +
    "\240\ufed9\241\ufed9\247\ufed9\251\ufed9\253\ufed9\254\ufed9\255" +
    "\ufed9\256\ufed9\257\ufed9\260\ufed9\261\ufed9\001\002\000\030" +
    "\240\ufeef\241\ufeef\247\ufeef\251\ufeef\253\ufeef\254\ufeef\255" +
    "\ufeef\256\ufeef\257\ufeef\260\ufeef\261\ufeef\001\002\000\030" +
    "\240\ufef0\241\ufef0\247\ufef0\251\ufef0\253\ufef0\254\ufef0\255" +
    "\ufef0\256\ufef0\257\ufef0\260\ufef0\261\ufef0\001\002\000\030" +
    "\240\ufedc\241\ufedc\247\ufedc\251\ufedc\253\ufedc\254\ufedc\255" +
    "\ufedc\256\ufedc\257\ufedc\260\ufedc\261\ufedc\001\002\000\030" +
    "\240\ufef1\241\ufef1\247\ufef1\251\ufef1\253\ufef1\254\ufef1\255" +
    "\ufef1\256\ufef1\257\ufef1\260\ufef1\261\ufef1\001\002\000\030" +
    "\240\ufef2\241\ufef2\247\ufef2\251\ufef2\253\ufef2\254\ufef2\255" +
    "\ufef2\256\ufef2\257\ufef2\260\ufef2\261\ufef2\001\002\000\030" +
    "\240\ufef3\241\ufef3\247\ufef3\251\ufef3\253\ufef3\254\ufef3\255" +
    "\ufef3\256\ufef3\257\ufef3\260\ufef3\261\ufef3\001\002\000\030" +
    "\240\ufef4\241\ufef4\247\ufef4\251\ufef4\253\ufef4\254\ufef4\255" +
    "\ufef4\256\ufef4\257\ufef4\260\ufef4\261\ufef4\001\002\000\030" +
    "\240\ufef5\241\ufef5\247\ufef5\251\ufef5\253\ufef5\254\ufef5\255" +
    "\ufef5\256\ufef5\257\ufef5\260\ufef5\261\ufef5\001\002\000\030" +
    "\240\ufef6\241\ufef6\247\ufef6\251\ufef6\253\ufef6\254\ufef6\255" +
    "\ufef6\256\ufef6\257\ufef6\260\ufef6\261\ufef6\001\002\000\030" +
    "\240\ufef7\241\ufef7\247\ufef7\251\ufef7\253\ufef7\254\ufef7\255" +
    "\ufef7\256\ufef7\257\ufef7\260\ufef7\261\ufef7\001\002\000\030" +
    "\240\ufedd\241\ufedd\247\ufedd\251\ufedd\253\ufedd\254\ufedd\255" +
    "\ufedd\256\ufedd\257\ufedd\260\ufedd\261\ufedd\001\002\000\030" +
    "\240\ufef8\241\ufef8\247\ufef8\251\ufef8\253\ufef8\254\ufef8\255" +
    "\ufef8\256\ufef8\257\ufef8\260\ufef8\261\ufef8\001\002\000\030" +
    "\240\ufede\241\ufede\247\ufede\251\ufede\253\ufede\254\ufede\255" +
    "\ufede\256\ufede\257\ufede\260\ufede\261\ufede\001\002\000\030" +
    "\240\ufedf\241\ufedf\247\ufedf\251\ufedf\253\ufedf\254\ufedf\255" +
    "\ufedf\256\ufedf\257\ufedf\260\ufedf\261\ufedf\001\002\000\030" +
    "\240\ufee0\241\ufee0\247\ufee0\251\ufee0\253\ufee0\254\ufee0\255" +
    "\ufee0\256\ufee0\257\ufee0\260\ufee0\261\ufee0\001\002\000\030" +
    "\240\ufedb\241\ufedb\247\ufedb\251\ufedb\253\ufedb\254\ufedb\255" +
    "\ufedb\256\ufedb\257\ufedb\260\ufedb\261\ufedb\001\002\000\030" +
    "\240\ufed7\241\ufed7\247\ufed7\251\ufed7\253\ufed7\254\ufed7\255" +
    "\ufed7\256\ufed7\257\ufed7\260\ufed7\261\ufed7\001\002\000\030" +
    "\240\ufeda\241\ufeda\247\ufeda\251\ufeda\253\ufeda\254\ufeda\255" +
    "\ufeda\256\ufeda\257\ufeda\260\ufeda\261\ufeda\001\002\000\030" +
    "\240\ufef9\241\ufef9\247\ufef9\251\ufef9\253\ufef9\254\ufef9\255" +
    "\ufef9\256\ufef9\257\ufef9\260\ufef9\261\ufef9\001\002\000\030" +
    "\240\ufefa\241\ufefa\247\ufefa\251\ufefa\253\ufefa\254\ufefa\255" +
    "\ufefa\256\ufefa\257\ufefa\260\ufefa\261\ufefa\001\002\000\030" +
    "\240\ufefb\241\ufefb\247\ufefb\251\ufefb\253\ufefb\254\ufefb\255" +
    "\ufefb\256\ufefb\257\ufefb\260\ufefb\261\ufefb\001\002\000\030" +
    "\240\ufee1\241\ufee1\247\ufee1\251\ufee1\253\ufee1\254\ufee1\255" +
    "\ufee1\256\ufee1\257\ufee1\260\ufee1\261\ufee1\001\002\000\030" +
    "\240\ufefc\241\ufefc\247\ufefc\251\ufefc\253\ufefc\254\ufefc\255" +
    "\ufefc\256\ufefc\257\ufefc\260\ufefc\261\ufefc\001\002\000\030" +
    "\240\ufee2\241\ufee2\247\ufee2\251\ufee2\253\ufee2\254\ufee2\255" +
    "\ufee2\256\ufee2\257\ufee2\260\ufee2\261\ufee2\001\002\000\030" +
    "\240\ufefd\241\ufefd\247\ufefd\251\ufefd\253\ufefd\254\ufefd\255" +
    "\ufefd\256\ufefd\257\ufefd\260\ufefd\261\ufefd\001\002\000\030" +
    "\240\ufee3\241\ufee3\247\ufee3\251\ufee3\253\ufee3\254\ufee3\255" +
    "\ufee3\256\ufee3\257\ufee3\260\ufee3\261\ufee3\001\002\000\030" +
    "\240\ufee4\241\ufee4\247\ufee4\251\ufee4\253\ufee4\254\ufee4\255" +
    "\ufee4\256\ufee4\257\ufee4\260\ufee4\261\ufee4\001\002\000\004" +
    "\247\326\001\002\000\030\240\ufefe\241\ufefe\247\ufefe\251" +
    "\ufefe\253\ufefe\254\ufefe\255\ufefe\256\ufefe\257\ufefe\260\ufefe" +
    "\261\ufefe\001\002\000\u011c\014\uffe0\015\uffe0\016\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075" +
    "\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0" +
    "\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112" +
    "\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0" +
    "\121\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127" +
    "\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134\uffe0\135\uffe0" +
    "\136\uffe0\137\uffe0\140\uffe0\141\uffe0\142\uffe0\143\uffe0\144" +
    "\uffe0\145\uffe0\146\uffe0\147\uffe0\150\uffe0\151\uffe0\152\uffe0" +
    "\153\uffe0\154\uffe0\155\uffe0\156\uffe0\157\uffe0\160\uffe0\161" +
    "\uffe0\162\uffe0\163\uffe0\164\uffe0\165\uffe0\166\uffe0\167\uffe0" +
    "\171\uffe0\172\uffe0\173\uffe0\174\uffe0\175\uffe0\176\uffe0\177" +
    "\uffe0\200\uffe0\201\uffe0\202\uffe0\203\uffe0\204\uffe0\205\uffe0" +
    "\206\uffe0\207\uffe0\210\uffe0\211\uffe0\212\uffe0\213\uffe0\214" +
    "\uffe0\215\uffe0\216\uffe0\217\uffe0\220\uffe0\221\uffe0\222\uffe0" +
    "\223\uffe0\224\uffe0\225\uffe0\231\uffe0\232\uffe0\234\uffe0\236" +
    "\uffe0\245\uffe0\262\uffe0\265\uffe0\267\uffe0\271\uffe0\272\uffe0" +
    "\273\uffe0\001\002\000\004\247\342\001\002\000\004\247" +
    "\341\001\002\000\004\247\340\001\002\000\004\241\333" +
    "\001\002\000\006\266\334\267\335\001\002\000\004\247" +
    "\337\001\002\000\004\247\336\001\002\000\u011c\014\uffd7" +
    "\015\uffd7\016\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101" +
    "\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7" +
    "\110\uffd7\111\uffd7\112\uffd7\113\uffd7\114\uffd7\115\uffd7\116" +
    "\uffd7\117\uffd7\120\uffd7\121\uffd7\122\uffd7\123\uffd7\124\uffd7" +
    "\125\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7\132\uffd7\133" +
    "\uffd7\134\uffd7\135\uffd7\136\uffd7\137\uffd7\140\uffd7\141\uffd7" +
    "\142\uffd7\143\uffd7\144\uffd7\145\uffd7\146\uffd7\147\uffd7\150" +
    "\uffd7\151\uffd7\152\uffd7\153\uffd7\154\uffd7\155\uffd7\156\uffd7" +
    "\157\uffd7\160\uffd7\161\uffd7\162\uffd7\163\uffd7\164\uffd7\165" +
    "\uffd7\166\uffd7\167\uffd7\171\uffd7\172\uffd7\173\uffd7\174\uffd7" +
    "\175\uffd7\176\uffd7\177\uffd7\200\uffd7\201\uffd7\202\uffd7\203" +
    "\uffd7\204\uffd7\205\uffd7\206\uffd7\207\uffd7\210\uffd7\211\uffd7" +
    "\212\uffd7\213\uffd7\214\uffd7\215\uffd7\216\uffd7\217\uffd7\220" +
    "\uffd7\221\uffd7\222\uffd7\223\uffd7\224\uffd7\225\uffd7\231\uffd7" +
    "\232\uffd7\234\uffd7\236\uffd7\245\uffd7\262\uffd7\265\uffd7\267" +
    "\uffd7\271\uffd7\272\uffd7\273\uffd7\001\002\000\u011c\014\uffd8" +
    "\015\uffd8\016\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8" +
    "\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101" +
    "\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8" +
    "\110\uffd8\111\uffd8\112\uffd8\113\uffd8\114\uffd8\115\uffd8\116" +
    "\uffd8\117\uffd8\120\uffd8\121\uffd8\122\uffd8\123\uffd8\124\uffd8" +
    "\125\uffd8\126\uffd8\127\uffd8\130\uffd8\131\uffd8\132\uffd8\133" +
    "\uffd8\134\uffd8\135\uffd8\136\uffd8\137\uffd8\140\uffd8\141\uffd8" +
    "\142\uffd8\143\uffd8\144\uffd8\145\uffd8\146\uffd8\147\uffd8\150" +
    "\uffd8\151\uffd8\152\uffd8\153\uffd8\154\uffd8\155\uffd8\156\uffd8" +
    "\157\uffd8\160\uffd8\161\uffd8\162\uffd8\163\uffd8\164\uffd8\165" +
    "\uffd8\166\uffd8\167\uffd8\171\uffd8\172\uffd8\173\uffd8\174\uffd8" +
    "\175\uffd8\176\uffd8\177\uffd8\200\uffd8\201\uffd8\202\uffd8\203" +
    "\uffd8\204\uffd8\205\uffd8\206\uffd8\207\uffd8\210\uffd8\211\uffd8" +
    "\212\uffd8\213\uffd8\214\uffd8\215\uffd8\216\uffd8\217\uffd8\220" +
    "\uffd8\221\uffd8\222\uffd8\223\uffd8\224\uffd8\225\uffd8\231\uffd8" +
    "\232\uffd8\234\uffd8\236\uffd8\245\uffd8\262\uffd8\265\uffd8\267" +
    "\uffd8\271\uffd8\272\uffd8\273\uffd8\001\002\000\u011c\014\uffde" +
    "\015\uffde\016\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101" +
    "\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106\uffde\107\uffde" +
    "\110\uffde\111\uffde\112\uffde\113\uffde\114\uffde\115\uffde\116" +
    "\uffde\117\uffde\120\uffde\121\uffde\122\uffde\123\uffde\124\uffde" +
    "\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde\132\uffde\133" +
    "\uffde\134\uffde\135\uffde\136\uffde\137\uffde\140\uffde\141\uffde" +
    "\142\uffde\143\uffde\144\uffde\145\uffde\146\uffde\147\uffde\150" +
    "\uffde\151\uffde\152\uffde\153\uffde\154\uffde\155\uffde\156\uffde" +
    "\157\uffde\160\uffde\161\uffde\162\uffde\163\uffde\164\uffde\165" +
    "\uffde\166\uffde\167\uffde\171\uffde\172\uffde\173\uffde\174\uffde" +
    "\175\uffde\176\uffde\177\uffde\200\uffde\201\uffde\202\uffde\203" +
    "\uffde\204\uffde\205\uffde\206\uffde\207\uffde\210\uffde\211\uffde" +
    "\212\uffde\213\uffde\214\uffde\215\uffde\216\uffde\217\uffde\220" +
    "\uffde\221\uffde\222\uffde\223\uffde\224\uffde\225\uffde\231\uffde" +
    "\232\uffde\234\uffde\236\uffde\245\uffde\262\uffde\265\uffde\267" +
    "\uffde\271\uffde\272\uffde\273\uffde\001\002\000\u011c\014\uffdd" +
    "\015\uffdd\016\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101" +
    "\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd" +
    "\110\uffdd\111\uffdd\112\uffdd\113\uffdd\114\uffdd\115\uffdd\116" +
    "\uffdd\117\uffdd\120\uffdd\121\uffdd\122\uffdd\123\uffdd\124\uffdd" +
    "\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\132\uffdd\133" +
    "\uffdd\134\uffdd\135\uffdd\136\uffdd\137\uffdd\140\uffdd\141\uffdd" +
    "\142\uffdd\143\uffdd\144\uffdd\145\uffdd\146\uffdd\147\uffdd\150" +
    "\uffdd\151\uffdd\152\uffdd\153\uffdd\154\uffdd\155\uffdd\156\uffdd" +
    "\157\uffdd\160\uffdd\161\uffdd\162\uffdd\163\uffdd\164\uffdd\165" +
    "\uffdd\166\uffdd\167\uffdd\171\uffdd\172\uffdd\173\uffdd\174\uffdd" +
    "\175\uffdd\176\uffdd\177\uffdd\200\uffdd\201\uffdd\202\uffdd\203" +
    "\uffdd\204\uffdd\205\uffdd\206\uffdd\207\uffdd\210\uffdd\211\uffdd" +
    "\212\uffdd\213\uffdd\214\uffdd\215\uffdd\216\uffdd\217\uffdd\220" +
    "\uffdd\221\uffdd\222\uffdd\223\uffdd\224\uffdd\225\uffdd\231\uffdd" +
    "\232\uffdd\234\uffdd\236\uffdd\245\uffdd\262\uffdd\265\uffdd\267" +
    "\uffdd\271\uffdd\272\uffdd\273\uffdd\001\002\000\u011c\014\uffdf" +
    "\015\uffdf\016\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf" +
    "\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf" +
    "\110\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf\115\uffdf\116" +
    "\uffdf\117\uffdf\120\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf" +
    "\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf\133" +
    "\uffdf\134\uffdf\135\uffdf\136\uffdf\137\uffdf\140\uffdf\141\uffdf" +
    "\142\uffdf\143\uffdf\144\uffdf\145\uffdf\146\uffdf\147\uffdf\150" +
    "\uffdf\151\uffdf\152\uffdf\153\uffdf\154\uffdf\155\uffdf\156\uffdf" +
    "\157\uffdf\160\uffdf\161\uffdf\162\uffdf\163\uffdf\164\uffdf\165" +
    "\uffdf\166\uffdf\167\uffdf\171\uffdf\172\uffdf\173\uffdf\174\uffdf" +
    "\175\uffdf\176\uffdf\177\uffdf\200\uffdf\201\uffdf\202\uffdf\203" +
    "\uffdf\204\uffdf\205\uffdf\206\uffdf\207\uffdf\210\uffdf\211\uffdf" +
    "\212\uffdf\213\uffdf\214\uffdf\215\uffdf\216\uffdf\217\uffdf\220" +
    "\uffdf\221\uffdf\222\uffdf\223\uffdf\224\uffdf\225\uffdf\231\uffdf" +
    "\232\uffdf\234\uffdf\236\uffdf\245\uffdf\262\uffdf\265\uffdf\267" +
    "\uffdf\271\uffdf\272\uffdf\273\uffdf\001\002\000\004\241\u0137" +
    "\001\002\000\022\010\u0100\011\372\012\u0102\237\377\266" +
    "\374\267\376\274\373\275\370\001\002\000\004\266\366" +
    "\001\002\000\004\242\364\001\002\000\004\266\362\001" +
    "\002\000\010\240\353\266\352\267\351\001\002\000\022" +
    "\237\uffa4\240\uffa4\241\uffa4\242\uffa4\243\uffa4\246\uffa4\247" +
    "\uffa4\266\361\001\002\000\022\237\uffa3\240\uffa3\241\uffa3" +
    "\242\uffa3\243\uffa3\246\uffa3\247\uffa3\267\360\001\002\000" +
    "\004\247\357\001\002\000\004\240\355\001\002\000\004" +
    "\247\356\001\002\000\u011c\014\uffdb\015\uffdb\016\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb" +
    "\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb\111\uffdb\112" +
    "\uffdb\113\uffdb\114\uffdb\115\uffdb\116\uffdb\117\uffdb\120\uffdb" +
    "\121\uffdb\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\127" +
    "\uffdb\130\uffdb\131\uffdb\132\uffdb\133\uffdb\134\uffdb\135\uffdb" +
    "\136\uffdb\137\uffdb\140\uffdb\141\uffdb\142\uffdb\143\uffdb\144" +
    "\uffdb\145\uffdb\146\uffdb\147\uffdb\150\uffdb\151\uffdb\152\uffdb" +
    "\153\uffdb\154\uffdb\155\uffdb\156\uffdb\157\uffdb\160\uffdb\161" +
    "\uffdb\162\uffdb\163\uffdb\164\uffdb\165\uffdb\166\uffdb\167\uffdb" +
    "\171\uffdb\172\uffdb\173\uffdb\174\uffdb\175\uffdb\176\uffdb\177" +
    "\uffdb\200\uffdb\201\uffdb\202\uffdb\203\uffdb\204\uffdb\205\uffdb" +
    "\206\uffdb\207\uffdb\210\uffdb\211\uffdb\212\uffdb\213\uffdb\214" +
    "\uffdb\215\uffdb\216\uffdb\217\uffdb\220\uffdb\221\uffdb\222\uffdb" +
    "\223\uffdb\224\uffdb\225\uffdb\231\uffdb\232\uffdb\234\uffdb\236" +
    "\uffdb\245\uffdb\262\uffdb\265\uffdb\267\uffdb\271\uffdb\272\uffdb" +
    "\273\uffdb\001\002\000\u011c\014\uffdc\015\uffdc\016\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\113\uffdc\114\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc" +
    "\121\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127" +
    "\uffdc\130\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc\135\uffdc" +
    "\136\uffdc\137\uffdc\140\uffdc\141\uffdc\142\uffdc\143\uffdc\144" +
    "\uffdc\145\uffdc\146\uffdc\147\uffdc\150\uffdc\151\uffdc\152\uffdc" +
    "\153\uffdc\154\uffdc\155\uffdc\156\uffdc\157\uffdc\160\uffdc\161" +
    "\uffdc\162\uffdc\163\uffdc\164\uffdc\165\uffdc\166\uffdc\167\uffdc" +
    "\171\uffdc\172\uffdc\173\uffdc\174\uffdc\175\uffdc\176\uffdc\177" +
    "\uffdc\200\uffdc\201\uffdc\202\uffdc\203\uffdc\204\uffdc\205\uffdc" +
    "\206\uffdc\207\uffdc\210\uffdc\211\uffdc\212\uffdc\213\uffdc\214" +
    "\uffdc\215\uffdc\216\uffdc\217\uffdc\220\uffdc\221\uffdc\222\uffdc" +
    "\223\uffdc\224\uffdc\225\uffdc\231\uffdc\232\uffdc\234\uffdc\236" +
    "\uffdc\245\uffdc\262\uffdc\265\uffdc\267\uffdc\271\uffdc\272\uffdc" +
    "\273\uffdc\001\002\000\020\237\uffa1\240\uffa1\241\uffa1\242" +
    "\uffa1\243\uffa1\246\uffa1\247\uffa1\001\002\000\020\237\uffa2" +
    "\240\uffa2\241\uffa2\242\uffa2\243\uffa2\246\uffa2\247\uffa2\001" +
    "\002\000\004\247\363\001\002\000\u011c\014\uffc8\015\uffc8" +
    "\016\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102" +
    "\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\112\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8\117" +
    "\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8" +
    "\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132\uffc8\133\uffc8\134" +
    "\uffc8\135\uffc8\136\uffc8\137\uffc8\140\uffc8\141\uffc8\142\uffc8" +
    "\143\uffc8\144\uffc8\145\uffc8\146\uffc8\147\uffc8\150\uffc8\151" +
    "\uffc8\152\uffc8\153\uffc8\154\uffc8\155\uffc8\156\uffc8\157\uffc8" +
    "\160\uffc8\161\uffc8\162\uffc8\163\uffc8\164\uffc8\165\uffc8\166" +
    "\uffc8\167\uffc8\171\uffc8\172\uffc8\173\uffc8\174\uffc8\175\uffc8" +
    "\176\uffc8\177\uffc8\200\uffc8\201\uffc8\202\uffc8\203\uffc8\204" +
    "\uffc8\205\uffc8\206\uffc8\207\uffc8\210\uffc8\211\uffc8\212\uffc8" +
    "\213\uffc8\214\uffc8\215\uffc8\216\uffc8\217\uffc8\220\uffc8\221" +
    "\uffc8\222\uffc8\223\uffc8\224\uffc8\225\uffc8\231\uffc8\232\uffc8" +
    "\234\uffc8\236\uffc8\245\uffc8\262\uffc8\265\uffc8\267\uffc8\271" +
    "\uffc8\272\uffc8\273\uffc8\001\002\000\004\247\365\001\002" +
    "\000\u011c\014\uffd5\015\uffd5\016\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5" +
    "\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5\113\uffd5\114" +
    "\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121\uffd5\122\uffd5" +
    "\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131" +
    "\uffd5\132\uffd5\133\uffd5\134\uffd5\135\uffd5\136\uffd5\137\uffd5" +
    "\140\uffd5\141\uffd5\142\uffd5\143\uffd5\144\uffd5\145\uffd5\146" +
    "\uffd5\147\uffd5\150\uffd5\151\uffd5\152\uffd5\153\uffd5\154\uffd5" +
    "\155\uffd5\156\uffd5\157\uffd5\160\uffd5\161\uffd5\162\uffd5\163" +
    "\uffd5\164\uffd5\165\uffd5\166\uffd5\167\uffd5\171\uffd5\172\uffd5" +
    "\173\uffd5\174\uffd5\175\uffd5\176\uffd5\177\uffd5\200\uffd5\201" +
    "\uffd5\202\uffd5\203\uffd5\204\uffd5\205\uffd5\206\uffd5\207\uffd5" +
    "\210\uffd5\211\uffd5\212\uffd5\213\uffd5\214\uffd5\215\uffd5\216" +
    "\uffd5\217\uffd5\220\uffd5\221\uffd5\222\uffd5\223\uffd5\224\uffd5" +
    "\225\uffd5\231\uffd5\232\uffd5\234\uffd5\236\uffd5\245\uffd5\262" +
    "\uffd5\265\uffd5\267\uffd5\271\uffd5\272\uffd5\273\uffd5\001\002" +
    "\000\004\247\367\001\002\000\u011c\014\uffc7\015\uffc7\016" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7" +
    "\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7" +
    "\120\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\125\uffc7\126" +
    "\uffc7\127\uffc7\130\uffc7\131\uffc7\132\uffc7\133\uffc7\134\uffc7" +
    "\135\uffc7\136\uffc7\137\uffc7\140\uffc7\141\uffc7\142\uffc7\143" +
    "\uffc7\144\uffc7\145\uffc7\146\uffc7\147\uffc7\150\uffc7\151\uffc7" +
    "\152\uffc7\153\uffc7\154\uffc7\155\uffc7\156\uffc7\157\uffc7\160" +
    "\uffc7\161\uffc7\162\uffc7\163\uffc7\164\uffc7\165\uffc7\166\uffc7" +
    "\167\uffc7\171\uffc7\172\uffc7\173\uffc7\174\uffc7\175\uffc7\176" +
    "\uffc7\177\uffc7\200\uffc7\201\uffc7\202\uffc7\203\uffc7\204\uffc7" +
    "\205\uffc7\206\uffc7\207\uffc7\210\uffc7\211\uffc7\212\uffc7\213" +
    "\uffc7\214\uffc7\215\uffc7\216\uffc7\217\uffc7\220\uffc7\221\uffc7" +
    "\222\uffc7\223\uffc7\224\uffc7\225\uffc7\231\uffc7\232\uffc7\234" +
    "\uffc7\236\uffc7\245\uffc7\262\uffc7\265\uffc7\267\uffc7\271\uffc7" +
    "\272\uffc7\273\uffc7\001\002\000\004\247\uff86\001\002\000" +
    "\004\247\u0136\001\002\000\004\247\uff89\001\002\000\004" +
    "\247\uff85\001\002\000\014\241\uffa3\242\uffa3\243\uffa3\247" +
    "\uff8a\267\360\001\002\000\010\241\u0103\242\u0104\243\u0105" +
    "\001\002\000\020\241\uffa4\242\uffa4\243\uffa4\247\uff8b\263" +
    "\u012a\264\u012b\266\361\001\002\000\010\237\377\266\352" +
    "\267\351\001\002\000\004\247\uff88\001\002\000\012\241" +
    "\u0103\242\u0104\243\u0105\247\u0106\001\002\000\004\247\uff87" +
    "\001\002\000\010\237\uffa9\266\uffa9\267\uffa9\001\002\000" +
    "\010\237\uffa8\266\uffa8\267\uffa8\001\002\000\010\237\uffa7" +
    "\266\uffa7\267\uffa7\001\002\000\u011c\014\uffc2\015\uffc2\016" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111" +
    "\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2\116\uffc2\117\uffc2" +
    "\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124\uffc2\125\uffc2\126" +
    "\uffc2\127\uffc2\130\uffc2\131\uffc2\132\uffc2\133\uffc2\134\uffc2" +
    "\135\uffc2\136\uffc2\137\uffc2\140\uffc2\141\uffc2\142\uffc2\143" +
    "\uffc2\144\uffc2\145\uffc2\146\uffc2\147\uffc2\150\uffc2\151\uffc2" +
    "\152\uffc2\153\uffc2\154\uffc2\155\uffc2\156\uffc2\157\uffc2\160" +
    "\uffc2\161\uffc2\162\uffc2\163\uffc2\164\uffc2\165\uffc2\166\uffc2" +
    "\167\uffc2\171\uffc2\172\uffc2\173\uffc2\174\uffc2\175\uffc2\176" +
    "\uffc2\177\uffc2\200\uffc2\201\uffc2\202\uffc2\203\uffc2\204\uffc2" +
    "\205\uffc2\206\uffc2\207\uffc2\210\uffc2\211\uffc2\212\uffc2\213" +
    "\uffc2\214\uffc2\215\uffc2\216\uffc2\217\uffc2\220\uffc2\221\uffc2" +
    "\222\uffc2\223\uffc2\224\uffc2\225\uffc2\231\uffc2\232\uffc2\234" +
    "\uffc2\236\uffc2\245\uffc2\262\uffc2\265\uffc2\267\uffc2\271\uffc2" +
    "\272\uffc2\273\uffc2\001\002\000\010\237\377\266\352\267" +
    "\351\001\002\000\004\247\u010b\001\002\000\004\247\u010a" +
    "\001\002\000\u011c\014\uffc1\015\uffc1\016\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1" +
    "\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1" +
    "\122\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130" +
    "\uffc1\131\uffc1\132\uffc1\133\uffc1\134\uffc1\135\uffc1\136\uffc1" +
    "\137\uffc1\140\uffc1\141\uffc1\142\uffc1\143\uffc1\144\uffc1\145" +
    "\uffc1\146\uffc1\147\uffc1\150\uffc1\151\uffc1\152\uffc1\153\uffc1" +
    "\154\uffc1\155\uffc1\156\uffc1\157\uffc1\160\uffc1\161\uffc1\162" +
    "\uffc1\163\uffc1\164\uffc1\165\uffc1\166\uffc1\167\uffc1\171\uffc1" +
    "\172\uffc1\173\uffc1\174\uffc1\175\uffc1\176\uffc1\177\uffc1\200" +
    "\uffc1\201\uffc1\202\uffc1\203\uffc1\204\uffc1\205\uffc1\206\uffc1" +
    "\207\uffc1\210\uffc1\211\uffc1\212\uffc1\213\uffc1\214\uffc1\215" +
    "\uffc1\216\uffc1\217\uffc1\220\uffc1\221\uffc1\222\uffc1\223\uffc1" +
    "\224\uffc1\225\uffc1\231\uffc1\232\uffc1\234\uffc1\236\uffc1\245" +
    "\uffc1\262\uffc1\265\uffc1\267\uffc1\271\uffc1\272\uffc1\273\uffc1" +
    "\001\002\000\u011c\014\uffc0\015\uffc0\016\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0\113" +
    "\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0\120\uffc0\121\uffc0" +
    "\122\uffc0\123\uffc0\124\uffc0\125\uffc0\126\uffc0\127\uffc0\130" +
    "\uffc0\131\uffc0\132\uffc0\133\uffc0\134\uffc0\135\uffc0\136\uffc0" +
    "\137\uffc0\140\uffc0\141\uffc0\142\uffc0\143\uffc0\144\uffc0\145" +
    "\uffc0\146\uffc0\147\uffc0\150\uffc0\151\uffc0\152\uffc0\153\uffc0" +
    "\154\uffc0\155\uffc0\156\uffc0\157\uffc0\160\uffc0\161\uffc0\162" +
    "\uffc0\163\uffc0\164\uffc0\165\uffc0\166\uffc0\167\uffc0\171\uffc0" +
    "\172\uffc0\173\uffc0\174\uffc0\175\uffc0\176\uffc0\177\uffc0\200" +
    "\uffc0\201\uffc0\202\uffc0\203\uffc0\204\uffc0\205\uffc0\206\uffc0" +
    "\207\uffc0\210\uffc0\211\uffc0\212\uffc0\213\uffc0\214\uffc0\215" +
    "\uffc0\216\uffc0\217\uffc0\220\uffc0\221\uffc0\222\uffc0\223\uffc0" +
    "\224\uffc0\225\uffc0\231\uffc0\232\uffc0\234\uffc0\236\uffc0\245" +
    "\uffc0\262\uffc0\265\uffc0\267\uffc0\271\uffc0\272\uffc0\273\uffc0" +
    "\001\002\000\012\240\u0121\241\u0103\242\u0104\243\u0105\001" +
    "\002\000\010\241\u0103\242\u0104\243\u0105\001\002\000\010" +
    "\237\377\266\352\267\351\001\002\000\014\237\377\240" +
    "\u011f\241\u0103\242\u0104\243\u0105\001\002\000\014\237\377" +
    "\240\u0113\241\u0103\242\u0104\243\u0105\001\002\000\012\237" +
    "\377\241\u0103\242\u0104\243\u0105\001\002\000\012\240\u0118" +
    "\241\u0103\242\u0104\243\u0105\001\002\000\016\237\uffb7\240" +
    "\uffb7\241\uffb7\242\uffb7\243\uffb7\247\uffb7\001\002\000\012" +
    "\240\uffb2\241\uffb2\242\uffb2\243\uffb2\001\002\000\010\237" +
    "\377\266\352\267\351\001\002\000\016\237\uffa6\240\uffa6" +
    "\241\uffa6\242\uffa6\243\uffa6\247\uffa6\001\002\000\012\240" +
    "\uffb3\241\uffb3\242\uffb3\243\uffb3\001\002\000\016\237\uffb4" +
    "\240\uffb4\241\uffb4\242\uffb4\243\uffb4\247\uffb4\001\002\000" +
    "\004\237\377\001\002\000\012\240\uffb0\241\uffb0\242\uffb0" +
    "\243\uffb0\001\002\000\006\266\352\267\351\001\002\000" +
    "\012\240\uffb1\241\uffb1\242\uffb1\243\uffb1\001\002\000\016" +
    "\237\uffa5\240\uffa5\241\uffa5\242\uffa5\243\uffa5\247\uffa5\001" +
    "\002\000\012\240\u0120\241\u0103\242\u0104\243\u0105\001\002" +
    "\000\016\237\uffb6\240\uffb6\241\uffb6\242\uffb6\243\uffb6\247" +
    "\uffb6\001\002\000\016\237\uffb5\240\uffb5\241\uffb5\242\uffb5" +
    "\243\uffb5\247\uffb5\001\002\000\016\237\uffbb\240\uffbb\241" +
    "\uffbb\242\uffbb\243\uffbb\247\uffbb\001\002\000\006\266\352" +
    "\267\351\001\002\000\012\240\u0124\241\u0103\242\u0104\243" +
    "\u0105\001\002\000\016\237\uffba\240\uffba\241\uffba\242\uffba" +
    "\243\uffba\247\uffba\001\002\000\012\240\u0129\241\u0103\242" +
    "\u0104\243\u0105\001\002\000\010\237\377\266\352\267\351" +
    "\001\002\000\004\240\u0128\001\002\000\016\237\uffb8\240" +
    "\uffb8\241\uffb8\242\uffb8\243\uffb8\247\uffb8\001\002\000\016" +
    "\237\uffb9\240\uffb9\241\uffb9\242\uffb9\243\uffb9\247\uffb9\001" +
    "\002\000\004\266\u012e\001\002\000\004\266\u012c\001\002" +
    "\000\004\247\u012d\001\002\000\u011c\014\uffc6\015\uffc6\016" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6" +
    "\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111" +
    "\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6" +
    "\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6\125\uffc6\126" +
    "\uffc6\127\uffc6\130\uffc6\131\uffc6\132\uffc6\133\uffc6\134\uffc6" +
    "\135\uffc6\136\uffc6\137\uffc6\140\uffc6\141\uffc6\142\uffc6\143" +
    "\uffc6\144\uffc6\145\uffc6\146\uffc6\147\uffc6\150\uffc6\151\uffc6" +
    "\152\uffc6\153\uffc6\154\uffc6\155\uffc6\156\uffc6\157\uffc6\160" +
    "\uffc6\161\uffc6\162\uffc6\163\uffc6\164\uffc6\165\uffc6\166\uffc6" +
    "\167\uffc6\171\uffc6\172\uffc6\173\uffc6\174\uffc6\175\uffc6\176" +
    "\uffc6\177\uffc6\200\uffc6\201\uffc6\202\uffc6\203\uffc6\204\uffc6" +
    "\205\uffc6\206\uffc6\207\uffc6\210\uffc6\211\uffc6\212\uffc6\213" +
    "\uffc6\214\uffc6\215\uffc6\216\uffc6\217\uffc6\220\uffc6\221\uffc6" +
    "\222\uffc6\223\uffc6\224\uffc6\225\uffc6\231\uffc6\232\uffc6\234" +
    "\uffc6\236\uffc6\245\uffc6\262\uffc6\265\uffc6\267\uffc6\271\uffc6" +
    "\272\uffc6\273\uffc6\001\002\000\004\247\u012f\001\002\000" +
    "\u011c\014\uffc5\015\uffc5\016\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106" +
    "\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5" +
    "\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5\122\uffc5\123" +
    "\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5\131\uffc5" +
    "\132\uffc5\133\uffc5\134\uffc5\135\uffc5\136\uffc5\137\uffc5\140" +
    "\uffc5\141\uffc5\142\uffc5\143\uffc5\144\uffc5\145\uffc5\146\uffc5" +
    "\147\uffc5\150\uffc5\151\uffc5\152\uffc5\153\uffc5\154\uffc5\155" +
    "\uffc5\156\uffc5\157\uffc5\160\uffc5\161\uffc5\162\uffc5\163\uffc5" +
    "\164\uffc5\165\uffc5\166\uffc5\167\uffc5\171\uffc5\172\uffc5\173" +
    "\uffc5\174\uffc5\175\uffc5\176\uffc5\177\uffc5\200\uffc5\201\uffc5" +
    "\202\uffc5\203\uffc5\204\uffc5\205\uffc5\206\uffc5\207\uffc5\210" +
    "\uffc5\211\uffc5\212\uffc5\213\uffc5\214\uffc5\215\uffc5\216\uffc5" +
    "\217\uffc5\220\uffc5\221\uffc5\222\uffc5\223\uffc5\224\uffc5\225" +
    "\uffc5\231\uffc5\232\uffc5\234\uffc5\236\uffc5\245\uffc5\262\uffc5" +
    "\265\uffc5\267\uffc5\271\uffc5\272\uffc5\273\uffc5\001\002\000" +
    "\006\266\352\267\351\001\002\000\012\241\u0103\242\u0104" +
    "\243\u0105\247\u0134\001\002\000\006\266\352\267\351\001" +
    "\002\000\012\241\u0103\242\u0104\243\u0105\247\u0135\001\002" +
    "\000\u011c\014\uffc4\015\uffc4\016\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\114" +
    "\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4" +
    "\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130\uffc4\131" +
    "\uffc4\132\uffc4\133\uffc4\134\uffc4\135\uffc4\136\uffc4\137\uffc4" +
    "\140\uffc4\141\uffc4\142\uffc4\143\uffc4\144\uffc4\145\uffc4\146" +
    "\uffc4\147\uffc4\150\uffc4\151\uffc4\152\uffc4\153\uffc4\154\uffc4" +
    "\155\uffc4\156\uffc4\157\uffc4\160\uffc4\161\uffc4\162\uffc4\163" +
    "\uffc4\164\uffc4\165\uffc4\166\uffc4\167\uffc4\171\uffc4\172\uffc4" +
    "\173\uffc4\174\uffc4\175\uffc4\176\uffc4\177\uffc4\200\uffc4\201" +
    "\uffc4\202\uffc4\203\uffc4\204\uffc4\205\uffc4\206\uffc4\207\uffc4" +
    "\210\uffc4\211\uffc4\212\uffc4\213\uffc4\214\uffc4\215\uffc4\216" +
    "\uffc4\217\uffc4\220\uffc4\221\uffc4\222\uffc4\223\uffc4\224\uffc4" +
    "\225\uffc4\231\uffc4\232\uffc4\234\uffc4\236\uffc4\245\uffc4\262" +
    "\uffc4\265\uffc4\267\uffc4\271\uffc4\272\uffc4\273\uffc4\001\002" +
    "\000\u011c\014\uffc3\015\uffc3\016\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3" +
    "\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\114" +
    "\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3" +
    "\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3\131" +
    "\uffc3\132\uffc3\133\uffc3\134\uffc3\135\uffc3\136\uffc3\137\uffc3" +
    "\140\uffc3\141\uffc3\142\uffc3\143\uffc3\144\uffc3\145\uffc3\146" +
    "\uffc3\147\uffc3\150\uffc3\151\uffc3\152\uffc3\153\uffc3\154\uffc3" +
    "\155\uffc3\156\uffc3\157\uffc3\160\uffc3\161\uffc3\162\uffc3\163" +
    "\uffc3\164\uffc3\165\uffc3\166\uffc3\167\uffc3\171\uffc3\172\uffc3" +
    "\173\uffc3\174\uffc3\175\uffc3\176\uffc3\177\uffc3\200\uffc3\201" +
    "\uffc3\202\uffc3\203\uffc3\204\uffc3\205\uffc3\206\uffc3\207\uffc3" +
    "\210\uffc3\211\uffc3\212\uffc3\213\uffc3\214\uffc3\215\uffc3\216" +
    "\uffc3\217\uffc3\220\uffc3\221\uffc3\222\uffc3\223\uffc3\224\uffc3" +
    "\225\uffc3\231\uffc3\232\uffc3\234\uffc3\236\uffc3\245\uffc3\262" +
    "\uffc3\265\uffc3\267\uffc3\271\uffc3\272\uffc3\273\uffc3\001\002" +
    "\000\u011c\014\uffe1\015\uffe1\016\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077" +
    "\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1" +
    "\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\114" +
    "\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1" +
    "\123\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131" +
    "\uffe1\132\uffe1\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1" +
    "\140\uffe1\141\uffe1\142\uffe1\143\uffe1\144\uffe1\145\uffe1\146" +
    "\uffe1\147\uffe1\150\uffe1\151\uffe1\152\uffe1\153\uffe1\154\uffe1" +
    "\155\uffe1\156\uffe1\157\uffe1\160\uffe1\161\uffe1\162\uffe1\163" +
    "\uffe1\164\uffe1\165\uffe1\166\uffe1\167\uffe1\171\uffe1\172\uffe1" +
    "\173\uffe1\174\uffe1\175\uffe1\176\uffe1\177\uffe1\200\uffe1\201" +
    "\uffe1\202\uffe1\203\uffe1\204\uffe1\205\uffe1\206\uffe1\207\uffe1" +
    "\210\uffe1\211\uffe1\212\uffe1\213\uffe1\214\uffe1\215\uffe1\216" +
    "\uffe1\217\uffe1\220\uffe1\221\uffe1\222\uffe1\223\uffe1\224\uffe1" +
    "\225\uffe1\231\uffe1\232\uffe1\234\uffe1\236\uffe1\245\uffe1\262" +
    "\uffe1\265\uffe1\267\uffe1\271\uffe1\272\uffe1\273\uffe1\001\002" +
    "\000\004\247\u0138\001\002\000\u011c\014\uffd6\015\uffd6\016" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6" +
    "\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111" +
    "\uffd6\112\uffd6\113\uffd6\114\uffd6\115\uffd6\116\uffd6\117\uffd6" +
    "\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6\125\uffd6\126" +
    "\uffd6\127\uffd6\130\uffd6\131\uffd6\132\uffd6\133\uffd6\134\uffd6" +
    "\135\uffd6\136\uffd6\137\uffd6\140\uffd6\141\uffd6\142\uffd6\143" +
    "\uffd6\144\uffd6\145\uffd6\146\uffd6\147\uffd6\150\uffd6\151\uffd6" +
    "\152\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6\157\uffd6\160" +
    "\uffd6\161\uffd6\162\uffd6\163\uffd6\164\uffd6\165\uffd6\166\uffd6" +
    "\167\uffd6\171\uffd6\172\uffd6\173\uffd6\174\uffd6\175\uffd6\176" +
    "\uffd6\177\uffd6\200\uffd6\201\uffd6\202\uffd6\203\uffd6\204\uffd6" +
    "\205\uffd6\206\uffd6\207\uffd6\210\uffd6\211\uffd6\212\uffd6\213" +
    "\uffd6\214\uffd6\215\uffd6\216\uffd6\217\uffd6\220\uffd6\221\uffd6" +
    "\222\uffd6\223\uffd6\224\uffd6\225\uffd6\231\uffd6\232\uffd6\234" +
    "\uffd6\236\uffd6\245\uffd6\262\uffd6\265\uffd6\267\uffd6\271\uffd6" +
    "\272\uffd6\273\uffd6\001\002\000\004\266\u013a\001\002\000" +
    "\004\245\u013b\001\002\000\004\247\u013c\001\002\000\u011c" +
    "\014\uffd9\015\uffd9\016\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100" +
    "\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9" +
    "\107\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\114\uffd9\115" +
    "\uffd9\116\uffd9\117\uffd9\120\uffd9\121\uffd9\122\uffd9\123\uffd9" +
    "\124\uffd9\125\uffd9\126\uffd9\127\uffd9\130\uffd9\131\uffd9\132" +
    "\uffd9\133\uffd9\134\uffd9\135\uffd9\136\uffd9\137\uffd9\140\uffd9" +
    "\141\uffd9\142\uffd9\143\uffd9\144\uffd9\145\uffd9\146\uffd9\147" +
    "\uffd9\150\uffd9\151\uffd9\152\uffd9\153\uffd9\154\uffd9\155\uffd9" +
    "\156\uffd9\157\uffd9\160\uffd9\161\uffd9\162\uffd9\163\uffd9\164" +
    "\uffd9\165\uffd9\166\uffd9\167\uffd9\171\uffd9\172\uffd9\173\uffd9" +
    "\174\uffd9\175\uffd9\176\uffd9\177\uffd9\200\uffd9\201\uffd9\202" +
    "\uffd9\203\uffd9\204\uffd9\205\uffd9\206\uffd9\207\uffd9\210\uffd9" +
    "\211\uffd9\212\uffd9\213\uffd9\214\uffd9\215\uffd9\216\uffd9\217" +
    "\uffd9\220\uffd9\221\uffd9\222\uffd9\223\uffd9\224\uffd9\225\uffd9" +
    "\231\uffd9\232\uffd9\234\uffd9\236\uffd9\245\uffd9\262\uffd9\265" +
    "\uffd9\267\uffd9\271\uffd9\272\uffd9\273\uffd9\001\002\000\014" +
    "\231\uffe3\232\uffe3\236\uffe3\245\uffe3\272\uffe3\001\002\000" +
    "\u011c\014\uffd4\015\uffd4\016\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106" +
    "\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\114\uffd4" +
    "\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121\uffd4\122\uffd4\123" +
    "\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4" +
    "\132\uffd4\133\uffd4\134\uffd4\135\uffd4\136\uffd4\137\uffd4\140" +
    "\uffd4\141\uffd4\142\uffd4\143\uffd4\144\uffd4\145\uffd4\146\uffd4" +
    "\147\uffd4\150\uffd4\151\uffd4\152\uffd4\153\uffd4\154\uffd4\155" +
    "\uffd4\156\uffd4\157\uffd4\160\uffd4\161\uffd4\162\uffd4\163\uffd4" +
    "\164\uffd4\165\uffd4\166\uffd4\167\uffd4\171\uffd4\172\uffd4\173" +
    "\uffd4\174\uffd4\175\uffd4\176\uffd4\177\uffd4\200\uffd4\201\uffd4" +
    "\202\uffd4\203\uffd4\204\uffd4\205\uffd4\206\uffd4\207\uffd4\210" +
    "\uffd4\211\uffd4\212\uffd4\213\uffd4\214\uffd4\215\uffd4\216\uffd4" +
    "\217\uffd4\220\uffd4\221\uffd4\222\uffd4\223\uffd4\224\uffd4\225" +
    "\uffd4\231\uffd4\232\uffd4\234\uffd4\236\uffd4\245\uffd4\262\uffd4" +
    "\265\uffd4\267\uffd4\271\uffd4\272\uffd4\273\uffd4\001\002\000" +
    "\150\026\260\027\257\030\256\031\255\032\254\106\247" +
    "\107\245\110\325\111\321\112\317\113\315\114\314\115" +
    "\313\116\304\117\302\120\301\121\300\122\277\123\276" +
    "\124\275\125\274\126\272\127\271\130\267\131\265\132" +
    "\264\133\263\134\262\135\261\136\253\137\252\140\250" +
    "\141\244\142\323\143\322\144\320\145\316\146\307\147" +
    "\306\150\305\151\303\203\273\204\310\205\312\206\270" +
    "\207\251\210\311\211\266\212\246\266\352\267\351\001" +
    "\002\000\004\240\u0155\001\002\000\004\240\u0142\001\002" +
    "\000\004\235\u0143\001\002\000\006\236\u0145\272\u0146\001" +
    "\002\000\010\232\u014c\236\u014d\272\u014e\001\002\000\004" +
    "\246\u014a\001\002\000\006\266\352\267\351\001\002\000" +
    "\004\246\u0148\001\002\000\u0118\014\146\015\170\016\073" +
    "\026\203\027\202\030\177\031\175\032\174\033\033\034" +
    "\032\035\030\036\027\037\026\040\171\041\211\042\165" +
    "\043\164\044\163\045\160\046\157\047\155\050\154\051" +
    "\152\052\126\053\125\054\124\055\123\056\122\057\121" +
    "\060\117\061\115\062\076\063\075\064\074\065\072\066" +
    "\071\067\070\070\067\071\065\072\052\073\051\074\050" +
    "\075\046\076\044\077\043\100\040\101\037\102\226\103" +
    "\225\104\223\105\221\106\206\107\205\110\204\111\201" +
    "\112\200\113\176\114\173\115\172\116\150\117\147\120" +
    "\144\121\143\122\142\123\140\124\137\125\135\126\116" +
    "\127\114\130\113\131\112\132\111\133\110\134\107\135" +
    "\106\136\066\137\064\140\062\141\061\142\060\143\057" +
    "\144\056\145\055\146\036\147\035\150\034\151\031\152" +
    "\233\153\231\154\230\155\227\156\224\157\222\160\220" +
    "\161\217\162\134\163\133\164\132\165\131\166\130\167" +
    "\127\171\235\172\101\173\216\174\120\175\236\176\041" +
    "\177\042\200\045\201\054\202\145\203\212\204\207\205" +
    "\161\206\153\207\234\210\156\211\151\212\232\213\077" +
    "\214\100\215\102\216\103\217\104\220\105\221\063\222" +
    "\213\223\136\224\214\225\215\232\uffab\234\162\236\uffab" +
    "\262\013\265\166\267\210\271\053\272\uffab\273\141\001" +
    "\002\000\010\232\uffaf\236\uffaf\272\uffaf\001\002\000\u0112" +
    "\014\146\015\170\016\073\026\203\027\202\030\177\031" +
    "\175\032\174\033\033\034\032\035\030\036\027\037\026" +
    "\040\171\041\211\042\165\043\164\044\163\045\160\046" +
    "\157\047\155\050\154\051\152\052\126\053\125\054\124" +
    "\055\123\056\122\057\121\060\117\061\115\062\076\063" +
    "\075\064\074\065\072\066\071\067\070\070\067\071\065" +
    "\072\052\073\051\074\050\075\046\076\044\077\043\100" +
    "\040\101\037\102\226\103\225\104\223\105\221\106\206" +
    "\107\205\110\204\111\201\112\200\113\176\114\173\115" +
    "\172\116\150\117\147\120\144\121\143\122\142\123\140" +
    "\124\137\125\135\126\116\127\114\130\113\131\112\132" +
    "\111\133\110\134\107\135\106\136\066\137\064\140\062" +
    "\141\061\142\060\143\057\144\056\145\055\146\036\147" +
    "\035\150\034\151\031\152\233\153\231\154\230\155\227" +
    "\156\224\157\222\160\220\161\217\162\134\163\133\164" +
    "\132\165\131\166\130\167\127\171\235\172\101\173\216" +
    "\174\120\175\236\176\041\177\042\200\045\201\054\202" +
    "\145\203\212\204\207\205\161\206\153\207\234\210\156" +
    "\211\151\212\232\213\077\214\100\215\102\216\103\217" +
    "\104\220\105\221\063\222\213\223\136\224\214\225\215" +
    "\234\162\262\013\265\166\267\210\271\053\273\141\001" +
    "\002\000\010\232\uffae\236\uffae\272\uffae\001\002\000\004" +
    "\234\u0154\001\002\000\004\246\u0152\001\002\000\006\266" +
    "\352\267\351\001\002\000\004\246\u0150\001\002\000\u0118" +
    "\014\146\015\170\016\073\026\203\027\202\030\177\031" +
    "\175\032\174\033\033\034\032\035\030\036\027\037\026" +
    "\040\171\041\211\042\165\043\164\044\163\045\160\046" +
    "\157\047\155\050\154\051\152\052\126\053\125\054\124" +
    "\055\123\056\122\057\121\060\117\061\115\062\076\063" +
    "\075\064\074\065\072\066\071\067\070\070\067\071\065" +
    "\072\052\073\051\074\050\075\046\076\044\077\043\100" +
    "\040\101\037\102\226\103\225\104\223\105\221\106\206" +
    "\107\205\110\204\111\201\112\200\113\176\114\173\115" +
    "\172\116\150\117\147\120\144\121\143\122\142\123\140" +
    "\124\137\125\135\126\116\127\114\130\113\131\112\132" +
    "\111\133\110\134\107\135\106\136\066\137\064\140\062" +
    "\141\061\142\060\143\057\144\056\145\055\146\036\147" +
    "\035\150\034\151\031\152\233\153\231\154\230\155\227" +
    "\156\224\157\222\160\220\161\217\162\134\163\133\164" +
    "\132\165\131\166\130\167\127\171\235\172\101\173\216" +
    "\174\120\175\236\176\041\177\042\200\045\201\054\202" +
    "\145\203\212\204\207\205\161\206\153\207\234\210\156" +
    "\211\151\212\232\213\077\214\100\215\102\216\103\217" +
    "\104\220\105\221\063\222\213\223\136\224\214\225\215" +
    "\232\uffaa\234\162\236\uffaa\262\013\265\166\267\210\271" +
    "\053\272\uffaa\273\141\001\002\000\010\232\uffad\236\uffad" +
    "\272\uffad\001\002\000\u0112\014\146\015\170\016\073\026" +
    "\203\027\202\030\177\031\175\032\174\033\033\034\032" +
    "\035\030\036\027\037\026\040\171\041\211\042\165\043" +
    "\164\044\163\045\160\046\157\047\155\050\154\051\152" +
    "\052\126\053\125\054\124\055\123\056\122\057\121\060" +
    "\117\061\115\062\076\063\075\064\074\065\072\066\071" +
    "\067\070\070\067\071\065\072\052\073\051\074\050\075" +
    "\046\076\044\077\043\100\040\101\037\102\226\103\225" +
    "\104\223\105\221\106\206\107\205\110\204\111\201\112" +
    "\200\113\176\114\173\115\172\116\150\117\147\120\144" +
    "\121\143\122\142\123\140\124\137\125\135\126\116\127" +
    "\114\130\113\131\112\132\111\133\110\134\107\135\106" +
    "\136\066\137\064\140\062\141\061\142\060\143\057\144" +
    "\056\145\055\146\036\147\035\150\034\151\031\152\233" +
    "\153\231\154\230\155\227\156\224\157\222\160\220\161" +
    "\217\162\134\163\133\164\132\165\131\166\130\167\127" +
    "\171\235\172\101\173\216\174\120\175\236\176\041\177" +
    "\042\200\045\201\054\202\145\203\212\204\207\205\161" +
    "\206\153\207\234\210\156\211\151\212\232\213\077\214" +
    "\100\215\102\216\103\217\104\220\105\221\063\222\213" +
    "\223\136\224\214\225\215\234\162\262\013\265\166\267" +
    "\210\271\053\273\141\001\002\000\010\232\uffac\236\uffac" +
    "\272\uffac\001\002\000\u011c\014\uffcb\015\uffcb\016\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb" +
    "\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\112" +
    "\uffcb\113\uffcb\114\uffcb\115\uffcb\116\uffcb\117\uffcb\120\uffcb" +
    "\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125\uffcb\126\uffcb\127" +
    "\uffcb\130\uffcb\131\uffcb\132\uffcb\133\uffcb\134\uffcb\135\uffcb" +
    "\136\uffcb\137\uffcb\140\uffcb\141\uffcb\142\uffcb\143\uffcb\144" +
    "\uffcb\145\uffcb\146\uffcb\147\uffcb\150\uffcb\151\uffcb\152\uffcb" +
    "\153\uffcb\154\uffcb\155\uffcb\156\uffcb\157\uffcb\160\uffcb\161" +
    "\uffcb\162\uffcb\163\uffcb\164\uffcb\165\uffcb\166\uffcb\167\uffcb" +
    "\171\uffcb\172\uffcb\173\uffcb\174\uffcb\175\uffcb\176\uffcb\177" +
    "\uffcb\200\uffcb\201\uffcb\202\uffcb\203\uffcb\204\uffcb\205\uffcb" +
    "\206\uffcb\207\uffcb\210\uffcb\211\uffcb\212\uffcb\213\uffcb\214" +
    "\uffcb\215\uffcb\216\uffcb\217\uffcb\220\uffcb\221\uffcb\222\uffcb" +
    "\223\uffcb\224\uffcb\225\uffcb\231\uffcb\232\uffcb\234\uffcb\236" +
    "\uffcb\245\uffcb\262\uffcb\265\uffcb\267\uffcb\271\uffcb\272\uffcb" +
    "\273\uffcb\001\002\000\004\235\u0156\001\002\000\006\236" +
    "\u0145\272\u0146\001\002\000\010\232\u0158\236\u014d\272\u014e" +
    "\001\002\000\004\234\u0159\001\002\000\u011c\014\uffcc\015" +
    "\uffcc\016\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110" +
    "\uffcc\111\uffcc\112\uffcc\113\uffcc\114\uffcc\115\uffcc\116\uffcc" +
    "\117\uffcc\120\uffcc\121\uffcc\122\uffcc\123\uffcc\124\uffcc\125" +
    "\uffcc\126\uffcc\127\uffcc\130\uffcc\131\uffcc\132\uffcc\133\uffcc" +
    "\134\uffcc\135\uffcc\136\uffcc\137\uffcc\140\uffcc\141\uffcc\142" +
    "\uffcc\143\uffcc\144\uffcc\145\uffcc\146\uffcc\147\uffcc\150\uffcc" +
    "\151\uffcc\152\uffcc\153\uffcc\154\uffcc\155\uffcc\156\uffcc\157" +
    "\uffcc\160\uffcc\161\uffcc\162\uffcc\163\uffcc\164\uffcc\165\uffcc" +
    "\166\uffcc\167\uffcc\171\uffcc\172\uffcc\173\uffcc\174\uffcc\175" +
    "\uffcc\176\uffcc\177\uffcc\200\uffcc\201\uffcc\202\uffcc\203\uffcc" +
    "\204\uffcc\205\uffcc\206\uffcc\207\uffcc\210\uffcc\211\uffcc\212" +
    "\uffcc\213\uffcc\214\uffcc\215\uffcc\216\uffcc\217\uffcc\220\uffcc" +
    "\221\uffcc\222\uffcc\223\uffcc\224\uffcc\225\uffcc\231\uffcc\232" +
    "\uffcc\234\uffcc\236\uffcc\245\uffcc\262\uffcc\265\uffcc\267\uffcc" +
    "\271\uffcc\272\uffcc\273\uffcc\001\002\000\004\266\u015b\001" +
    "\002\000\004\240\u015c\001\002\000\004\247\u015d\001\002" +
    "\000\u011c\014\uffda\015\uffda\016\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077" +
    "\uffda\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda" +
    "\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\114" +
    "\uffda\115\uffda\116\uffda\117\uffda\120\uffda\121\uffda\122\uffda" +
    "\123\uffda\124\uffda\125\uffda\126\uffda\127\uffda\130\uffda\131" +
    "\uffda\132\uffda\133\uffda\134\uffda\135\uffda\136\uffda\137\uffda" +
    "\140\uffda\141\uffda\142\uffda\143\uffda\144\uffda\145\uffda\146" +
    "\uffda\147\uffda\150\uffda\151\uffda\152\uffda\153\uffda\154\uffda" +
    "\155\uffda\156\uffda\157\uffda\160\uffda\161\uffda\162\uffda\163" +
    "\uffda\164\uffda\165\uffda\166\uffda\167\uffda\171\uffda\172\uffda" +
    "\173\uffda\174\uffda\175\uffda\176\uffda\177\uffda\200\uffda\201" +
    "\uffda\202\uffda\203\uffda\204\uffda\205\uffda\206\uffda\207\uffda" +
    "\210\uffda\211\uffda\212\uffda\213\uffda\214\uffda\215\uffda\216" +
    "\uffda\217\uffda\220\uffda\221\uffda\222\uffda\223\uffda\224\uffda" +
    "\225\uffda\231\uffda\232\uffda\234\uffda\236\uffda\245\uffda\262" +
    "\uffda\265\uffda\267\uffda\271\uffda\272\uffda\273\uffda\001\002" +
    "\000\154\026\260\027\257\030\256\031\255\032\254\106" +
    "\247\107\245\110\325\111\321\112\317\113\315\114\314" +
    "\115\313\116\304\117\302\120\301\121\300\122\277\123" +
    "\276\124\275\125\274\126\272\127\271\130\267\131\265" +
    "\132\264\133\263\134\262\135\261\136\253\137\252\140" +
    "\250\141\244\142\323\143\322\144\320\145\316\146\307" +
    "\147\306\150\305\151\303\203\273\204\310\205\312\206" +
    "\270\207\251\210\311\211\266\212\246\266\u015f\267\u0161" +
    "\274\u0163\275\u0165\001\002\000\026\240\uffa3\251\uff9f\253" +
    "\uff9f\254\uff9f\255\uff9f\256\uff9f\257\uff9f\260\uff9f\261\uff9f" +
    "\267\360\001\002\000\004\240\u017c\001\002\000\026\240" +
    "\uffa4\251\uffa0\253\uffa0\254\uffa0\255\uffa0\256\uffa0\257\uffa0" +
    "\260\uffa0\261\uffa0\266\361\001\002\000\004\240\u0177\001" +
    "\002\000\024\240\uff9d\251\uff9d\253\uff9d\254\uff9d\255\uff9d" +
    "\256\uff9d\257\uff9d\260\uff9d\261\uff9d\001\002\000\022\251" +
    "\u016c\253\u016b\254\u0169\255\u016a\256\u0168\257\u0167\260\u016f" +
    "\261\u016e\001\002\000\024\240\uff9c\251\uff9c\253\uff9c\254" +
    "\uff9c\255\uff9c\256\uff9c\257\uff9c\260\uff9c\261\uff9c\001\002" +
    "\000\024\240\uff9e\251\uff9e\253\uff9e\254\uff9e\255\uff9e\256" +
    "\uff9e\257\uff9e\260\uff9e\261\uff9e\001\002\000\154\026\uff90" +
    "\027\uff90\030\uff90\031\uff90\032\uff90\106\uff90\107\uff90\110" +
    "\uff90\111\uff90\112\uff90\113\uff90\114\uff90\115\uff90\116\uff90" +
    "\117\uff90\120\uff90\121\uff90\122\uff90\123\uff90\124\uff90\125" +
    "\uff90\126\uff90\127\uff90\130\uff90\131\uff90\132\uff90\133\uff90" +
    "\134\uff90\135\uff90\136\uff90\137\uff90\140\uff90\141\uff90\142" +
    "\uff90\143\uff90\144\uff90\145\uff90\146\uff90\147\uff90\150\uff90" +
    "\151\uff90\203\uff90\204\uff90\205\uff90\206\uff90\207\uff90\210" +
    "\uff90\211\uff90\212\uff90\266\uff90\267\uff90\274\uff90\275\uff90" +
    "\001\002\000\154\026\uff95\027\uff95\030\uff95\031\uff95\032" +
    "\uff95\106\uff95\107\uff95\110\uff95\111\uff95\112\uff95\113\uff95" +
    "\114\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121\uff95\122" +
    "\uff95\123\uff95\124\uff95\125\uff95\126\uff95\127\uff95\130\uff95" +
    "\131\uff95\132\uff95\133\uff95\134\uff95\135\uff95\136\uff95\137" +
    "\uff95\140\uff95\141\uff95\142\uff95\143\uff95\144\uff95\145\uff95" +
    "\146\uff95\147\uff95\150\uff95\151\uff95\203\uff95\204\uff95\205" +
    "\uff95\206\uff95\207\uff95\210\uff95\211\uff95\212\uff95\266\uff95" +
    "\267\uff95\274\uff95\275\uff95\001\002\000\154\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\106\uff96\107\uff96\110\uff96" +
    "\111\uff96\112\uff96\113\uff96\114\uff96\115\uff96\116\uff96\117" +
    "\uff96\120\uff96\121\uff96\122\uff96\123\uff96\124\uff96\125\uff96" +
    "\126\uff96\127\uff96\130\uff96\131\uff96\132\uff96\133\uff96\134" +
    "\uff96\135\uff96\136\uff96\137\uff96\140\uff96\141\uff96\142\uff96" +
    "\143\uff96\144\uff96\145\uff96\146\uff96\147\uff96\150\uff96\151" +
    "\uff96\203\uff96\204\uff96\205\uff96\206\uff96\207\uff96\210\uff96" +
    "\211\uff96\212\uff96\266\uff96\267\uff96\274\uff96\275\uff96\001" +
    "\002\000\154\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113\uff94\114" +
    "\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\122\uff94" +
    "\123\uff94\124\uff94\125\uff94\126\uff94\127\uff94\130\uff94\131" +
    "\uff94\132\uff94\133\uff94\134\uff94\135\uff94\136\uff94\137\uff94" +
    "\140\uff94\141\uff94\142\uff94\143\uff94\144\uff94\145\uff94\146" +
    "\uff94\147\uff94\150\uff94\151\uff94\203\uff94\204\uff94\205\uff94" +
    "\206\uff94\207\uff94\210\uff94\211\uff94\212\uff94\266\uff94\267" +
    "\uff94\274\uff94\275\uff94\001\002\000\154\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\106\uff97\107\uff97\110\uff97\111" +
    "\uff97\112\uff97\113\uff97\114\uff97\115\uff97\116\uff97\117\uff97" +
    "\120\uff97\121\uff97\122\uff97\123\uff97\124\uff97\125\uff97\126" +
    "\uff97\127\uff97\130\uff97\131\uff97\132\uff97\133\uff97\134\uff97" +
    "\135\uff97\136\uff97\137\uff97\140\uff97\141\uff97\142\uff97\143" +
    "\uff97\144\uff97\145\uff97\146\uff97\147\uff97\150\uff97\151\uff97" +
    "\203\uff97\204\uff97\205\uff97\206\uff97\207\uff97\210\uff97\211" +
    "\uff97\212\uff97\266\uff97\267\uff97\274\uff97\275\uff97\001\002" +
    "\000\154\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\106" +
    "\uff93\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93" +
    "\115\uff93\116\uff93\117\uff93\120\uff93\121\uff93\122\uff93\123" +
    "\uff93\124\uff93\125\uff93\126\uff93\127\uff93\130\uff93\131\uff93" +
    "\132\uff93\133\uff93\134\uff93\135\uff93\136\uff93\137\uff93\140" +
    "\uff93\141\uff93\142\uff93\143\uff93\144\uff93\145\uff93\146\uff93" +
    "\147\uff93\150\uff93\151\uff93\203\uff93\204\uff93\205\uff93\206" +
    "\uff93\207\uff93\210\uff93\211\uff93\212\uff93\266\uff93\267\uff93" +
    "\274\uff93\275\uff93\001\002\000\154\026\260\027\257\030" +
    "\256\031\255\032\254\106\247\107\245\110\325\111\321" +
    "\112\317\113\315\114\314\115\313\116\304\117\302\120" +
    "\301\121\300\122\277\123\276\124\275\125\274\126\272" +
    "\127\271\130\267\131\265\132\264\133\263\134\262\135" +
    "\261\136\253\137\252\140\250\141\244\142\323\143\322" +
    "\144\320\145\316\146\307\147\306\150\305\151\303\203" +
    "\273\204\310\205\312\206\270\207\251\210\311\211\266" +
    "\212\246\266\u0170\267\u0171\274\u0163\275\u0165\001\002\000" +
    "\154\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\106\uff92" +
    "\107\uff92\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92\115" +
    "\uff92\116\uff92\117\uff92\120\uff92\121\uff92\122\uff92\123\uff92" +
    "\124\uff92\125\uff92\126\uff92\127\uff92\130\uff92\131\uff92\132" +
    "\uff92\133\uff92\134\uff92\135\uff92\136\uff92\137\uff92\140\uff92" +
    "\141\uff92\142\uff92\143\uff92\144\uff92\145\uff92\146\uff92\147" +
    "\uff92\150\uff92\151\uff92\203\uff92\204\uff92\205\uff92\206\uff92" +
    "\207\uff92\210\uff92\211\uff92\212\uff92\266\uff92\267\uff92\274" +
    "\uff92\275\uff92\001\002\000\154\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\106\uff91\107\uff91\110\uff91\111\uff91\112" +
    "\uff91\113\uff91\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91" +
    "\121\uff91\122\uff91\123\uff91\124\uff91\125\uff91\126\uff91\127" +
    "\uff91\130\uff91\131\uff91\132\uff91\133\uff91\134\uff91\135\uff91" +
    "\136\uff91\137\uff91\140\uff91\141\uff91\142\uff91\143\uff91\144" +
    "\uff91\145\uff91\146\uff91\147\uff91\150\uff91\151\uff91\203\uff91" +
    "\204\uff91\205\uff91\206\uff91\207\uff91\210\uff91\211\uff91\212" +
    "\uff91\266\uff91\267\uff91\274\uff91\275\uff91\001\002\000\024" +
    "\240\uff9f\251\uff9f\253\uff9f\254\uff9f\255\uff9f\256\uff9f\257" +
    "\uff9f\260\uff9f\261\uff9f\001\002\000\024\240\uffa0\251\uffa0" +
    "\253\uffa0\254\uffa0\255\uffa0\256\uffa0\257\uffa0\260\uffa0\261" +
    "\uffa0\001\002\000\024\240\uff9b\251\u016c\253\u016b\254\u0169" +
    "\255\u016a\256\u0168\257\u0167\260\u016f\261\u016e\001\002\000" +
    "\004\240\uff9a\001\002\000\154\026\260\027\257\030\256" +
    "\031\255\032\254\106\247\107\245\110\325\111\321\112" +
    "\317\113\315\114\314\115\313\116\304\117\302\120\301" +
    "\121\300\122\277\123\276\124\275\125\274\126\272\127" +
    "\271\130\267\131\265\132\264\133\263\134\262\135\261" +
    "\136\253\137\252\140\250\141\244\142\323\143\322\144" +
    "\320\145\316\146\307\147\306\150\305\151\303\203\273" +
    "\204\310\205\312\206\270\207\251\210\311\211\266\212" +
    "\246\266\u0170\267\u0171\274\u0163\275\u0165\001\002\000\024" +
    "\240\uff99\251\u016c\253\u016b\254\u0169\255\u016a\256\u0168\257" +
    "\u0167\260\u016f\261\u016e\001\002\000\004\240\uff98\001\002" +
    "\000\004\233\u0178\001\002\000\u0112\014\146\015\170\016" +
    "\073\026\203\027\202\030\177\031\175\032\174\033\033" +
    "\034\032\035\030\036\027\037\026\040\171\041\211\042" +
    "\165\043\164\044\163\045\160\046\157\047\155\050\154" +
    "\051\152\052\126\053\125\054\124\055\123\056\122\057" +
    "\121\060\117\061\115\062\076\063\075\064\074\065\072" +
    "\066\071\067\070\070\067\071\065\072\052\073\051\074" +
    "\050\075\046\076\044\077\043\100\040\101\037\102\226" +
    "\103\225\104\223\105\221\106\206\107\205\110\204\111" +
    "\201\112\200\113\176\114\173\115\172\116\150\117\147" +
    "\120\144\121\143\122\142\123\140\124\137\125\135\126" +
    "\116\127\114\130\113\131\112\132\111\133\110\134\107" +
    "\135\106\136\066\137\064\140\062\141\061\142\060\143" +
    "\057\144\056\145\055\146\036\147\035\150\034\151\031" +
    "\152\233\153\231\154\230\155\227\156\224\157\222\160" +
    "\220\161\217\162\134\163\133\164\132\165\131\166\130" +
    "\167\127\171\235\172\101\173\216\174\120\175\236\176" +
    "\041\177\042\200\045\201\054\202\145\203\212\204\207" +
    "\205\161\206\153\207\234\210\156\211\151\212\232\213" +
    "\077\214\100\215\102\216\103\217\104\220\105\221\063" +
    "\222\213\223\136\224\214\225\215\234\162\262\013\265" +
    "\166\267\210\271\053\273\141\001\002\000\004\232\u017a" +
    "\001\002\000\004\273\u017b\001\002\000\u011c\014\uffc9\015" +
    "\uffc9\016\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073" +
    "\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110" +
    "\uffc9\111\uffc9\112\uffc9\113\uffc9\114\uffc9\115\uffc9\116\uffc9" +
    "\117\uffc9\120\uffc9\121\uffc9\122\uffc9\123\uffc9\124\uffc9\125" +
    "\uffc9\126\uffc9\127\uffc9\130\uffc9\131\uffc9\132\uffc9\133\uffc9" +
    "\134\uffc9\135\uffc9\136\uffc9\137\uffc9\140\uffc9\141\uffc9\142" +
    "\uffc9\143\uffc9\144\uffc9\145\uffc9\146\uffc9\147\uffc9\150\uffc9" +
    "\151\uffc9\152\uffc9\153\uffc9\154\uffc9\155\uffc9\156\uffc9\157" +
    "\uffc9\160\uffc9\161\uffc9\162\uffc9\163\uffc9\164\uffc9\165\uffc9" +
    "\166\uffc9\167\uffc9\171\uffc9\172\uffc9\173\uffc9\174\uffc9\175" +
    "\uffc9\176\uffc9\177\uffc9\200\uffc9\201\uffc9\202\uffc9\203\uffc9" +
    "\204\uffc9\205\uffc9\206\uffc9\207\uffc9\210\uffc9\211\uffc9\212" +
    "\uffc9\213\uffc9\214\uffc9\215\uffc9\216\uffc9\217\uffc9\220\uffc9" +
    "\221\uffc9\222\uffc9\223\uffc9\224\uffc9\225\uffc9\231\uffc9\232" +
    "\uffc9\234\uffc9\236\uffc9\245\uffc9\262\uffc9\265\uffc9\267\uffc9" +
    "\271\uffc9\272\uffc9\273\uffc9\001\002\000\004\233\u017d\001" +
    "\002\000\u0112\014\146\015\170\016\073\026\203\027\202" +
    "\030\177\031\175\032\174\033\033\034\032\035\030\036" +
    "\027\037\026\040\171\041\211\042\165\043\164\044\163" +
    "\045\160\046\157\047\155\050\154\051\152\052\126\053" +
    "\125\054\124\055\123\056\122\057\121\060\117\061\115" +
    "\062\076\063\075\064\074\065\072\066\071\067\070\070" +
    "\067\071\065\072\052\073\051\074\050\075\046\076\044" +
    "\077\043\100\040\101\037\102\226\103\225\104\223\105" +
    "\221\106\206\107\205\110\204\111\201\112\200\113\176" +
    "\114\173\115\172\116\150\117\147\120\144\121\143\122" +
    "\142\123\140\124\137\125\135\126\116\127\114\130\113" +
    "\131\112\132\111\133\110\134\107\135\106\136\066\137" +
    "\064\140\062\141\061\142\060\143\057\144\056\145\055" +
    "\146\036\147\035\150\034\151\031\152\233\153\231\154" +
    "\230\155\227\156\224\157\222\160\220\161\217\162\134" +
    "\163\133\164\132\165\131\166\130\167\127\171\235\172" +
    "\101\173\216\174\120\175\236\176\041\177\042\200\045" +
    "\201\054\202\145\203\212\204\207\205\161\206\153\207" +
    "\234\210\156\211\151\212\232\213\077\214\100\215\102" +
    "\216\103\217\104\220\105\221\063\222\213\223\136\224" +
    "\214\225\215\234\162\262\013\265\166\267\210\271\053" +
    "\273\141\001\002\000\004\232\u017f\001\002\000\004\273" +
    "\u0180\001\002\000\u011c\014\uffca\015\uffca\016\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104" +
    "\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112\uffca" +
    "\113\uffca\114\uffca\115\uffca\116\uffca\117\uffca\120\uffca\121" +
    "\uffca\122\uffca\123\uffca\124\uffca\125\uffca\126\uffca\127\uffca" +
    "\130\uffca\131\uffca\132\uffca\133\uffca\134\uffca\135\uffca\136" +
    "\uffca\137\uffca\140\uffca\141\uffca\142\uffca\143\uffca\144\uffca" +
    "\145\uffca\146\uffca\147\uffca\150\uffca\151\uffca\152\uffca\153" +
    "\uffca\154\uffca\155\uffca\156\uffca\157\uffca\160\uffca\161\uffca" +
    "\162\uffca\163\uffca\164\uffca\165\uffca\166\uffca\167\uffca\171" +
    "\uffca\172\uffca\173\uffca\174\uffca\175\uffca\176\uffca\177\uffca" +
    "\200\uffca\201\uffca\202\uffca\203\uffca\204\uffca\205\uffca\206" +
    "\uffca\207\uffca\210\uffca\211\uffca\212\uffca\213\uffca\214\uffca" +
    "\215\uffca\216\uffca\217\uffca\220\uffca\221\uffca\222\uffca\223" +
    "\uffca\224\uffca\225\uffca\231\uffca\232\uffca\234\uffca\236\uffca" +
    "\245\uffca\262\uffca\265\uffca\267\uffca\271\uffca\272\uffca\273" +
    "\uffca\001\002\000\004\275\u0182\001\002\000\004\247\u0183" +
    "\001\002\000\u011c\014\uffd3\015\uffd3\016\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3" +
    "\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113" +
    "\uffd3\114\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\121\uffd3" +
    "\122\uffd3\123\uffd3\124\uffd3\125\uffd3\126\uffd3\127\uffd3\130" +
    "\uffd3\131\uffd3\132\uffd3\133\uffd3\134\uffd3\135\uffd3\136\uffd3" +
    "\137\uffd3\140\uffd3\141\uffd3\142\uffd3\143\uffd3\144\uffd3\145" +
    "\uffd3\146\uffd3\147\uffd3\150\uffd3\151\uffd3\152\uffd3\153\uffd3" +
    "\154\uffd3\155\uffd3\156\uffd3\157\uffd3\160\uffd3\161\uffd3\162" +
    "\uffd3\163\uffd3\164\uffd3\165\uffd3\166\uffd3\167\uffd3\171\uffd3" +
    "\172\uffd3\173\uffd3\174\uffd3\175\uffd3\176\uffd3\177\uffd3\200" +
    "\uffd3\201\uffd3\202\uffd3\203\uffd3\204\uffd3\205\uffd3\206\uffd3" +
    "\207\uffd3\210\uffd3\211\uffd3\212\uffd3\213\uffd3\214\uffd3\215" +
    "\uffd3\216\uffd3\217\uffd3\220\uffd3\221\uffd3\222\uffd3\223\uffd3" +
    "\224\uffd3\225\uffd3\231\uffd3\232\uffd3\234\uffd3\236\uffd3\245" +
    "\uffd3\262\uffd3\265\uffd3\267\uffd3\271\uffd3\272\uffd3\273\uffd3" +
    "\001\002\000\154\026\260\027\257\030\256\031\255\032" +
    "\254\106\247\107\245\110\325\111\321\112\317\113\315" +
    "\114\314\115\313\116\304\117\302\120\301\121\300\122" +
    "\277\123\276\124\275\125\274\126\272\127\271\130\267" +
    "\131\265\132\264\133\263\134\262\135\261\136\253\137" +
    "\252\140\250\141\244\142\323\143\322\144\320\145\316" +
    "\146\307\147\306\150\305\151\303\203\273\204\310\205" +
    "\312\206\270\207\251\210\311\211\266\212\246\266\u0170" +
    "\267\u0171\274\u0163\275\u0165\001\002\000\004\240\u018f\001" +
    "\002\000\024\240\u0187\251\uff9e\253\uff9e\254\uff9e\255\uff9e" +
    "\256\uff9e\257\uff9e\260\uff9e\261\uff9e\001\002\000\004\230" +
    "\u0188\001\002\000\u0112\014\146\015\170\016\073\026\203" +
    "\027\202\030\177\031\175\032\174\033\033\034\032\035" +
    "\030\036\027\037\026\040\171\041\211\042\165\043\164" +
    "\044\163\045\160\046\157\047\155\050\154\051\152\052" +
    "\126\053\125\054\124\055\123\056\122\057\121\060\117" +
    "\061\115\062\076\063\075\064\074\065\072\066\071\067" +
    "\070\070\067\071\065\072\052\073\051\074\050\075\046" +
    "\076\044\077\043\100\040\101\037\102\226\103\225\104" +
    "\223\105\221\106\206\107\205\110\204\111\201\112\200" +
    "\113\176\114\173\115\172\116\150\117\147\120\144\121" +
    "\143\122\142\123\140\124\137\125\135\126\116\127\114" +
    "\130\113\131\112\132\111\133\110\134\107\135\106\136" +
    "\066\137\064\140\062\141\061\142\060\143\057\144\056" +
    "\145\055\146\036\147\035\150\034\151\031\152\233\153" +
    "\231\154\230\155\227\156\224\157\222\160\220\161\217" +
    "\162\134\163\133\164\132\165\131\166\130\167\127\171" +
    "\235\172\101\173\216\174\120\175\236\176\041\177\042" +
    "\200\045\201\054\202\145\203\212\204\207\205\161\206" +
    "\153\207\234\210\156\211\151\212\232\213\077\214\100" +
    "\215\102\216\103\217\104\220\105\221\063\222\213\223" +
    "\136\224\214\225\215\234\162\262\013\265\166\267\210" +
    "\271\053\273\141\001\002\000\006\231\uffce\232\u018b\001" +
    "\002\000\004\231\u018c\001\002\000\u011c\014\uffd1\015\uffd1" +
    "\016\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102" +
    "\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1" +
    "\111\uffd1\112\uffd1\113\uffd1\114\uffd1\115\uffd1\116\uffd1\117" +
    "\uffd1\120\uffd1\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1" +
    "\126\uffd1\127\uffd1\130\uffd1\131\uffd1\132\uffd1\133\uffd1\134" +
    "\uffd1\135\uffd1\136\uffd1\137\uffd1\140\uffd1\141\uffd1\142\uffd1" +
    "\143\uffd1\144\uffd1\145\uffd1\146\uffd1\147\uffd1\150\uffd1\151" +
    "\uffd1\152\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1\157\uffd1" +
    "\160\uffd1\161\uffd1\162\uffd1\163\uffd1\164\uffd1\165\uffd1\166" +
    "\uffd1\167\uffd1\171\uffd1\172\uffd1\173\uffd1\174\uffd1\175\uffd1" +
    "\176\uffd1\177\uffd1\200\uffd1\201\uffd1\202\uffd1\203\uffd1\204" +
    "\uffd1\205\uffd1\206\uffd1\207\uffd1\210\uffd1\211\uffd1\212\uffd1" +
    "\213\uffd1\214\uffd1\215\uffd1\216\uffd1\217\uffd1\220\uffd1\221" +
    "\uffd1\222\uffd1\223\uffd1\224\uffd1\225\uffd1\231\uffd1\232\uffd1" +
    "\234\uffd1\236\uffd1\245\uffd1\262\uffd1\265\uffd1\267\uffd1\271" +
    "\uffd1\272\uffd1\273\uffd1\001\002\000\u0112\014\146\015\170" +
    "\016\073\026\203\027\202\030\177\031\175\032\174\033" +
    "\033\034\032\035\030\036\027\037\026\040\171\041\211" +
    "\042\165\043\164\044\163\045\160\046\157\047\155\050" +
    "\154\051\152\052\126\053\125\054\124\055\123\056\122" +
    "\057\121\060\117\061\115\062\076\063\075\064\074\065" +
    "\072\066\071\067\070\070\067\071\065\072\052\073\051" +
    "\074\050\075\046\076\044\077\043\100\040\101\037\102" +
    "\226\103\225\104\223\105\221\106\206\107\205\110\204" +
    "\111\201\112\200\113\176\114\173\115\172\116\150\117" +
    "\147\120\144\121\143\122\142\123\140\124\137\125\135" +
    "\126\116\127\114\130\113\131\112\132\111\133\110\134" +
    "\107\135\106\136\066\137\064\140\062\141\061\142\060" +
    "\143\057\144\056\145\055\146\036\147\035\150\034\151" +
    "\031\152\233\153\231\154\230\155\227\156\224\157\222" +
    "\160\220\161\217\162\134\163\133\164\132\165\131\166" +
    "\130\167\127\171\235\172\101\173\216\174\120\175\236" +
    "\176\041\177\042\200\045\201\054\202\145\203\212\204" +
    "\207\205\161\206\153\207\234\210\156\211\151\212\232" +
    "\213\077\214\100\215\102\216\103\217\104\220\105\221" +
    "\063\222\213\223\136\224\214\225\215\234\162\262\013" +
    "\265\166\267\210\271\053\273\141\001\002\000\004\232" +
    "\u018e\001\002\000\u011c\014\uffcd\015\uffcd\016\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104" +
    "\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd" +
    "\113\uffcd\114\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd\121" +
    "\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd\127\uffcd" +
    "\130\uffcd\131\uffcd\132\uffcd\133\uffcd\134\uffcd\135\uffcd\136" +
    "\uffcd\137\uffcd\140\uffcd\141\uffcd\142\uffcd\143\uffcd\144\uffcd" +
    "\145\uffcd\146\uffcd\147\uffcd\150\uffcd\151\uffcd\152\uffcd\153" +
    "\uffcd\154\uffcd\155\uffcd\156\uffcd\157\uffcd\160\uffcd\161\uffcd" +
    "\162\uffcd\163\uffcd\164\uffcd\165\uffcd\166\uffcd\167\uffcd\171" +
    "\uffcd\172\uffcd\173\uffcd\174\uffcd\175\uffcd\176\uffcd\177\uffcd" +
    "\200\uffcd\201\uffcd\202\uffcd\203\uffcd\204\uffcd\205\uffcd\206" +
    "\uffcd\207\uffcd\210\uffcd\211\uffcd\212\uffcd\213\uffcd\214\uffcd" +
    "\215\uffcd\216\uffcd\217\uffcd\220\uffcd\221\uffcd\222\uffcd\223" +
    "\uffcd\224\uffcd\225\uffcd\231\uffcd\232\uffcd\234\uffcd\236\uffcd" +
    "\245\uffcd\262\uffcd\265\uffcd\267\uffcd\271\uffcd\272\uffcd\273" +
    "\uffcd\001\002\000\004\230\u0190\001\002\000\u0112\014\146" +
    "\015\170\016\073\026\203\027\202\030\177\031\175\032" +
    "\174\033\033\034\032\035\030\036\027\037\026\040\171" +
    "\041\211\042\165\043\164\044\163\045\160\046\157\047" +
    "\155\050\154\051\152\052\126\053\125\054\124\055\123" +
    "\056\122\057\121\060\117\061\115\062\076\063\075\064" +
    "\074\065\072\066\071\067\070\070\067\071\065\072\052" +
    "\073\051\074\050\075\046\076\044\077\043\100\040\101" +
    "\037\102\226\103\225\104\223\105\221\106\206\107\205" +
    "\110\204\111\201\112\200\113\176\114\173\115\172\116" +
    "\150\117\147\120\144\121\143\122\142\123\140\124\137" +
    "\125\135\126\116\127\114\130\113\131\112\132\111\133" +
    "\110\134\107\135\106\136\066\137\064\140\062\141\061" +
    "\142\060\143\057\144\056\145\055\146\036\147\035\150" +
    "\034\151\031\152\233\153\231\154\230\155\227\156\224" +
    "\157\222\160\220\161\217\162\134\163\133\164\132\165" +
    "\131\166\130\167\127\171\235\172\101\173\216\174\120" +
    "\175\236\176\041\177\042\200\045\201\054\202\145\203" +
    "\212\204\207\205\161\206\153\207\234\210\156\211\151" +
    "\212\232\213\077\214\100\215\102\216\103\217\104\220" +
    "\105\221\063\222\213\223\136\224\214\225\215\234\162" +
    "\262\013\265\166\267\210\271\053\273\141\001\002\000" +
    "\006\231\uffd0\232\u0193\001\002\000\004\231\u0194\001\002" +
    "\000\u011c\014\uffd2\015\uffd2\016\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077" +
    "\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2" +
    "\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2\114" +
    "\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2\121\uffd2\122\uffd2" +
    "\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131" +
    "\uffd2\132\uffd2\133\uffd2\134\uffd2\135\uffd2\136\uffd2\137\uffd2" +
    "\140\uffd2\141\uffd2\142\uffd2\143\uffd2\144\uffd2\145\uffd2\146" +
    "\uffd2\147\uffd2\150\uffd2\151\uffd2\152\uffd2\153\uffd2\154\uffd2" +
    "\155\uffd2\156\uffd2\157\uffd2\160\uffd2\161\uffd2\162\uffd2\163" +
    "\uffd2\164\uffd2\165\uffd2\166\uffd2\167\uffd2\171\uffd2\172\uffd2" +
    "\173\uffd2\174\uffd2\175\uffd2\176\uffd2\177\uffd2\200\uffd2\201" +
    "\uffd2\202\uffd2\203\uffd2\204\uffd2\205\uffd2\206\uffd2\207\uffd2" +
    "\210\uffd2\211\uffd2\212\uffd2\213\uffd2\214\uffd2\215\uffd2\216" +
    "\uffd2\217\uffd2\220\uffd2\221\uffd2\222\uffd2\223\uffd2\224\uffd2" +
    "\225\uffd2\231\uffd2\232\uffd2\234\uffd2\236\uffd2\245\uffd2\262" +
    "\uffd2\265\uffd2\267\uffd2\271\uffd2\272\uffd2\273\uffd2\001\002" +
    "\000\u0112\014\146\015\170\016\073\026\203\027\202\030" +
    "\177\031\175\032\174\033\033\034\032\035\030\036\027" +
    "\037\026\040\171\041\211\042\165\043\164\044\163\045" +
    "\160\046\157\047\155\050\154\051\152\052\126\053\125" +
    "\054\124\055\123\056\122\057\121\060\117\061\115\062" +
    "\076\063\075\064\074\065\072\066\071\067\070\070\067" +
    "\071\065\072\052\073\051\074\050\075\046\076\044\077" +
    "\043\100\040\101\037\102\226\103\225\104\223\105\221" +
    "\106\206\107\205\110\204\111\201\112\200\113\176\114" +
    "\173\115\172\116\150\117\147\120\144\121\143\122\142" +
    "\123\140\124\137\125\135\126\116\127\114\130\113\131" +
    "\112\132\111\133\110\134\107\135\106\136\066\137\064" +
    "\140\062\141\061\142\060\143\057\144\056\145\055\146" +
    "\036\147\035\150\034\151\031\152\233\153\231\154\230" +
    "\155\227\156\224\157\222\160\220\161\217\162\134\163" +
    "\133\164\132\165\131\166\130\167\127\171\235\172\101" +
    "\173\216\174\120\175\236\176\041\177\042\200\045\201" +
    "\054\202\145\203\212\204\207\205\161\206\153\207\234" +
    "\210\156\211\151\212\232\213\077\214\100\215\102\216" +
    "\103\217\104\220\105\221\063\222\213\223\136\224\214" +
    "\225\215\234\162\262\013\265\166\267\210\271\053\273" +
    "\141\001\002\000\004\232\u0196\001\002\000\u011c\014\uffcf" +
    "\015\uffcf\016\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf" +
    "\110\uffcf\111\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\116" +
    "\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf" +
    "\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131\uffcf\132\uffcf\133" +
    "\uffcf\134\uffcf\135\uffcf\136\uffcf\137\uffcf\140\uffcf\141\uffcf" +
    "\142\uffcf\143\uffcf\144\uffcf\145\uffcf\146\uffcf\147\uffcf\150" +
    "\uffcf\151\uffcf\152\uffcf\153\uffcf\154\uffcf\155\uffcf\156\uffcf" +
    "\157\uffcf\160\uffcf\161\uffcf\162\uffcf\163\uffcf\164\uffcf\165" +
    "\uffcf\166\uffcf\167\uffcf\171\uffcf\172\uffcf\173\uffcf\174\uffcf" +
    "\175\uffcf\176\uffcf\177\uffcf\200\uffcf\201\uffcf\202\uffcf\203" +
    "\uffcf\204\uffcf\205\uffcf\206\uffcf\207\uffcf\210\uffcf\211\uffcf" +
    "\212\uffcf\213\uffcf\214\uffcf\215\uffcf\216\uffcf\217\uffcf\220" +
    "\uffcf\221\uffcf\222\uffcf\223\uffcf\224\uffcf\225\uffcf\231\uffcf" +
    "\232\uffcf\234\uffcf\236\uffcf\245\uffcf\262\uffcf\265\uffcf\267" +
    "\uffcf\271\uffcf\272\uffcf\273\uffcf\001\002\000\006\240\u0199" +
    "\267\u0198\001\002\000\004\246\u01a2\001\002\000\004\244" +
    "\u019f\001\002\000\004\240\u019b\001\002\000\004\244\u019c" +
    "\001\002\000\u0112\014\146\015\170\016\073\026\203\027" +
    "\202\030\177\031\175\032\174\033\033\034\032\035\030" +
    "\036\027\037\026\040\171\041\211\042\165\043\164\044" +
    "\163\045\160\046\157\047\155\050\154\051\152\052\126" +
    "\053\125\054\124\055\123\056\122\057\121\060\117\061" +
    "\115\062\076\063\075\064\074\065\072\066\071\067\070" +
    "\070\067\071\065\072\052\073\051\074\050\075\046\076" +
    "\044\077\043\100\040\101\037\102\226\103\225\104\223" +
    "\105\221\106\206\107\205\110\204\111\201\112\200\113" +
    "\176\114\173\115\172\116\150\117\147\120\144\121\143" +
    "\122\142\123\140\124\137\125\135\126\116\127\114\130" +
    "\113\131\112\132\111\133\110\134\107\135\106\136\066" +
    "\137\064\140\062\141\061\142\060\143\057\144\056\145" +
    "\055\146\036\147\035\150\034\151\031\152\233\153\231" +
    "\154\230\155\227\156\224\157\222\160\220\161\217\162" +
    "\134\163\133\164\132\165\131\166\130\167\127\171\235" +
    "\172\101\173\216\174\120\175\236\176\041\177\042\200" +
    "\045\201\054\202\145\203\212\204\207\205\161\206\153" +
    "\207\234\210\156\211\151\212\232\213\077\214\100\215" +
    "\102\216\103\217\104\220\105\221\063\222\213\223\136" +
    "\224\214\225\215\234\162\262\013\265\166\267\210\271" +
    "\053\273\141\001\002\000\004\245\u019e\001\002\000\006" +
    "\020\uffe8\226\uffe8\001\002\000\u0112\014\146\015\170\016" +
    "\073\026\203\027\202\030\177\031\175\032\174\033\033" +
    "\034\032\035\030\036\027\037\026\040\171\041\211\042" +
    "\165\043\164\044\163\045\160\046\157\047\155\050\154" +
    "\051\152\052\126\053\125\054\124\055\123\056\122\057" +
    "\121\060\117\061\115\062\076\063\075\064\074\065\072" +
    "\066\071\067\070\070\067\071\065\072\052\073\051\074" +
    "\050\075\046\076\044\077\043\100\040\101\037\102\226" +
    "\103\225\104\223\105\221\106\206\107\205\110\204\111" +
    "\201\112\200\113\176\114\173\115\172\116\150\117\147" +
    "\120\144\121\143\122\142\123\140\124\137\125\135\126" +
    "\116\127\114\130\113\131\112\132\111\133\110\134\107" +
    "\135\106\136\066\137\064\140\062\141\061\142\060\143" +
    "\057\144\056\145\055\146\036\147\035\150\034\151\031" +
    "\152\233\153\231\154\230\155\227\156\224\157\222\160" +
    "\220\161\217\162\134\163\133\164\132\165\131\166\130" +
    "\167\127\171\235\172\101\173\216\174\120\175\236\176" +
    "\041\177\042\200\045\201\054\202\145\203\212\204\207" +
    "\205\161\206\153\207\234\210\156\211\151\212\232\213" +
    "\077\214\100\215\102\216\103\217\104\220\105\221\063" +
    "\222\213\223\136\224\214\225\215\234\162\262\013\265" +
    "\166\267\210\271\053\273\141\001\002\000\004\245\u01a1" +
    "\001\002\000\006\020\uffea\226\uffea\001\002\000\012\004" +
    "\u01a3\005\u01a5\006\u01a6\007\u01a7\001\002\000\012\013\uff8f" +
    "\240\uff8f\247\uff8f\250\uff8f\001\002\000\006\013\u01a8\240" +
    "\uffe6\001\002\000\012\013\uff8e\240\uff8e\247\uff8e\250\uff8e" +
    "\001\002\000\012\013\uff8d\240\uff8d\247\uff8d\250\uff8d\001" +
    "\002\000\012\013\uff8c\240\uff8c\247\uff8c\250\uff8c\001\002" +
    "\000\004\267\u0198\001\002\000\004\240\uffe5\001\002\000" +
    "\006\024\u01c4\025\u01bb\001\002\000\006\020\010\226\u01ad" +
    "\001\002\000\006\024\u01b9\025\u01bb\001\002\000\004\267" +
    "\u01ae\001\002\000\004\237\u01af\001\002\000\006\240\u01b0" +
    "\267\u0198\001\002\000\004\244\u01b6\001\002\000\004\240" +
    "\u01b2\001\002\000\004\244\u01b3\001\002\000\u0112\014\146" +
    "\015\170\016\073\026\203\027\202\030\177\031\175\032" +
    "\174\033\033\034\032\035\030\036\027\037\026\040\171" +
    "\041\211\042\165\043\164\044\163\045\160\046\157\047" +
    "\155\050\154\051\152\052\126\053\125\054\124\055\123" +
    "\056\122\057\121\060\117\061\115\062\076\063\075\064" +
    "\074\065\072\066\071\067\070\070\067\071\065\072\052" +
    "\073\051\074\050\075\046\076\044\077\043\100\040\101" +
    "\037\102\226\103\225\104\223\105\221\106\206\107\205" +
    "\110\204\111\201\112\200\113\176\114\173\115\172\116" +
    "\150\117\147\120\144\121\143\122\142\123\140\124\137" +
    "\125\135\126\116\127\114\130\113\131\112\132\111\133" +
    "\110\134\107\135\106\136\066\137\064\140\062\141\061" +
    "\142\060\143\057\144\056\145\055\146\036\147\035\150" +
    "\034\151\031\152\233\153\231\154\230\155\227\156\224" +
    "\157\222\160\220\161\217\162\134\163\133\164\132\165" +
    "\131\166\130\167\127\171\235\172\101\173\216\174\120" +
    "\175\236\176\041\177\042\200\045\201\054\202\145\203" +
    "\212\204\207\205\161\206\153\207\234\210\156\211\151" +
    "\212\232\213\077\214\100\215\102\216\103\217\104\220" +
    "\105\221\063\222\213\223\136\224\214\225\215\234\162" +
    "\262\013\265\166\267\210\271\053\273\141\001\002\000" +
    "\004\245\u01b5\001\002\000\006\020\uffe7\226\uffe7\001\002" +
    "\000\u0112\014\146\015\170\016\073\026\203\027\202\030" +
    "\177\031\175\032\174\033\033\034\032\035\030\036\027" +
    "\037\026\040\171\041\211\042\165\043\164\044\163\045" +
    "\160\046\157\047\155\050\154\051\152\052\126\053\125" +
    "\054\124\055\123\056\122\057\121\060\117\061\115\062" +
    "\076\063\075\064\074\065\072\066\071\067\070\070\067" +
    "\071\065\072\052\073\051\074\050\075\046\076\044\077" +
    "\043\100\040\101\037\102\226\103\225\104\223\105\221" +
    "\106\206\107\205\110\204\111\201\112\200\113\176\114" +
    "\173\115\172\116\150\117\147\120\144\121\143\122\142" +
    "\123\140\124\137\125\135\126\116\127\114\130\113\131" +
    "\112\132\111\133\110\134\107\135\106\136\066\137\064" +
    "\140\062\141\061\142\060\143\057\144\056\145\055\146" +
    "\036\147\035\150\034\151\031\152\233\153\231\154\230" +
    "\155\227\156\224\157\222\160\220\161\217\162\134\163" +
    "\133\164\132\165\131\166\130\167\127\171\235\172\101" +
    "\173\216\174\120\175\236\176\041\177\042\200\045\201" +
    "\054\202\145\203\212\204\207\205\161\206\153\207\234" +
    "\210\156\211\151\212\232\213\077\214\100\215\102\216" +
    "\103\217\104\220\105\221\063\222\213\223\136\224\214" +
    "\225\215\234\162\262\013\265\166\267\210\271\053\273" +
    "\141\001\002\000\004\245\u01b8\001\002\000\006\020\uffe9" +
    "\226\uffe9\001\002\000\004\237\u01c0\001\002\000\004\017" +
    "\ufffa\001\002\000\004\244\u01bc\001\002\000\u0114\014\146" +
    "\015\170\016\073\026\203\027\202\030\177\031\175\032" +
    "\174\033\033\034\032\035\030\036\027\037\026\040\171" +
    "\041\211\042\165\043\164\044\163\045\160\046\157\047" +
    "\155\050\154\051\152\052\126\053\125\054\124\055\123" +
    "\056\122\057\121\060\117\061\115\062\076\063\075\064" +
    "\074\065\072\066\071\067\070\070\067\071\065\072\052" +
    "\073\051\074\050\075\046\076\044\077\043\100\040\101" +
    "\037\102\226\103\225\104\223\105\221\106\206\107\205" +
    "\110\204\111\201\112\200\113\176\114\173\115\172\116" +
    "\150\117\147\120\144\121\143\122\142\123\140\124\137" +
    "\125\135\126\116\127\114\130\113\131\112\132\111\133" +
    "\110\134\107\135\106\136\066\137\064\140\062\141\061" +
    "\142\060\143\057\144\056\145\055\146\036\147\035\150" +
    "\034\151\031\152\233\153\231\154\230\155\227\156\224" +
    "\157\222\160\220\161\217\162\134\163\133\164\132\165" +
    "\131\166\130\167\127\171\235\172\101\173\216\174\120" +
    "\175\236\176\041\177\042\200\045\201\054\202\145\203" +
    "\212\204\207\205\161\206\153\207\234\210\156\211\151" +
    "\212\232\213\077\214\100\215\102\216\103\217\104\220" +
    "\105\221\063\222\213\223\136\224\214\225\215\234\162" +
    "\245\u01bd\262\013\265\166\267\210\271\053\273\141\001" +
    "\002\000\004\017\uffee\001\002\000\004\245\u01bf\001\002" +
    "\000\004\017\uffef\001\002\000\004\240\u01c1\001\002\000" +
    "\004\247\u01c2\001\002\000\004\025\u01bb\001\002\000\004" +
    "\017\ufff9\001\002\000\004\237\u01c6\001\002\000\004\017" +
    "\ufff8\001\002\000\004\240\u01c7\001\002\000\004\247\u01c8" +
    "\001\002\000\004\025\u01bb\001\002\000\004\017\ufffb\001" +
    "\002\000\006\020\uffbe\226\uffbe\001\002\000\006\024\u01cc" +
    "\025\u01bb\001\002\000\004\237\u01ce\001\002\000\004\017" +
    "\ufffd\001\002\000\004\240\u01cf\001\002\000\004\247\u01d0" +
    "\001\002\000\004\025\u01bb\001\002\000\004\017\ufffc\001" +
    "\002\000\004\246\u01d3\001\002\000\012\004\u01a3\005\u01a5" +
    "\006\u01a6\007\u01a7\001\002\000\006\247\u01d6\250\u01d5\001" +
    "\002\000\020\010\u0100\011\372\012\u0102\266\u01d7\267\u01d8" +
    "\274\373\275\370\001\002\000\u0120\014\uffbd\015\uffbd\016" +
    "\uffbd\020\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd" +
    "\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110" +
    "\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd" +
    "\117\uffbd\120\uffbd\121\uffbd\122\uffbd\123\uffbd\124\uffbd\125" +
    "\uffbd\126\uffbd\127\uffbd\130\uffbd\131\uffbd\132\uffbd\133\uffbd" +
    "\134\uffbd\135\uffbd\136\uffbd\137\uffbd\140\uffbd\141\uffbd\142" +
    "\uffbd\143\uffbd\144\uffbd\145\uffbd\146\uffbd\147\uffbd\150\uffbd" +
    "\151\uffbd\152\uffbd\153\uffbd\154\uffbd\155\uffbd\156\uffbd\157" +
    "\uffbd\160\uffbd\161\uffbd\162\uffbd\163\uffbd\164\uffbd\165\uffbd" +
    "\166\uffbd\167\uffbd\171\uffbd\172\uffbd\173\uffbd\174\uffbd\175" +
    "\uffbd\176\uffbd\177\uffbd\200\uffbd\201\uffbd\202\uffbd\203\uffbd" +
    "\204\uffbd\205\uffbd\206\uffbd\207\uffbd\210\uffbd\211\uffbd\212" +
    "\uffbd\213\uffbd\214\uffbd\215\uffbd\216\uffbd\217\uffbd\220\uffbd" +
    "\221\uffbd\222\uffbd\223\uffbd\224\uffbd\225\uffbd\226\uffbd\231" +
    "\uffbd\232\uffbd\234\uffbd\236\uffbd\245\uffbd\262\uffbd\265\uffbd" +
    "\267\uffbd\271\uffbd\272\uffbd\273\uffbd\001\002\000\004\247" +
    "\uff8a\001\002\000\004\247\uff8b\001\002\000\004\247\u01da" +
    "\001\002\000\u0120\014\uffbc\015\uffbc\016\uffbc\020\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\113\uffbc\114\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\121\uffbc\122\uffbc\123\uffbc\124\uffbc\125\uffbc\126\uffbc\127" +
    "\uffbc\130\uffbc\131\uffbc\132\uffbc\133\uffbc\134\uffbc\135\uffbc" +
    "\136\uffbc\137\uffbc\140\uffbc\141\uffbc\142\uffbc\143\uffbc\144" +
    "\uffbc\145\uffbc\146\uffbc\147\uffbc\150\uffbc\151\uffbc\152\uffbc" +
    "\153\uffbc\154\uffbc\155\uffbc\156\uffbc\157\uffbc\160\uffbc\161" +
    "\uffbc\162\uffbc\163\uffbc\164\uffbc\165\uffbc\166\uffbc\167\uffbc" +
    "\171\uffbc\172\uffbc\173\uffbc\174\uffbc\175\uffbc\176\uffbc\177" +
    "\uffbc\200\uffbc\201\uffbc\202\uffbc\203\uffbc\204\uffbc\205\uffbc" +
    "\206\uffbc\207\uffbc\210\uffbc\211\uffbc\212\uffbc\213\uffbc\214" +
    "\uffbc\215\uffbc\216\uffbc\217\uffbc\220\uffbc\221\uffbc\222\uffbc" +
    "\223\uffbc\224\uffbc\225\uffbc\226\uffbc\231\uffbc\232\uffbc\234" +
    "\uffbc\236\uffbc\245\uffbc\262\uffbc\265\uffbc\267\uffbc\271\uffbc" +
    "\272\uffbc\273\uffbc\001\002\000\004\002\001\001\002\000" +
    "\004\244\u01dd\001\002\000\u0114\014\146\015\170\016\073" +
    "\026\203\027\202\030\177\031\175\032\174\033\033\034" +
    "\032\035\030\036\027\037\026\040\171\041\211\042\165" +
    "\043\164\044\163\045\160\046\157\047\155\050\154\051" +
    "\152\052\126\053\125\054\124\055\123\056\122\057\121" +
    "\060\117\061\115\062\076\063\075\064\074\065\072\066" +
    "\071\067\070\070\067\071\065\072\052\073\051\074\050" +
    "\075\046\076\044\077\043\100\040\101\037\102\226\103" +
    "\225\104\223\105\221\106\206\107\205\110\204\111\201" +
    "\112\200\113\176\114\173\115\172\116\150\117\147\120" +
    "\144\121\143\122\142\123\140\124\137\125\135\126\116" +
    "\127\114\130\113\131\112\132\111\133\110\134\107\135" +
    "\106\136\066\137\064\140\062\141\061\142\060\143\057" +
    "\144\056\145\055\146\036\147\035\150\034\151\031\152" +
    "\233\153\231\154\230\155\227\156\224\157\222\160\220" +
    "\161\217\162\134\163\133\164\132\165\131\166\130\167" +
    "\127\171\235\172\101\173\216\174\120\175\236\176\041" +
    "\177\042\200\045\201\054\202\145\203\212\204\207\205" +
    "\161\206\153\207\234\210\156\211\151\212\232\213\077" +
    "\214\100\215\102\216\103\217\104\220\105\221\063\222" +
    "\213\223\136\224\214\225\215\234\162\245\u01de\262\013" +
    "\265\166\267\210\271\053\273\141\001\002\000\004\002" +
    "\uffec\001\002\000\004\245\u01e0\001\002\000\004\002\uffed" +
    "\001\002\000\004\237\u01e3\001\002\000\004\017\uffff\001" +
    "\002\000\004\240\u01e4\001\002\000\004\247\u01e5\001\002" +
    "\000\004\025\u01bb\001\002\000\004\017\ufffe\001\002\000" +
    "\u0100\026\203\027\202\030\177\031\175\032\174\033\033" +
    "\034\032\035\030\036\027\037\026\040\171\041\211\042" +
    "\165\043\164\044\163\045\160\046\157\047\155\050\154" +
    "\051\152\052\126\053\125\054\124\055\123\056\122\057" +
    "\121\060\117\061\115\062\076\063\075\064\074\065\072" +
    "\066\071\067\070\070\067\071\065\072\052\073\051\074" +
    "\050\075\046\076\044\077\043\100\040\101\037\102\226" +
    "\103\225\104\223\105\221\106\206\107\205\110\204\111" +
    "\201\112\200\113\176\114\173\115\172\116\150\117\147" +
    "\120\144\121\143\122\142\123\140\124\137\125\135\126" +
    "\116\127\114\130\113\131\112\132\111\133\110\134\107" +
    "\135\106\136\066\137\064\140\062\141\061\142\060\143" +
    "\057\144\056\145\055\146\036\147\035\150\034\151\031" +
    "\152\233\153\231\154\230\155\227\156\224\157\222\160" +
    "\220\161\217\162\134\163\133\164\132\165\131\166\130" +
    "\167\127\171\235\172\101\173\216\174\120\175\236\176" +
    "\041\177\042\200\045\201\054\202\145\203\212\204\207" +
    "\205\161\206\153\207\234\210\156\211\151\212\232\213" +
    "\077\214\100\215\102\216\103\217\104\220\105\221\063" +
    "\222\213\223\136\224\214\225\215\001\002\000\u0114\014" +
    "\146\015\170\016\073\026\203\027\202\030\177\031\175" +
    "\032\174\033\033\034\032\035\030\036\027\037\026\040" +
    "\171\041\211\042\165\043\164\044\163\045\160\046\157" +
    "\047\155\050\154\051\152\052\126\053\125\054\124\055" +
    "\123\056\122\057\121\060\117\061\115\062\076\063\075" +
    "\064\074\065\072\066\071\067\070\070\067\071\065\072" +
    "\052\073\051\074\050\075\046\076\044\077\043\100\040" +
    "\101\037\102\226\103\225\104\223\105\221\106\206\107" +
    "\205\110\204\111\201\112\200\113\176\114\173\115\172" +
    "\116\150\117\147\120\144\121\143\122\142\123\140\124" +
    "\137\125\135\126\116\127\114\130\113\131\112\132\111" +
    "\133\110\134\107\135\106\136\066\137\064\140\062\141" +
    "\061\142\060\143\057\144\056\145\055\146\036\147\035" +
    "\150\034\151\031\152\233\153\231\154\230\155\227\156" +
    "\224\157\222\160\220\161\217\162\134\163\133\164\132" +
    "\165\131\166\130\167\127\171\235\172\101\173\216\174" +
    "\120\175\236\176\041\177\042\200\045\201\054\202\145" +
    "\203\212\204\207\205\161\206\153\207\234\210\156\211" +
    "\151\212\232\213\077\214\100\215\102\216\103\217\104" +
    "\220\105\221\063\222\213\223\136\224\214\225\215\234" +
    "\162\245\u01ef\262\013\265\166\267\210\271\053\273\141" +
    "\001\002\000\004\250\u01ea\001\002\000\006\022\u01ed\023" +
    "\u01eb\001\002\000\004\247\ufff0\001\002\000\004\247\u01ee" +
    "\001\002\000\004\247\ufff1\001\002\000\u0114\014\ufff3\015" +
    "\ufff3\016\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3" +
    "\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\110" +
    "\ufff3\111\ufff3\112\ufff3\113\ufff3\114\ufff3\115\ufff3\116\ufff3" +
    "\117\ufff3\120\ufff3\121\ufff3\122\ufff3\123\ufff3\124\ufff3\125" +
    "\ufff3\126\ufff3\127\ufff3\130\ufff3\131\ufff3\132\ufff3\133\ufff3" +
    "\134\ufff3\135\ufff3\136\ufff3\137\ufff3\140\ufff3\141\ufff3\142" +
    "\ufff3\143\ufff3\144\ufff3\145\ufff3\146\ufff3\147\ufff3\150\ufff3" +
    "\151\ufff3\152\ufff3\153\ufff3\154\ufff3\155\ufff3\156\ufff3\157" +
    "\ufff3\160\ufff3\161\ufff3\162\ufff3\163\ufff3\164\ufff3\165\ufff3" +
    "\166\ufff3\167\ufff3\171\ufff3\172\ufff3\173\ufff3\174\ufff3\175" +
    "\ufff3\176\ufff3\177\ufff3\200\ufff3\201\ufff3\202\ufff3\203\ufff3" +
    "\204\ufff3\205\ufff3\206\ufff3\207\ufff3\210\ufff3\211\ufff3\212" +
    "\ufff3\213\ufff3\214\ufff3\215\ufff3\216\ufff3\217\ufff3\220\ufff3" +
    "\221\ufff3\222\ufff3\223\ufff3\224\ufff3\225\ufff3\234\ufff3\245" +
    "\ufff3\262\ufff3\265\ufff3\267\ufff3\271\ufff3\273\ufff3\001\002" +
    "\000\006\024\ufff5\025\ufff5\001\002\000\006\250\u01f3\252" +
    "\243\001\002\000\004\245\u01f2\001\002\000\006\024\ufff4" +
    "\025\ufff4\001\002\000\156\022\u01ed\023\u01eb\026\260\027" +
    "\257\030\256\031\255\032\254\106\247\107\245\110\325" +
    "\111\321\112\317\113\315\114\314\115\313\116\304\117" +
    "\302\120\301\121\300\122\277\123\276\124\275\125\274" +
    "\126\272\127\271\130\267\131\265\132\264\133\263\134" +
    "\262\135\261\136\253\137\252\140\250\141\244\142\323" +
    "\143\322\144\320\145\316\146\307\147\306\150\305\151" +
    "\303\203\273\204\310\205\312\206\270\207\251\210\311" +
    "\211\266\212\246\266\327\267\330\274\331\001\002\000" +
    "\004\247\u01f5\001\002\000\u0114\014\ufff2\015\ufff2\016\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103" +
    "\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2" +
    "\112\ufff2\113\ufff2\114\ufff2\115\ufff2\116\ufff2\117\ufff2\120" +
    "\ufff2\121\ufff2\122\ufff2\123\ufff2\124\ufff2\125\ufff2\126\ufff2" +
    "\127\ufff2\130\ufff2\131\ufff2\132\ufff2\133\ufff2\134\ufff2\135" +
    "\ufff2\136\ufff2\137\ufff2\140\ufff2\141\ufff2\142\ufff2\143\ufff2" +
    "\144\ufff2\145\ufff2\146\ufff2\147\ufff2\150\ufff2\151\ufff2\152" +
    "\ufff2\153\ufff2\154\ufff2\155\ufff2\156\ufff2\157\ufff2\160\ufff2" +
    "\161\ufff2\162\ufff2\163\ufff2\164\ufff2\165\ufff2\166\ufff2\167" +
    "\ufff2\171\ufff2\172\ufff2\173\ufff2\174\ufff2\175\ufff2\176\ufff2" +
    "\177\ufff2\200\ufff2\201\ufff2\202\ufff2\203\ufff2\204\ufff2\205" +
    "\ufff2\206\ufff2\207\ufff2\210\ufff2\211\ufff2\212\ufff2\213\ufff2" +
    "\214\ufff2\215\ufff2\216\ufff2\217\ufff2\220\ufff2\221\ufff2\222" +
    "\ufff2\223\ufff2\224\ufff2\225\ufff2\234\ufff2\245\ufff2\262\ufff2" +
    "\265\ufff2\267\ufff2\271\ufff2\273\ufff2\001\002\000\004\266" +
    "\u01f7\001\002\000\004\245\u01f8\001\002\000\010\020\ufff6" +
    "\226\ufff6\262\ufff6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f7\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\036\006\001\001\000\002\001\001\000\014\004\011" +
    "\006\010\010\013\020\014\021\015\001\001\000\002\001" +
    "\001\000\004\007\u01e1\001\001\000\004\005\u01da\001\001" +
    "\000\002\001\001\000\004\006\u01ca\001\001\000\006\020" +
    "\014\021\u01c9\001\001\000\006\006\u01a9\010\u01aa\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\237\014\236\017\166\020\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\u013c\014" +
    "\236\017\166\020\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\331\001\001\000" +
    "\004\015\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\374\030\370\034\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u012f\001\001\000\002" +
    "\001\001\000\006\022\u010b\034\u010c\001\001\000\002\001" +
    "\001\000\004\032\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\u0107\034\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0121\001\001\000\004\032\u010d\001\001\000\006" +
    "\022\u010e\034\u010f\001\001\000\012\032\u0114\033\u0110\034" +
    "\u0113\035\u011d\001\001\000\012\032\u0114\033\u0110\034\u0113" +
    "\035\u0111\001\001\000\006\032\u011a\034\u011b\001\001\000" +
    "\004\032\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\u0115\034\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\u0119\001\001" +
    "\000\002\001\001\000\004\022\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u0122\001\001\000\006\032\u0125\033\u0124\001\001\000\002" +
    "\001\001\000\004\032\u011a\001\001\000\006\022\u0115\034" +
    "\u0126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0130\001\001\000\006\032\u0131\033\u0132\001" +
    "\001\000\004\022\u0115\001\001\000\004\032\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u0140\022\u013f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u0143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0146\001\001\000\002\001\001\000\012\012" +
    "\u0148\014\236\017\166\020\046\001\001\000\002\001\001" +
    "\000\012\012\u014a\014\236\017\166\020\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u014e\001\001\000\002\001\001\000\012\012\u0150\014" +
    "\236\017\166\020\046\001\001\000\002\001\001\000\012" +
    "\012\u0152\014\236\017\166\020\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\u0165\022\u0161\023\u0163\024" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u016c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\u0165" +
    "\023\u0171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u0173\026\u0172" +
    "\001\001\000\002\001\001\000\006\015\u0165\023\u0174\001" +
    "\001\000\006\025\u0173\026\u0175\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\u0178\014\236\017\166\020" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\u017d\014\236\017" +
    "\166\020\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\u0185\023\u0163\024\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\u0188\014\236\017\166\020\046\001\001\000\004" +
    "\040\u0189\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\u018c\014\236\017\166\020\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\u0190\014\236\017\166\020\046\001\001\000\004\037\u0191" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\u0194\014\236\017\166\020\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u0199\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\u019c\014\236\017\166\020\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\u019f\014\236" +
    "\017\166\020\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01a3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u01a8\001\001\000\002\001\001\000\004" +
    "\007\u01c4\001\001\000\004\006\u01ab\001\001\000\004\007" +
    "\u01b9\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u01b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\u01b3\014\236\017\166\020\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\u01b6\014\236\017\166\020\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\u01bd\014\236\017\166\020\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u01c2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u01c8" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u01cc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u01d0\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u01d3\001\001" +
    "\000\002\001\001\000\004\030\u01d8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\u01de\014\236\017\166\020\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u01e5\001\001\000\002\001\001\000\006\013" +
    "\u01e7\014\u01e8\001\001\000\012\012\u01f0\014\u01ef\017\166" +
    "\020\046\001\001\000\002\001\001\000\004\016\u01eb\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\331\016\u01f3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static TablaDatos tabla = new TablaDatos();
	static int estado;
	StringBuffer m = new StringBuffer("");
    static StringBuffer []vec=new StringBuffer[10];
    static int i=0;
//*******************************************
   public void Documenta(int tipo)
   { m.append("Error de Sintaxis No."+tipo);
     ManejoDeErrores objeto=new ManejoDeErrores();
     String tip=objeto.Errores(tipo);
	  m.append("\n"+tip+"\n");
      vec[i++]=m;

   }
//*******************************************
   public void syntax_error(Symbol cur_token)
   {
   	estado=((Symbol)stack.peek()).parse_state;
   	  ManejoDeErrores obj = new ManejoDeErrores();
      String m=obj.analizaToken(cur_token);
      System.err.println("\n\nSimbolo actual analizado: "+m+"-->"+cur_token);
      //System.err.println("\n\nSimbolo actual analizado: "+cur_token);

   }
//******************************************
   public void report_error(String message, Object info)
   { if (info instanceof java_cup.runtime.Symbol)
     { java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
       if (s.left >= 0)
       { m.append("Linea "+ (s.left +1));
         if (s.right >= 0)
          m.append(", Columna "+(s.right)+"\n");
       }
     }
   }
/**************METODO MAIN ********/
public static void main(String[] arg)
 	{
	  /* Crea un objeto parser */
	  parser parserObj = new parser();
	  /* Asigna el Scanner */
	  Yylex miAnalizadorLexico = new Yylex(new InputStreamReader(System.in));
	  parserObj.setScanner(miAnalizadorLexico);
	  try{
		parserObj.parse();
		tabla.imprimir();
	  }
catch(Exception x){
	  parserObj.Documenta(estado);
  	  for(int j=0;j<i;j++)
		System.out.println(vec[j]);

	}

}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



methodsTable tablaMetodos = new methodsTable();
String codigo="";
String miCodigo="";
String errores="";
String retardos="";
String auxiliar="";
String losMetodos="";
String aux="";
String auxno="";
String aux2="";
String auxsw="";
String p2="";
String p1="";
String aux3="";
String cadena_condiciones=" ";
String cadena_tipo="";
String cadena_parametros="";
String encadenamst="";
String cadena_decvar="";

	private static Stack<String>p = new Stack<String>();
	private static Stack<String>pila2 = new Stack<String>();

	private static int actualTmp=0;

	private static String nuevaTmp() {
		return "tmp"+(++actualTmp);
	}

	private static int actualEtq=0;

	private static String nuevaEtq() {
		return "etqY"+(++actualEtq);
	}



	private String generarTerceto(String terceto) {
		String tmp = nuevaTmp();
		return tmp;
	}

	private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2){
		BloqueCondicion etqs = new BloqueCondicion();
		etqs.etqVerdad = nuevaEtq();
		etqs.etqFalso = nuevaEtq();
		etqs.condicion = Rvalor1+condicion+Rvalor2;
		auxiliar="";
		return etqs;
	}

	private BloqueCondicion generarCondicion(String condicion, String Rvalor2){
		BloqueCondicion etqs = new BloqueCondicion();
		etqs.condicion = condicion+Rvalor2;
		auxiliar="";
		return etqs;
	}
	private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2,String extra){
		BloqueCondicion etqs = new BloqueCondicion();

		etqs.condicion = Rvalor1+condicion+Rvalor2+extra;
		auxiliar="";
		return etqs;
	}




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // puertost ::= INTCONRBIF 
            {
              String RESULT = null;
		int intrbifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intrbifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intrbif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intrbif + "";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // puertost ::= INTCONINTF 
            {
              String RESULT = null;
		int intintfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intintfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intintf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intintf + "";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // puertost ::= INTCONT0IF 
            {
              String RESULT = null;
		int intt0ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intt0ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intt0if = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intt0if + "";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // puertost ::= INTCONRBIE 
            {
              String RESULT = null;
		int intrbieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intrbieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intrbie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intrbie + "";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // puertost ::= INTCONINTE 
            {
              String RESULT = null;
		int intinteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intinteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intinte = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intinte + "";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // puertost ::= INTCONT0IE 
            {
              String RESULT = null;
		int intt0ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intt0ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intt0ie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intt0ie + "";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // puertost ::= INTCONPEIE 
            {
              String RESULT = null;
		int intpeieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intpeieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intpeie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intpeie + "";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // puertost ::= INTCONGIE 
            {
              String RESULT = null;
		int intgieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intgieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intgie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intgie +    "";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // puertost ::= PE3 
            {
              String RESULT = null;
		int pe3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe3+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // puertost ::= PE2 
            {
              String RESULT = null;
		int pe2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe2+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // puertost ::= PE1 
            {
              String RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe1+"";     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // puertost ::= PE0 
            {
              String RESULT = null;
		int pe0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe0+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // puertost ::= PD7 
            {
              String RESULT = null;
		int pd7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd7+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // puertost ::= PD6 
            {
              String RESULT = null;
		int pd6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd6+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // puertost ::= PD5 
            {
              String RESULT = null;
		int pd5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd5+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // puertost ::= PD4 
            {
              String RESULT = null;
		int pd4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd4+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // puertost ::= PD3 
            {
              String RESULT = null;
		int pd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd3+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // puertost ::= PD2 
            {
              String RESULT = null;
		int pd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd2+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // puertost ::= PD1 
            {
              String RESULT = null;
		int pd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd1+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // puertost ::= PD0 
            {
              String RESULT = null;
		int pd0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd0+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // puertost ::= PC7 
            {
              String RESULT = null;
		int pc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // puertost ::= PC6 
            {
              String RESULT = null;
		int pc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc6+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // puertost ::= PC5 
            {
              String RESULT = null;
		int pc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc5+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // puertost ::= PC4 
            {
              String RESULT = null;
		int pc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc4+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // puertost ::= PC3 
            {
              String RESULT = null;
		int pc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc3+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // puertost ::= PC2 
            {
              String RESULT = null;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc2+"";    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // puertost ::= PC1 
            {
              String RESULT = null;
		int pc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc1+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // puertost ::= PC0 
            {
              String RESULT = null;
		int pc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc0+"";    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // puertost ::= PB7 
            {
              String RESULT = null;
		int pb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // puertost ::= PB6 
            {
              String RESULT = null;
		int pb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb6+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // puertost ::= PB5 
            {
              String RESULT = null;
		int pb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb5+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // puertost ::= PB4 
            {
              String RESULT = null;
		int pb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb4+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // puertost ::= PB3 
            {
              String RESULT = null;
		int pb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb3+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // puertost ::= PB2 
            {
              String RESULT = null;
		int pb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb2+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // puertost ::= PB1 
            {
              String RESULT = null;
		int pb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb1+"";   
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // puertost ::= PB0 
            {
              String RESULT = null;
		int pb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb0+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // puertost ::= PA7 
            {
              String RESULT = null;
		int pa7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa7+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // puertost ::= PA6 
            {
              String RESULT = null;
		int pa6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa6+"";  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // puertost ::= PA5 
            {
              String RESULT = null;
		int pa5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa5+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // puertost ::= PA4 
            {
              String RESULT = null;
		int pa4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa4+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // puertost ::= PA3 
            {
              String RESULT = null;
		int pa3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa3+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // puertost ::= PA2 
            {
              String RESULT = null;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa2+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // puertost ::= PA1 
            {
              String RESULT = null;
		int pa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa1+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // puertost ::= PA0 
            {
              String RESULT = null;
		int pa0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa0+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // puertost ::= PE 
            {
              String RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=pe+"";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // puertost ::= PD 
            {
              String RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // puertost ::= PC 
            {
              String RESULT = null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc+"";
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // puertost ::= PB 
            {
              String RESULT = null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pb+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // puertost ::= PA 
            {
              String RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa+""; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*puertost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // puertos ::= ADCON1_VCFG0 
            {
              String RESULT = null;
		int adcg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcg0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcg0 + "=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // puertos ::= ADCON1_VCFG1 
            {
              String RESULT = null;
		int adcg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcg1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcg1 + "=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // puertos ::= ADCON1_ADFM 
            {
              String RESULT = null;
		int adc1fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adc1fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adc1fm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adc1fm + "=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // puertos ::= ADCON0_ADON 
            {
              String RESULT = null;
		int adcadonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcadonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcadon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcadon+ " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // puertos ::= ADCON0_GO 
            {
              String RESULT = null;
		int adcgoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcgoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcgo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcgo + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // puertos ::= ADCON0_CHS0 
            {
              String RESULT = null;
		int adcs0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // puertos ::= ADCON0_CHS1 
            {
              String RESULT = null;
		int adcs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // puertos ::= ADCON0_CHS2 
            {
              String RESULT = null;
		int adcs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs2 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // puertos ::= ADCON0_CHS3 
            {
              String RESULT = null;
		int adcs3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs3 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // puertos ::= ADCON0_ADCS0 
            {
              String RESULT = null;
		int adcs0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // puertos ::= ADCON0_ADCS1 
            {
              String RESULT = null;
		int adcs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int adcs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object adcs1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = adcs1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // puertos ::= OPTIONREG_RBPU 
            {
              String RESULT = null;
		int oprbpuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oprbpuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object oprbpu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = oprbpu + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // puertos ::= OPTIONREG_PS0 
            {
              String RESULT = null;
		int opps0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opps0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opps0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opps0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // puertos ::= OPTIONREG_PS1 
            {
              String RESULT = null;
		int opps1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opps1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opps1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opps1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // puertos ::= OPTIONREG_PS2 
            {
              String RESULT = null;
		int opps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opps2 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // puertos ::= OPTIONREG_PSA 
            {
              String RESULT = null;
		int oppsaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oppsaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object oppsa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = oppsa + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // puertos ::= OPTIONREG_T0SE 
            {
              String RESULT = null;
		int opt0seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opt0seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opt0se = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opt0se + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // puertos ::= OPTIONREG_T0CS 
            {
              String RESULT = null;
		int opt0csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opt0csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opt0cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opt0cs + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // puertos ::= OPTIONREG_PS 
            {
              String RESULT = null;
		int oppsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oppsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opps + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // puertos ::= OPTIONREG_INTEDG 
            {
              String RESULT = null;
		int opintedgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opintedgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object opintedg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = opintedg + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // puertos ::= INTCONRBIF 
            {
              String RESULT = null;
		int intrbifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intrbifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intrbif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intrbif + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // puertos ::= INTCONINTF 
            {
              String RESULT = null;
		int intintfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intintfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intintf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intintf + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // puertos ::= INTCONT0IF 
            {
              String RESULT = null;
		int intt0ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intt0ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intt0if = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intt0if + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // puertos ::= INTCONRBIE 
            {
              String RESULT = null;
		int intrbieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intrbieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intrbie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intrbie + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // puertos ::= INTCONINTE 
            {
              String RESULT = null;
		int intinteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intinteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intinte = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intinte + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // puertos ::= INTCONT0IE 
            {
              String RESULT = null;
		int intt0ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intt0ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intt0ie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intt0ie + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // puertos ::= INTCONPEIE 
            {
              String RESULT = null;
		int intpeieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intpeieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intpeie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intpeie + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // puertos ::= INTCONGIE 
            {
              String RESULT = null;
		int intgieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intgieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intgie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=intgie + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // puertos ::= ANSELH5 
            {
              String RESULT = null;
		int anselh5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh5 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // puertos ::= ANSELH4 
            {
              String RESULT = null;
		int anselh4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh4 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // puertos ::= ANSELH3 
            {
              String RESULT = null;
		int anselh3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh3 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // puertos ::= ANSELH2 
            {
              String RESULT = null;
		int anselh2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh2 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // puertos ::= ANSELH1 
            {
              String RESULT = null;
		int anselh1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // puertos ::= ANSELH0 
            {
              String RESULT = null;
		int anselh0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselh0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=anselh0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // puertos ::= ANSEL7 
            {
              String RESULT = null;
		int ansel7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel7 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // puertos ::= ANSEL6 
            {
              String RESULT = null;
		int ansel6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel6 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // puertos ::= ANSEL5 
            {
              String RESULT = null;
		int ansel5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel5 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // puertos ::= ANSEL4 
            {
              String RESULT = null;
		int ansel4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel4 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // puertos ::= ANSEL3 
            {
              String RESULT = null;
		int ansel3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel3 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // puertos ::= ANSEL2 
            {
              String RESULT = null;
		int ansel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel2 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // puertos ::= ANSEL1 
            {
              String RESULT = null;
		int ansel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel1 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // puertos ::= ANSEL0 
            {
              String RESULT = null;
		int ansel0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ansel0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ansel0 + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // puertos ::= PE3 
            {
              String RESULT = null;
		int pe3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe3+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // puertos ::= PE2 
            {
              String RESULT = null;
		int pe2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe2+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // puertos ::= PE1 
            {
              String RESULT = null;
		int pe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe1+"=";     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // puertos ::= PE0 
            {
              String RESULT = null;
		int pe0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pe0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pe0+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // puertos ::= PD7 
            {
              String RESULT = null;
		int pd7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pd7+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // puertos ::= PD6 
            {
              String RESULT = null;
		int pd6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd6+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // puertos ::= PD5 
            {
              String RESULT = null;
		int pd5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		   RESULT=pd5+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // puertos ::= PD4 
            {
              String RESULT = null;
		int pd4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd4+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // puertos ::= PD3 
            {
              String RESULT = null;
		int pd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pd3+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // puertos ::= PD2 
            {
              String RESULT = null;
		int pd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		   RESULT=pd2+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // puertos ::= PD1 
            {
              String RESULT = null;
		int pd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pd1+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // puertos ::= PD0 
            {
              String RESULT = null;
		int pd0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pd0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pd0+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // puertos ::= PC7 
            {
              String RESULT = null;
		int pc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		     RESULT=pc7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // puertos ::= PC6 
            {
              String RESULT = null;
		int pc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT=pc6+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // puertos ::= PC5 
            {
              String RESULT = null;
		int pc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc5+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // puertos ::= PC4 
            {
              String RESULT = null;
		int pc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc4+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // puertos ::= PC3 
            {
              String RESULT = null;
		int pc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc3+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // puertos ::= PC2 
            {
              String RESULT = null;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc2+"=";    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // puertos ::= PC1 
            {
              String RESULT = null;
		int pc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=pc1+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // puertos ::= PC0 
            {
              String RESULT = null;
		int pc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pc0+"=";    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // puertos ::= PB7 
            {
              String RESULT = null;
		int pb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // puertos ::= PB6 
            {
              String RESULT = null;
		int pb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb6+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // puertos ::= PB5 
            {
              String RESULT = null;
		int pb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			  RESULT=pb5+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // puertos ::= PB4 
            {
              String RESULT = null;
		int pb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb4+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // puertos ::= PB3 
            {
              String RESULT = null;
		int pb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb3+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // puertos ::= PB2 
            {
              String RESULT = null;
		int pb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb2+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // puertos ::= PB1 
            {
              String RESULT = null;
		int pb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb1+"=";   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // puertos ::= PB0 
            {
              String RESULT = null;
		int pb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pb0+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // puertos ::= PA7 
            {
              String RESULT = null;
		int pa7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	RESULT=pa7+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // puertos ::= PA6 
            {
              String RESULT = null;
		int pa6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa6+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // puertos ::= PA5 
            {
              String RESULT = null;
		int pa5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // puertos ::= PA4 
            {
              String RESULT = null;
		int pa4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  	RESULT=pa4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // puertos ::= PA3 
            {
              String RESULT = null;
		int pa3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // puertos ::= PA2 
            {
              String RESULT = null;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // puertos ::= PA1 
            {
              String RESULT = null;
		int pa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // puertos ::= PA0 
            {
              String RESULT = null;
		int pa0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pa0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=pa0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // puertos ::= TE3 
            {
              String RESULT = null;
		int te3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // puertos ::= TE2 
            {
              String RESULT = null;
		int te2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // puertos ::= TE1 
            {
              String RESULT = null;
		int te1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // puertos ::= TE0 
            {
              String RESULT = null;
		int te0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int te0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=te0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // puertos ::= TD7 
            {
              String RESULT = null;
		int td7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // puertos ::= TD6 
            {
              String RESULT = null;
		int td6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // puertos ::= TD5 
            {
              String RESULT = null;
		int td5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // puertos ::= TD4 
            {
              String RESULT = null;
		int td4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // puertos ::= TD3 
            {
              String RESULT = null;
		int td3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // puertos ::= TD2 
            {
              String RESULT = null;
		int td2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // puertos ::= TD1 
            {
              String RESULT = null;
		int td1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // puertos ::= TD0 
            {
              String RESULT = null;
		int td0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int td0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=td0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // puertos ::= TC7 
            {
              String RESULT = null;
		int tc7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // puertos ::= TC6 
            {
              String RESULT = null;
		int tc6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // puertos ::= TC5 
            {
              String RESULT = null;
		int tc5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // puertos ::= TC4 
            {
              String RESULT = null;
		int tc4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // puertos ::= TC3 
            {
              String RESULT = null;
		int tc3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // puertos ::= TC2 
            {
              String RESULT = null;
		int tc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // puertos ::= TC1 
            {
              String RESULT = null;
		int tc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // puertos ::= TC0 
            {
              String RESULT = null;
		int tc0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tc0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tc0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // puertos ::= TB7 
            {
              String RESULT = null;
		int tb7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // puertos ::= TB6 
            {
              String RESULT = null;
		int tb6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // puertos ::= TB5 
            {
              String RESULT = null;
		int tb5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // puertos ::= TB4 
            {
              String RESULT = null;
		int tb4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // puertos ::= TB3 
            {
              String RESULT = null;
		int tb3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // puertos ::= TB2 
            {
              String RESULT = null;
		int tb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // puertos ::= TB1 
            {
              String RESULT = null;
		int tb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // puertos ::= TB0 
            {
              String RESULT = null;
		int tb0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tb0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=tb0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // puertos ::= TA7 
            {
              String RESULT = null;
		int ta7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta7+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // puertos ::= TA6 
            {
              String RESULT = null;
		int ta6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta6+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // puertos ::= TA5 
            {
              String RESULT = null;
		int ta5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta5+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // puertos ::= TA4 
            {
              String RESULT = null;
		int ta4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta4+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // puertos ::= TA3 
            {
              String RESULT = null;
		int ta3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta3+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // puertos ::= TA2 
            {
              String RESULT = null;
		int ta2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta2+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // puertos ::= TA1 
            {
              String RESULT = null;
		int ta1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta1+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // puertos ::= TA0 
            {
              String RESULT = null;
		int ta0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ta0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT=ta0+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // puertos ::= INTCON 
            {
              String RESULT = null;
		int intconleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int intconright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object intcon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = intcon + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // puertos ::= ANSELH 
            {
              String RESULT = null;
		int anselhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselhright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object anselh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = anselh + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // puertos ::= ANSEL 
            {
              String RESULT = null;
		int anselleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int anselright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ansel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ansel + " = ";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // puertos ::= TE 
            {
              String RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=te+"=";  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // puertos ::= TD 
            {
              String RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=td+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // puertos ::= TC 
            {
              String RESULT = null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=tc+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // puertos ::= TB 
            {
              String RESULT = null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=tb+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // puertos ::= TA 
            {
              String RESULT = null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=ta+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // puertos ::= PE 
            {
              String RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pe = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=pe+"=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // puertos ::= PD 
            {
              String RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pd+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // puertos ::= PC 
            {
              String RESULT = null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pc+"=";
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // puertos ::= PB 
            {
              String RESULT = null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pb+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // puertos ::= PA 
            {
              String RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=pa+"="; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*puertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exprtipos ::= BINARIOCADENA 
            {
              String RESULT = null;
		int bileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String bi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT=""+bi;
			
              CUP$parser$result = new java_cup.runtime.Symbol(22/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exprtipos ::= HEXACADENA 
            {
              String RESULT = null;
		int hcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String hc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			 RESULT=""+hc;
			
              CUP$parser$result = new java_cup.runtime.Symbol(22/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exprtipos ::= CTELOGICA 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 	RESULT=""+b;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exprtipos ::= CARACTER 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 	RESULT=""+b;
		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exprtipos ::= NUMREAL 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 	RESULT=""+n;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // exprtipos ::= NUMERO 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 	RESULT=""+n;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(22/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exprtipos ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			System.out.println("Esto es un identificador= "+id);
			 DatoSimbolo s;
			 if ((s = parser.tabla.buscar(id)) != null) {
				cadena_tipo=s.getTipo();
				RESULT =s.getValor() ;
			}else{
				System.out.println("Varible -->"+id+" no declarada");
			}

		  
              CUP$parser$result = new java_cup.runtime.Symbol(22/*exprtipos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo ::= BOOLEAN 
            {
              String RESULT = null;
		
		  RESULT="bool";
		   
              CUP$parser$result = new java_cup.runtime.Symbol(21/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo ::= CHAR 
            {
              String RESULT = null;
		
		 	RESULT="char";
		 	
              CUP$parser$result = new java_cup.runtime.Symbol(21/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo ::= REAL 
            {
              String RESULT = null;
		
		 	RESULT="float";
		 	
              CUP$parser$result = new java_cup.runtime.Symbol(21/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipo ::= INTEGER 
            {
              String RESULT = null;
		
 		 	RESULT="int";
 		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // signo ::= AND 
            {
              String RESULT = null;
		        RESULT=" && "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // signo ::= OR 
            {
              String RESULT = null;
		         RESULT=" || "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // signo ::= DIFERENTE 
            {
              String RESULT = null;
		  RESULT=" != "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // signo ::= IGUAL2 
            {
              String RESULT = null;
		     RESULT=" == "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // signo ::= MAYORIGUAL 
            {
              String RESULT = null;
		 RESULT=" >= "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // signo ::= MENORIGUAL 
            {
              String RESULT = null;
		 RESULT=" <= "; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // signo ::= MENOR 
            {
              String RESULT = null;
		      RESULT=" < ";  
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // signo ::= MAYOR 
            {
              String RESULT = null;
		       RESULT=" > ";  
              CUP$parser$result = new java_cup.runtime.Symbol(19/*signo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicion_extra ::= signo item_condicion condicion_extra 
            {
              String RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					cadena_condiciones =" "+sig+e1 +cadena_condiciones;
					RESULT =cadena_condiciones;
				
              CUP$parser$result = new java_cup.runtime.Symbol(20/*condicion_extra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicion_extra ::= signo item_condicion 
            {
              String RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					cadena_condiciones=" "+sig+e1;
					RESULT=cadena_condiciones;
				
              CUP$parser$result = new java_cup.runtime.Symbol(20/*condicion_extra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion ::= item_condicion signo item_condicion condicion_extra 
            {
              BloqueCondicion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			 RESULT = generarCondicion(e1 ,sig, e2,c);
			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicion ::= item_condicion signo item_condicion 
            {
              BloqueCondicion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT = generarCondicion(e1 ,sig, e2);
			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // item_condicion ::= HEXACADENA 
            {
              String RESULT = null;
		int hcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String hc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT=""+hc;
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // item_condicion ::= BINARIOCADENA 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT=""+n;
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // item_condicion ::= puertost 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT=p;
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // item_condicion ::= NUMERO 
            {
              String RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT= Integer.toString(num);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // item_condicion ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DatoSimbolo ds=parser.tabla.buscar(id);
			if (ds == null)
			{
				System.out.println(id+ " es una variable no definida");
			}
			else
			{		RESULT=id;
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*item_condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= NUMERO ID 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DatoSimbolo ds=parser.tabla.buscar(id);
			if (ds == null)
			{
				System.out.println(id+ " es una variable no definida");
			}
			else
			{
			RESULT=n+id;
		}
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= ID NUMERO 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DatoSimbolo ds=parser.tabla.buscar(id);
			if (ds == null)
			{
				System.out.println(id+ " es una variable no definida");
			}
			else
			{	RESULT=id+n;
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= NUMERO 
            {
              String RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT= Integer.toString(num);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(id);
				if (ds == null)
				{
					System.out.println(id+ " es una variable no definida");
				}
				else
				{	RESULT=id;
				}

		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // extraperamesta ::= extraperamesta operamesta expression 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					encadenamst=encadenamst+o+v;
					RESULT=encadenamst;
				
              CUP$parser$result = new java_cup.runtime.Symbol(25/*extraperamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // extraperamesta ::= operamesta expression 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT=o+v;
				
              CUP$parser$result = new java_cup.runtime.Symbol(25/*extraperamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operamesta ::= DIVISION 
            {
              Object RESULT = null;
		RESULT="/";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*operamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operamesta ::= MENOS 
            {
              Object RESULT = null;
		RESULT="-";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*operamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operamesta ::= MAS 
            {
              Object RESULT = null;
		RESULT="+";
              CUP$parser$result = new java_cup.runtime.Symbol(24/*operamesta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cases ::= cases CASO expression DOSPUNTOS 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=c+"case "+e2+":\n";

			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cases ::= CASO expression DOSPUNTOS 
            {
              Object RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT="case "+e2+":\n";

			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cases ::= cases OTHERWISE DOSPUNTOS instrucciones 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				RESULT=c+"default: "+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cases ::= cases CASO expression DOSPUNTOS instrucciones 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT=c+"case "+e2+":"+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cases ::= OTHERWISE DOSPUNTOS instrucciones 
            {
              Object RESULT = null;
		
				RESULT="default: "+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cases ::= CASO expression DOSPUNTOS instrucciones 
            {
              Object RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="case "+e2+":"+auxiliar+"break;\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // extraparentesis ::= extraparentesis operamesta parentesis 
            {
              String RESULT = null;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ep+op+p;
              CUP$parser$result = new java_cup.runtime.Symbol(27/*extraparentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // extraparentesis ::= extraperamesta parentesis 
            {
              String RESULT = null;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=ep+p;
              CUP$parser$result = new java_cup.runtime.Symbol(27/*extraparentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // extraparentesis ::= parentesis 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=p;
              CUP$parser$result = new java_cup.runtime.Symbol(27/*extraparentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // extraparentesis ::= operamesta parentesis 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=o+p;
              CUP$parser$result = new java_cup.runtime.Symbol(27/*extraparentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parentesis ::= LPAREN parentesis operamesta parentesis extraparentesis RPAREN 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+p+o+p2+ep+")";
              CUP$parser$result = new java_cup.runtime.Symbol(26/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parentesis ::= LPAREN parentesis operamesta expression extraparentesis RPAREN 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+p+o+p2+ep+")";
              CUP$parser$result = new java_cup.runtime.Symbol(26/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parentesis ::= LPAREN parentesis operamesta expression RPAREN 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+p+o+e+")";
              CUP$parser$result = new java_cup.runtime.Symbol(26/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parentesis ::= LPAREN parentesis operamesta parentesis RPAREN 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+p+o+p2+")";
              CUP$parser$result = new java_cup.runtime.Symbol(26/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parentesis ::= LPAREN expression operamesta expression operamesta parentesis RPAREN 
            {
              String RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+v2+o+v3+o2+p+")";
              CUP$parser$result = new java_cup.runtime.Symbol(26/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parentesis ::= LPAREN expression operamesta expression extraperamesta RPAREN 
            {
              String RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+v2+o+v3+eo+")";
              CUP$parser$result = new java_cup.runtime.Symbol(26/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parentesis ::= LPAREN expression operamesta expression RPAREN 
            {
              String RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+v2+o+v3+")";
              CUP$parser$result = new java_cup.runtime.Symbol(26/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parentesis ::= LPAREN expression RPAREN 
            {
              String RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+v2+")";
              CUP$parser$result = new java_cup.runtime.Symbol(26/*parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declvar ::= TIPOVC ID DOSPUNTOS tipo IGUAL exprtipos PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				//RESULT = t;
				if(parser.tabla.buscar(id)!= null){
					System.err.println(id + " redeclarada.");
				}else{
				 	switch(t){
			            case "int":
			                if(Num.valInt(e)){
			                    RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
			                }else{
			                	String msj="//La variable: "+id+" es una cadena "+e+" y no es compatible con un tipo de dato INT\n";
			                    RESULT= msj;
			                }
			                break;
			            case "float":
			            	if(Num.valFloat(e)){
			                    RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
			            	}else{
			            		String msj="//La variable: "+id+" es una cadena "+e+" y no es compatible con un tipo de dato FLOAT\n";
			                    RESULT= msj;
			            	}
			                break;
			            case "char":
			            	if(Num.valInt(e) || Num.valFloat(e)){
				                String msj="//La variable: "+id+" es un numero "+e+" y no es compatible con un CARACTER\n";
			                    RESULT= msj;
				            }else{
				                RESULT="\n\t"+t+" "+id+" ="+e+";";
			                    parser.tabla.insertar(id, t,e);
				            }
			                break;
			            case "bool":
			            	if(e.equalsIgnoreCase("TRUE") || e.equalsIgnoreCase("FALSE")){
			            		RESULT="\n\t"+t+" "+id+" ="+e.toLowerCase()+";";
			            		parser.tabla.insertar(id,t,e);
			            	}else{
			            		String msj="\n//La variable: "+id+" es un valor no compatible "+e+" se requiere TRUE o FALSE\n";
			                    RESULT= msj;
			            	}
			                break;
			            default :
			            	String msj="//Tipo de dato desconocido: "+t+"\n";
			                    RESULT= msj;
		        	}
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(14/*declvar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declvar ::= TIPOVC ID DOSPUNTOS tipo PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(id);
				if(ds!= null)
					System.err.println(id + " redeclarada.");
				else{
				 	RESULT="\n\t"+t+" "+id+";";
					parser.tabla.insertar(id, t,"");
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(14/*declvar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // muchasdeclvar ::= declvar muchasdeclvar 
            {
              String RESULT = null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					cadena_decvar=dv+cadena_decvar;
					RESULT=cadena_decvar;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*muchasdeclvar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // muchasdeclvar ::= declvar 
            {
              String RESULT = null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			cadena_decvar=dv;
					RESULT=cadena_decvar;
			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*muchasdeclvar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruccion ::= ID IGUAL parentesis operamesta expression PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{
					System.out.println(v+ " es una variable no definida");
			  }
				else
				{
					RESULT=v+"="+p+o+e+";\n";
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccion ::= ID IGUAL parentesis operamesta parentesis PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{
					System.out.println(v+ " es una variable no definida");
			  }
				else
				{
					RESULT=v+"="+p+o+p2+";\n";
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccion ::= ID IGUAL parentesis PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{
					System.out.println(v+ " es una variable no definida");
			  }
				else
				{
					RESULT=v+"="+p+";\n";
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccion ::= ID IGUAL expression operamesta expression extraperamesta PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{
					System.out.println(v+ " es una variable no definida");
			  }
				else
				{
				RESULT=v+"="+v2+o+v3+eo+";\n";
				encadenamst="";
			 }
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccion ::= ID IGUAL expression operamesta expression PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{
					System.out.println(v+ " es una variable no definida");
			  }
				else
				{
				RESULT=v+"="+v2+o+v3+";\n";
			  }
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccion ::= ID IGUAL ID RECBITSDER NUMERO PCOMA 
            {
              String RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					DatoSimbolo ds=parser.tabla.buscar(var);
					DatoSimbolo ds2=parser.tabla.buscar(v);
					if (ds == null)
					{System.out.println(var+ " es una variable no definida");}
					else
						if(ds2 == null){
								System.out.println(v+ " es una variable no definida");
						}
					else
					{
					RESULT = var +"="+v+"<<"+n+";\n";
				  }
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccion ::= ID IGUAL ID RECBITSIZQ NUMERO PCOMA 
            {
              String RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					DatoSimbolo ds=parser.tabla.buscar(var);
					DatoSimbolo ds2=parser.tabla.buscar(v);
					if (ds == null)
					{System.out.println(var+ " es una variable no definida");}
					else
						if(ds2 == null){
								System.out.println(v+ " es una variable no definida");
						}
					else
					{
						RESULT = var +"="+v+">>"+n+";\n";
					}
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccion ::= ID RECBITSDER NUMERO PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{System.out.println(v+ " es una variable no definida");}
				else
				{
						RESULT=v+">>"+n+";\n";
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion ::= ID RECBITSIZQ NUMERO PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      	DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{System.out.println(v+ " es una variable no definida");}
				else
				{
					RESULT=v+"<<"+n+";\n";
				}
    	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion ::= WHILE LPAREN expression RPAREN DO instrucciones FIN WHILE 
            {
              String RESULT = null;
		int etqInicioWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int etqInicioWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String etqInicioWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
				RESULT="\n\t\twhile("+c+")\n\t\t{\n\t"+auxiliar+"\t\t}";
				auxiliar="";
		  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion ::= WHILE LPAREN condicion RPAREN DO instrucciones FIN WHILE 
            {
              String RESULT = null;
		int etqInicioWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int etqInicioWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String etqInicioWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
				RESULT="\n\t\twhile("+c.condicion+")\n\t\t{\n\t"+auxiliar+"\t\t}";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion ::= SWITCH LPAREN puertost RPAREN OF cases FIN SWITCH 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="\n\t\tswitch("+p+")\n{\n\t\t\t"+c+"\n}\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion ::= SWITCH LPAREN expression RPAREN OF cases FIN SWITCH 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				RESULT="\n\t\tswitch("+e+")\n{\n\t\t\t"+c+"\n}\n";
				auxiliar="";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones NT$1 NO instrucciones FIN 
            {
              String RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		

					p1=pila2.pop().toString();
					auxno=auxiliar;
					RESULT="\n\t\tif("+p+")\n\t\t{\t"+p1+"\t\t}"+"\n\t\telse\n\t\t{\n\t"+auxno+"\t\t}\n";
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$1 ::= 
            {
              Object RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;


					pila2.push(auxiliar);
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(30/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones NT$0 NO instrucciones FIN 
            {
              String RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		

					p1=p.pop().toString();
					auxno=auxiliar;
					RESULT="\n\t\tif("+c.condicion+")\n\t\t{\t"+p1+"\t\t}"+"\n\t\telse\n\t\t{\n\t"+auxno+"\t\t}\n";
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$0 ::= 
            {
              Object RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;


					p.push(auxiliar);
					auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(29/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= SI LPAREN puertost RPAREN THEN instrucciones FIN 
            {
              String RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				aux="\n\t\tif("+p+")\n\t\t{\t"+auxiliar+"\t\t}\n";
				auxiliar="";
				RESULT=aux;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= SI LPAREN condicion RPAREN THEN instrucciones FIN 
            {
              String RESULT = null;
		int etqFinIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int etqFinIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String etqFinIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BloqueCondicion c = (BloqueCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				aux="\n\t\tif("+c.condicion+")\n\t\t{\t"+auxiliar+"\t\t}\n";
				auxiliar="";
				RESULT=aux;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= TMR0 IGUAL HEXACADENA PCOMA 
            {
              String RESULT = null;
		int tmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String hc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = tm+"= "+hc;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= RETURN PCOMA 
            {
              String RESULT = null;
		
				RESULT="return;\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= ID MENOS MENOS PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{System.out.println(v+ " es una variable no definida");}
				else
				{
					RESULT=v+"--;\n";
				}

			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= ID MAS MAS PCOMA 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					DatoSimbolo ds=parser.tabla.buscar(v);
					if (ds == null)
					{System.out.println(v+ " es una variable no definida");}
					else
					{
						RESULT=v+"++;\n";
					}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= puertos IGUAL puertost MAS ID PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				DatoSimbolo ds=parser.tabla.buscar(v);
				if (ds == null)
				{
					System.out.println(v+ " es una variable no definida");
				}
				else
				{
				RESULT=p+u+"+"+v+";\n";
			 }
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= puertos IGUAL puertost MAS NUMERO PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=p+u+"+"+n+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= DELAY LLLAVE NUMERO RLLAVE PCOMA 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	   			RESULT=c+"("+n+");\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= CHALE LPAREN NUMERO RPAREN PCOMA 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	   			RESULT=c+"("+n+");\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= ID LPAREN expression RPAREN PCOMA 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Metodos s;
				if ((s = tablaMetodos.search(i)) == null)
				{System.out.println(i+ " es una METODO no definido");}
				else
				{
					RESULT="\t"+i+"("+ex+");\n";
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= ID LPAREN RPAREN PCOMA 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				Metodos s;
				if ((s = tablaMetodos.search(i)) == null)
				{System.out.println(i+ " es una METODO no definido");}
				else
				{
					RESULT="\t"+i+"();\n";
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= puertos IGUAL ID PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			DatoSimbolo ds=parser.tabla.buscar(n);
	 		if (ds == null)
	 		{
	 			System.out.println(n+ " es una variable no definida");
	 		}
	 		else
	 		{
			RESULT="\n\t"+p+n+";\n";
		 }

		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= puertos IGUAL BINARIOCADENA PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			 RESULT="\n\t"+p+n+";\n";
		 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= puertos IGUAL NUMERO PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT="\n\t"+p+n+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= puertos TOGGLE puertost PCOMA 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT="\n\t"+p+t+u+";\n";
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= ID IGUAL exprtipos PCOMA 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			DatoSimbolo ds=parser.tabla.buscar(id);
			 if(ds!= null){
			 RESULT="\n\t"+id+"="+t+";";
			}
			 else{
			 	System.out.println("Error al Asignar valor a: "+id);
			}


			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= declvar 
            {
              String RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				 RESULT="\n\t"+d;
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones ::= instruccion instrucciones 
            {
              String RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				auxiliar=in+auxiliar;
			
              CUP$parser$result = new java_cup.runtime.Symbol(8/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciones ::= instruccion 
            {
              String RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				auxiliar=in + auxiliar;
			
              CUP$parser$result = new java_cup.runtime.Symbol(8/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros ::= ID DOSPUNTOS tipo COMA parametros 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				cadena_parametros=" "+t+" "+id+" ,"+cadena_parametros;
			
              CUP$parser$result = new java_cup.runtime.Symbol(23/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros ::= ID DOSPUNTOS tipo 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				cadena_parametros=" "+t+" "+id;
			
              CUP$parser$result = new java_cup.runtime.Symbol(23/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo ::= metodo VOID ID LPAREN parametros RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(m)) == null)
				s = tablaMetodos.insert(m,auxiliar);
			else
				{ s.setvalue(auxiliar);}
			codigo=v+m+"("+cadena_parametros+")\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		    cadena_parametros="";
		 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo ::= VOID ID LPAREN parametros RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(i)) == null)
				s = tablaMetodos.insert(i,auxiliar);
			else
			{
				s.setvalue(auxiliar);
			}
			codigo=v+i+"("+cadena_parametros+")\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		    cadena_parametros="";
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodo ::= metodo VOID ID LPAREN RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(m)) == null)
				s = tablaMetodos.insert(m,auxiliar);
			else
				{ s.setvalue(auxiliar);}
			codigo=v+m+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // metodo ::= VOID ID LPAREN RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
					Metodos s;
					if ((s = tablaMetodos.search(i)) == null)
						s = tablaMetodos.insert(i,auxiliar);
					else
					{
						s.setvalue(auxiliar);
					}
					codigo=v+i+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
					losMetodos=losMetodos+codigo;
				    auxiliar="";
				
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metodo ::= VOID INTERRUPT ID LPAREN RPAREN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
			Metodos s;
			if ((s = tablaMetodos.search(i)) == null)
				s = tablaMetodos.insert(i,auxiliar);
			else
			{
				s.setvalue(auxiliar);
			}
			codigo=v+""+it+i+"()\n\t{\n"+auxiliar+"\n\t}\n\n";
			losMetodos=losMetodos+codigo;
		    auxiliar="";
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // main ::= MAIN LLLAVE RLLAVE 
            {
              Object RESULT = null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			miCodigo=miCodigo+main+"{\n\t\tsetup();\n\t\tloop();\n\n\t\t return; \n\t }";
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*main*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // main ::= MAIN LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			miCodigo=miCodigo+main+"{\n\t\tsetup();\n\t\tloop();\n"+auxiliar+"\n\t\t return; \n\t }";
		    auxiliar="";
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*main*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ciclo ::= CICLO LLLAVE RLLAVE 
            {
              Object RESULT = null;
		int cicloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cicloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ciclo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        	miCodigo=miCodigo+ciclo+"{\n\t \t \n\n \t\t\n\n\t}";
        
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ciclo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ciclo ::= CICLO LLLAVE instrucciones RLLAVE 
            {
              Object RESULT = null;
		int cicloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cicloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ciclo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			miCodigo=miCodigo+ciclo+"{\n\t \t \n\n"+ auxiliar +"\t\t\n\n\t}";
			auxiliar="";
        
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ciclo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // io ::= SALIDA 
            {
              String RESULT = null;
		int salidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int salidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object salida = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT="0;\n";
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*io*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // io ::= ENTRADA 
            {
              String RESULT = null;
		
		RESULT="1;\n";
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*io*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // confpuertos ::= confpuertos puertos IGUAL io PCOMA 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				miCodigo=miCodigo+p+i;
	        
              CUP$parser$result = new java_cup.runtime.Symbol(9/*confpuertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // confpuertos ::= puertos IGUAL io PCOMA 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				miCodigo=miCodigo+p+i;
			
              CUP$parser$result = new java_cup.runtime.Symbol(9/*confpuertos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // setup ::= SETUP LLLAVE confpuertos instrucciones RLLAVE 
            {
              Object RESULT = null;
		int setupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int setupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object setup = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	        miCodigo=setup+"{\n\tOSCCON=0x60;\n\tANSEL=0;\n"+miCodigo+auxiliar+"\n}";
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*setup*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // setup ::= SETUP LLLAVE confpuertos RLLAVE 
            {
              Object RESULT = null;
		int setupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int setupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object setup = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	        miCodigo=setup+"{\n\tOSCCON=0x60;"+miCodigo+"\n}";
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*setup*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // frecuencia ::= FREQ LLLAVE NUMERO RLLAVE 
            {
              String RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							RESULT=f+" "+n+"\n";
						
              CUP$parser$result = new java_cup.runtime.Symbol(28/*frecuencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // frecuencia ::= 
            {
              String RESULT = null;
		
							RESULT=" ";
						
              CUP$parser$result = new java_cup.runtime.Symbol(28/*frecuencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // metodos ::= muchasdeclvar setup ciclo 
            {
              Object RESULT = null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // metodos ::= muchasdeclvar metodo setup RETARDO LPAREN RPAREN PCOMA ciclo 
            {
              Object RESULT = null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int retardoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retardoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object retardo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
				miCodigo=dv+retardo+losMetodos+miCodigo;
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // metodos ::= muchasdeclvar metodo setup ciclo 
            {
              Object RESULT = null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				miCodigo=dv+losMetodos+miCodigo;
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // metodos ::= muchasdeclvar setup RETARDO LPAREN RPAREN PCOMA ciclo 
            {
              Object RESULT = null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int retardoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retardoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object retardo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 miCodigo=dv+retardo+miCodigo;  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodos ::= metodo setup RETARDO LPAREN RPAREN PCOMA ciclo 
            {
              Object RESULT = null;
		int retardoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retardoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object retardo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					miCodigo=retardo+losMetodos+miCodigo;
				
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodos ::= metodo setup ciclo 
            {
              Object RESULT = null;
		
					miCodigo=losMetodos+miCodigo;
				
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodos ::= setup RETARDO LPAREN RPAREN PCOMA ciclo 
            {
              Object RESULT = null;
		int retardoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retardoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object retardo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 miCodigo=retardo+miCodigo;  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // metodos ::= setup ciclo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= FUSES frecuencia metodos main 
            {
              Object RESULT = null;
		int fusesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fusesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fuses = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
 					miCodigo=fuses+f+miCodigo;
                File miClase;
	        	try{
	            	miClase = new File("mapic.c");
	            	if(miClase.exists())
	            		miClase.delete();
	            	if(miClase.createNewFile()){
	            	}
	            	FileWriter escribir=new FileWriter(miClase,true);
	            	escribir.write(miCodigo);
	            	escribir.close();
	        	}catch(IOException e){
	        		System.out.println("ERROR NO SE PUEDE CREAR EL ARCHIVO ");
	        	}


              CUP$parser$result = new java_cup.runtime.Symbol(1/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

